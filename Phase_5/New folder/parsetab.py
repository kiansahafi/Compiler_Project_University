# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'statement_listrightOP_negateCHARACTER COMMA FLOAT IDENTIFIER INTEGER KEY_char KEY_do KEY_else KEY_float KEY_for KEY_if KEY_int KEY_print KEY_string KEY_while LBRACE LPAREN OP_add OP_assign OP_divide OP_equal OP_greater OP_greaterequal OP_less OP_lessequal OP_mod OP_multiply OP_negate OP_notequal OP_subtract RBRACE RPAREN SEMICOLON STRINGstatement : compound_statement\n                 | declaration_statement\n                 | selection_statement\n                 | iteration_statement\n                 | expression_statement\n                 | print_statement\n                 | SEMICOLONcompound_statement : LBRACE statement_list RBRACEstatement_list : statement_list statement \n                      | emptydeclaration_statement : type_specifier declaration_list SEMICOLONtype_specifier : KEY_int\n                      | KEY_char\n                      | KEY_float\n                      | KEY_string\n    declaration_list : single_var_declation COMMA declaration_list\n                        | single_var_declation\n    single_var_declation : IDENTIFIER\n                            | IDENTIFIER OP_assign equality_expression\n    print_statement : KEY_print LPAREN expression RPAREN SEMICOLONselection_statement : KEY_if LPAREN expression save RPAREN statement\n                           | KEY_if LPAREN expression save RPAREN statement KEY_else save statementiteration_statement : KEY_while label LPAREN expression save RPAREN statement\n                           | KEY_do label statement KEY_while LPAREN expression RPAREN SEMICOLON\n                           | KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statementlabel : emptysave : emptyoptexpr : assignment_expression\n               | empty\n    expression_statement : expression SEMICOLONexpression : assignment_expression\n                  | expression COMMA assignment_expression\n    assignment_expression : equality_expression\n                             | IDENTIFIER OP_assign equality_expression\n    equality_expression : relational_expression\n                           | equality_expression OP_equal relational_expression\n                           | equality_expression OP_notequal relational_expression\n    relational_expression : additive_expression\n                             | relational_expression OP_greater additive_expression \n                             | relational_expression OP_less additive_expression\n                             | relational_expression OP_greaterequal additive_expression\n                             | relational_expression OP_lessequal additive_expression\n    additive_expression : multiplicative_expression \n                           | additive_expression OP_add multiplicative_expression\n                           | additive_expression OP_subtract multiplicative_expression\n    multiplicative_expression : unary_expression\n                                 | multiplicative_expression OP_multiply unary_expression\n                                 | multiplicative_expression OP_divide unary_expression\n                                 | multiplicative_expression OP_mod unary_expression\n    unary_expression : primary_expression\n                        | OP_subtract primary_expression %prec OP_negateprimary_expression : INTEGER\n                          | FLOAT\n                          | CHARACTER\n                          | STRING\n                          | id_expression\n    id_expression : IDENTIFIER\n             | LPAREN expression RPAREN\n    empty :'

_lr_action_items = {'SEMICOLON': (
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 17, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44,
 47, 48, 49, 63, 64, 65, 66, 70, 71, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 97, 98,
 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 114, 116, 117, ],
[-59, 10, -10, -9, -1, -2, -3, -4, -5, -6, -7, -59, 44, -59, -31, -33, -57, -35, -38, -43, -46, -50, -52, -53, -54, -55,
 -56, 10, 66, -17, -18, -30, -26, 10, -59, -51, -57, -8, -11, -58, -32, -59, -28, -29, -36, -37, -34, -39, -40, -41,
 -42, -44, -45, -47, -48, -49, -16, -19, -27, 101, 102, 10, -59, -20, -21, 10, -59, -59, -23, 112, 113, 10, -24, -22,
 10, -25, ]), 'LBRACE': (
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 17, 38, 44, 47, 48, 65, 66, 93, 98, 102, 103, 104, 107, 108, 111, 112, 114, 116,
 117, ],
[-59, 11, -10, -9, -1, -2, -3, -4, -5, -6, -7, -59, -59, 11, -30, -26, 11, -8, -11, -27, 11, -20, -21, 11, -59, -23, 11,
 -24, -22, 11, -25, ]), 'KEY_if': (
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 17, 38, 44, 47, 48, 65, 66, 93, 98, 102, 103, 104, 107, 108, 111, 112, 114, 116,
 117, ],
[-59, 13, -10, -9, -1, -2, -3, -4, -5, -6, -7, -59, -59, 13, -30, -26, 13, -8, -11, -27, 13, -20, -21, 13, -59, -23, 13,
 -24, -22, 13, -25, ]), 'KEY_while': (
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 17, 38, 44, 47, 48, 65, 66, 73, 93, 98, 102, 103, 104, 107, 108, 111, 112, 114,
 116, 117, ],
[-59, 16, -10, -9, -1, -2, -3, -4, -5, -6, -7, -59, -59, 16, -30, -26, 16, -8, -11, 95, -27, 16, -20, -21, 16, -59, -23,
 16, -24, -22, 16, -25, ]), 'KEY_do': (
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 17, 38, 44, 47, 48, 65, 66, 93, 98, 102, 103, 104, 107, 108, 111, 112, 114, 116,
 117, ],
[-59, 17, -10, -9, -1, -2, -3, -4, -5, -6, -7, -59, -59, 17, -30, -26, 17, -8, -11, -27, 17, -20, -21, 17, -59, -23, 17,
 -24, -22, 17, -25, ]), 'KEY_for': (
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 17, 38, 44, 47, 48, 65, 66, 93, 98, 102, 103, 104, 107, 108, 111, 112, 114, 116,
 117, ],
[-59, 18, -10, -9, -1, -2, -3, -4, -5, -6, -7, -59, -59, 18, -30, -26, 18, -8, -11, -27, 18, -20, -21, 18, -59, -23, 18,
 -24, -22, 18, -25, ]), 'KEY_print': (
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 17, 38, 44, 47, 48, 65, 66, 93, 98, 102, 103, 104, 107, 108, 111, 112, 114, 116,
 117, ],
[-59, 19, -10, -9, -1, -2, -3, -4, -5, -6, -7, -59, -59, 19, -30, -26, 19, -8, -11, -27, 19, -20, -21, 19, -59, -23, 19,
 -24, -22, 19, -25, ]), 'KEY_int': (
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 17, 38, 44, 47, 48, 65, 66, 93, 98, 102, 103, 104, 107, 108, 111, 112, 114, 116,
 117, ],
[-59, 20, -10, -9, -1, -2, -3, -4, -5, -6, -7, -59, -59, 20, -30, -26, 20, -8, -11, -27, 20, -20, -21, 20, -59, -23, 20,
 -24, -22, 20, -25, ]), 'KEY_char': (
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 17, 38, 44, 47, 48, 65, 66, 93, 98, 102, 103, 104, 107, 108, 111, 112, 114, 116,
 117, ],
[-59, 21, -10, -9, -1, -2, -3, -4, -5, -6, -7, -59, -59, 21, -30, -26, 21, -8, -11, -27, 21, -20, -21, 21, -59, -23, 21,
 -24, -22, 21, -25, ]), 'KEY_float': (
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 17, 38, 44, 47, 48, 65, 66, 93, 98, 102, 103, 104, 107, 108, 111, 112, 114, 116,
 117, ],
[-59, 22, -10, -9, -1, -2, -3, -4, -5, -6, -7, -59, -59, 22, -30, -26, 22, -8, -11, -27, 22, -20, -21, 22, -59, -23, 22,
 -24, -22, 22, -25, ]), 'KEY_string': (
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 17, 38, 44, 47, 48, 65, 66, 93, 98, 102, 103, 104, 107, 108, 111, 112, 114, 116,
 117, ],
[-59, 23, -10, -9, -1, -2, -3, -4, -5, -6, -7, -59, -59, 23, -30, -26, 23, -8, -11, -27, 23, -20, -21, 23, -59, -23, 23,
 -24, -22, 23, -25, ]), 'IDENTIFIER': (
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 17, 20, 21, 22, 23, 30, 38, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54,
 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 72, 93, 98, 100, 101, 102, 103, 104, 107, 108, 111, 112, 113, 114, 116,
 117, ],
[-59, 26, -10, -9, -1, -2, -3, -4, -5, -6, -7, -59, 41, 26, -59, -12, -13, -14, -15, 64, 26, 26, -30, 26, -26, 26, 26,
 26, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, -8, -11, 41, 64, 26, -27, 26, 26, 26, -20, -21, 26, -59, -23, 26,
 -24, 26, -22, 26, -25, ]), 'OP_subtract': (
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 17, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 42, 44, 45, 47, 48, 49, 50,
 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 72, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 98,
 100, 101, 102, 103, 104, 107, 108, 111, 112, 113, 114, 116, 117, ],
[-59, 30, -10, -9, -1, -2, -3, -4, -5, -6, -7, -59, 30, -59, -57, 59, -43, -46, -50, -52, -53, -54, -55, -56, 30, 30,
 -30, 30, -26, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, -51, -57, -8, -11, 30, -58, 30, 59, 59, 59,
 59, -44, -45, -47, -48, -49, -27, 30, 30, 30, -20, -21, 30, -59, -23, 30, -24, 30, -22, 30, -25, ]), 'INTEGER': (
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 17, 30, 38, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
 60, 61, 62, 65, 66, 68, 72, 93, 98, 100, 101, 102, 103, 104, 107, 108, 111, 112, 113, 114, 116, 117, ],
[-59, 33, -10, -9, -1, -2, -3, -4, -5, -6, -7, -59, 33, -59, 33, 33, 33, -30, 33, -26, 33, 33, 33, 33, 33, 33, 33, 33,
 33, 33, 33, 33, 33, 33, 33, -8, -11, 33, 33, -27, 33, 33, 33, -20, -21, 33, -59, -23, 33, -24, 33, -22, 33, -25, ]),
                    'FLOAT': (
                    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 17, 30, 38, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54,
                     55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 68, 72, 93, 98, 100, 101, 102, 103, 104, 107, 108, 111,
                     112, 113, 114, 116, 117, ],
                    [-59, 34, -10, -9, -1, -2, -3, -4, -5, -6, -7, -59, 34, -59, 34, 34, 34, -30, 34, -26, 34, 34, 34,
                     34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, -8, -11, 34, 34, -27, 34, 34, 34, -20, -21, 34,
                     -59, -23, 34, -24, 34, -22, 34, -25, ]), 'CHARACTER': (
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 17, 30, 38, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
     59, 60, 61, 62, 65, 66, 68, 72, 93, 98, 100, 101, 102, 103, 104, 107, 108, 111, 112, 113, 114, 116, 117, ],
    [-59, 35, -10, -9, -1, -2, -3, -4, -5, -6, -7, -59, 35, -59, 35, 35, 35, -30, 35, -26, 35, 35, 35, 35, 35, 35, 35,
     35, 35, 35, 35, 35, 35, 35, 35, -8, -11, 35, 35, -27, 35, 35, 35, -20, -21, 35, -59, -23, 35, -24, 35, -22, 35,
     -25, ]), 'STRING': (
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 17, 30, 38, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
     59, 60, 61, 62, 65, 66, 68, 72, 93, 98, 100, 101, 102, 103, 104, 107, 108, 111, 112, 113, 114, 116, 117, ],
    [-59, 36, -10, -9, -1, -2, -3, -4, -5, -6, -7, -59, 36, -59, 36, 36, 36, -30, 36, -26, 36, 36, 36, 36, 36, 36, 36,
     36, 36, 36, 36, 36, 36, 36, 36, -8, -11, 36, 36, -27, 36, 36, 36, -20, -21, 36, -59, -23, 36, -24, 36, -22, 36,
     -25, ]), 'LPAREN': (
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 30, 38, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
     54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 68, 72, 93, 95, 98, 100, 101, 102, 103, 104, 107, 108, 111, 112, 113,
     114, 116, 117, ],
    [-59, 14, -10, -9, -1, -2, -3, -4, -5, -6, -7, -59, 42, 14, -59, -59, 49, 50, 14, 14, 14, -30, 14, 72, -26, 14, 14,
     14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, -8, -11, 14, 14, -27, 100, 14, 14, 14, -20, -21, 14, -59, -23,
     14, -24, 14, -22, 14, -25, ]), '$end': (
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 44, 65, 66, 102, 103, 108, 112, 114, 117, ],
    [-59, 0, -10, -9, -1, -2, -3, -4, -5, -6, -7, -30, -8, -11, -20, -21, -23, -24, -22, -25, ]), 'RBRACE': (
    [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 38, 44, 65, 66, 102, 103, 108, 112, 114, 117, ],
    [-10, -9, -1, -2, -3, -4, -5, -6, -7, -59, 65, -30, -8, -11, -20, -21, -23, -24, -22, -25, ]), 'KEY_else': (
    [4, 5, 6, 7, 8, 9, 10, 44, 65, 66, 102, 103, 108, 112, 114, 117, ],
    [-1, -2, -3, -4, -5, -6, -7, -30, -8, -11, -20, 107, -23, -24, -22, -25, ]), 'COMMA': (
    [15, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 40, 41, 43, 63, 64, 69, 70, 71, 77, 78, 79, 80, 81, 82, 83,
     84, 85, 86, 87, 88, 89, 91, 94, 105, ],
    [45, -31, -33, -57, -35, -38, -43, -46, -50, -52, -53, -54, -55, -56, 67, -18, 45, -51, -57, 45, -58, -32, 45, -36,
     -37, -34, -39, -40, -41, -42, -44, -45, -47, -48, -49, -19, 45, 45, ]), 'RPAREN': (
    [24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 43, 63, 64, 69, 70, 71, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
     85, 86, 87, 88, 89, 92, 93, 94, 99, 105, 113, 115, ],
    [-31, -33, -57, -35, -38, -43, -46, -50, -52, -53, -54, -55, -56, 70, -51, -57, -59, -58, -32, -28, -29, 97, -36,
     -37, -34, -39, -40, -41, -42, -44, -45, -47, -48, -49, 98, -27, -59, 104, 109, -59, 116, ]), 'OP_equal': (
    [25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 63, 64, 70, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, ],
    [51, -57, -35, -38, -43, -46, -50, -52, -53, -54, -55, -56, -51, -57, -58, -36, -37, 51, -39, -40, -41, -42, -44,
     -45, -47, -48, -49, 51, ]), 'OP_notequal': (
    [25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 63, 64, 70, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, ],
    [52, -57, -35, -38, -43, -46, -50, -52, -53, -54, -55, -56, -51, -57, -58, -36, -37, 52, -39, -40, -41, -42, -44,
     -45, -47, -48, -49, 52, ]), 'OP_assign': ([26, 41, ], [53, 68, ]), 'OP_multiply': (
    [26, 29, 31, 32, 33, 34, 35, 36, 37, 63, 64, 70, 85, 86, 87, 88, 89, ],
    [-57, 60, -46, -50, -52, -53, -54, -55, -56, -51, -57, -58, 60, 60, -47, -48, -49, ]), 'OP_divide': (
    [26, 29, 31, 32, 33, 34, 35, 36, 37, 63, 64, 70, 85, 86, 87, 88, 89, ],
    [-57, 61, -46, -50, -52, -53, -54, -55, -56, -51, -57, -58, 61, 61, -47, -48, -49, ]), 'OP_mod': (
    [26, 29, 31, 32, 33, 34, 35, 36, 37, 63, 64, 70, 85, 86, 87, 88, 89, ],
    [-57, 62, -46, -50, -52, -53, -54, -55, -56, -51, -57, -58, 62, 62, -47, -48, -49, ]), 'OP_add': (
    [26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 63, 64, 70, 81, 82, 83, 84, 85, 86, 87, 88, 89, ],
    [-57, 58, -43, -46, -50, -52, -53, -54, -55, -56, -51, -57, -58, 58, 58, 58, 58, -44, -45, -47, -48, -49, ]),
                    'OP_greater': (
                    [26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 63, 64, 70, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88,
                     89, ],
                    [-57, 54, -38, -43, -46, -50, -52, -53, -54, -55, -56, -51, -57, -58, 54, 54, -39, -40, -41, -42,
                     -44, -45, -47, -48, -49, ]), 'OP_less': (
    [26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 63, 64, 70, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, ],
    [-57, 55, -38, -43, -46, -50, -52, -53, -54, -55, -56, -51, -57, -58, 55, 55, -39, -40, -41, -42, -44, -45, -47,
     -48, -49, ]), 'OP_greaterequal': (
    [26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 63, 64, 70, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, ],
    [-57, 56, -38, -43, -46, -50, -52, -53, -54, -55, -56, -51, -57, -58, 56, 56, -39, -40, -41, -42, -44, -45, -47,
     -48, -49, ]), 'OP_lessequal': (
    [26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 63, 64, 70, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, ],
    [-57, 57, -38, -43, -46, -50, -52, -53, -54, -55, -56, -51, -57, -58, 57, 57, -39, -40, -41, -42, -44, -45, -47,
     -48, -49, ]), }

_lr_action = {}
for _k, _v in _lr_action_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_action:  _lr_action[_x] = {}
        _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement_list': ([0, 11, ], [1, 38, ]), 'empty': (
[0, 11, 16, 17, 49, 69, 74, 94, 101, 106, 107, 113, ], [2, 2, 47, 47, 76, 93, 47, 93, 76, 93, 93, 76, ]),
                  'statement': ([1, 38, 48, 98, 104, 111, 116, ], [3, 3, 73, 103, 108, 114, 117, ]),
                  'compound_statement': ([1, 38, 48, 98, 104, 111, 116, ], [4, 4, 4, 4, 4, 4, 4, ]),
                  'declaration_statement': ([1, 38, 48, 98, 104, 111, 116, ], [5, 5, 5, 5, 5, 5, 5, ]),
                  'selection_statement': ([1, 38, 48, 98, 104, 111, 116, ], [6, 6, 6, 6, 6, 6, 6, ]),
                  'iteration_statement': ([1, 38, 48, 98, 104, 111, 116, ], [7, 7, 7, 7, 7, 7, 7, ]),
                  'expression_statement': ([1, 38, 48, 98, 104, 111, 116, ], [8, 8, 8, 8, 8, 8, 8, ]),
                  'print_statement': ([1, 38, 48, 98, 104, 111, 116, ], [9, 9, 9, 9, 9, 9, 9, ]),
                  'type_specifier': ([1, 38, 48, 98, 104, 111, 116, ], [12, 12, 12, 12, 12, 12, 12, ]), 'expression': (
    [1, 14, 38, 42, 48, 50, 72, 98, 100, 104, 111, 116, ], [15, 43, 15, 69, 15, 77, 94, 15, 105, 15, 15, 15, ]),
                  'assignment_expression': ([1, 14, 38, 42, 45, 48, 49, 50, 72, 98, 100, 101, 104, 111, 113, 116, ],
                                            [24, 24, 24, 24, 71, 24, 75, 24, 24, 24, 24, 75, 24, 24, 75, 24, ]),
                  'equality_expression': (
                  [1, 14, 38, 42, 45, 48, 49, 50, 53, 68, 72, 98, 100, 101, 104, 111, 113, 116, ],
                  [25, 25, 25, 25, 25, 25, 25, 25, 80, 91, 25, 25, 25, 25, 25, 25, 25, 25, ]),
                  'relational_expression': (
                  [1, 14, 38, 42, 45, 48, 49, 50, 51, 52, 53, 68, 72, 98, 100, 101, 104, 111, 113, 116, ],
                  [27, 27, 27, 27, 27, 27, 27, 27, 78, 79, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, ]),
                  'additive_expression': (
                  [1, 14, 38, 42, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 68, 72, 98, 100, 101, 104, 111, 113,
                   116, ],
                  [28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 81, 82, 83, 84, 28, 28, 28, 28, 28, 28, 28, 28, 28, ]),
                  'multiplicative_expression': (
                  [1, 14, 38, 42, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 68, 72, 98, 100, 101, 104, 111,
                   113, 116, ],
                  [29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 85, 86, 29, 29, 29, 29, 29, 29, 29, 29,
                   29, ]), 'unary_expression': (
    [1, 14, 38, 42, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 68, 72, 98, 100, 101, 104, 111, 113,
     116, ],
    [31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 87, 88, 89, 31, 31, 31, 31, 31, 31, 31, 31,
     31, ]), 'primary_expression': (
    [1, 14, 30, 38, 42, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 68, 72, 98, 100, 101, 104, 111,
     113, 116, ],
    [32, 32, 63, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
     32, ]), 'id_expression': (
    [1, 14, 30, 38, 42, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 68, 72, 98, 100, 101, 104, 111,
     113, 116, ],
    [37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
     37, ]), 'declaration_list': ([12, 67, ], [39, 90, ]), 'single_var_declation': ([12, 67, ], [40, 40, ]),
                  'label': ([16, 17, 74, ], [46, 48, 96, ]), 'optexpr': ([49, 101, 113, ], [74, 106, 115, ]),
                  'save': ([69, 94, 106, 107, ], [92, 99, 110, 111, ]), }

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_goto: _lr_goto[_x] = {}
        _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
    ("S' -> statement_list", "S'", 1, None, None, None),
    ('statement -> compound_statement', 'statement', 1, 'p_statement', 'phase 5.py', 115),
    ('statement -> declaration_statement', 'statement', 1, 'p_statement', 'phase 5.py', 116),
    ('statement -> selection_statement', 'statement', 1, 'p_statement', 'phase 5.py', 117),
    ('statement -> iteration_statement', 'statement', 1, 'p_statement', 'phase 5.py', 118),
    ('statement -> expression_statement', 'statement', 1, 'p_statement', 'phase 5.py', 119),
    ('statement -> print_statement', 'statement', 1, 'p_statement', 'phase 5.py', 120),
    ('statement -> SEMICOLON', 'statement', 1, 'p_statement', 'phase 5.py', 121),
    (
    'compound_statement -> LBRACE statement_list RBRACE', 'compound_statement', 3, 'p_compound_statement', 'phase 5.py',
    126),
    ('statement_list -> statement_list statement', 'statement_list', 2, 'p_statement_list', 'phase 5.py', 130),
    ('statement_list -> empty', 'statement_list', 1, 'p_statement_list', 'phase 5.py', 131),
    ('declaration_statement -> type_specifier declaration_list SEMICOLON', 'declaration_statement', 3,
     'p_declaration_statement', 'phase 5.py', 135),
    ('type_specifier -> KEY_int', 'type_specifier', 1, 'p_type_specifier', 'phase 5.py', 179),
    ('type_specifier -> KEY_char', 'type_specifier', 1, 'p_type_specifier', 'phase 5.py', 180),
    ('type_specifier -> KEY_float', 'type_specifier', 1, 'p_type_specifier', 'phase 5.py', 181),
    ('type_specifier -> KEY_string', 'type_specifier', 1, 'p_type_specifier', 'phase 5.py', 182),
    ('declaration_list -> single_var_declation COMMA declaration_list', 'declaration_list', 3, 'p_declaration_list',
     'phase 5.py', 187),
    ('declaration_list -> single_var_declation', 'declaration_list', 1, 'p_declaration_list', 'phase 5.py', 188),
    ('single_var_declation -> IDENTIFIER', 'single_var_declation', 1, 'p_single_var_declation', 'phase 5.py', 192),
    ('single_var_declation -> IDENTIFIER OP_assign equality_expression', 'single_var_declation', 3,
     'p_single_var_declation', 'phase 5.py', 193),
    ('print_statement -> KEY_print LPAREN expression RPAREN SEMICOLON', 'print_statement', 5, 'p_print_statement',
     'phase 5.py', 208),
    ('selection_statement -> KEY_if LPAREN expression save RPAREN statement', 'selection_statement', 6,
     'p_selection_statement', 'phase 5.py', 214),
    ('selection_statement -> KEY_if LPAREN expression save RPAREN statement KEY_else save statement',
     'selection_statement', 9, 'p_selection_statement', 'phase 5.py', 215),
    ('iteration_statement -> KEY_while label LPAREN expression save RPAREN statement', 'iteration_statement', 7,
     'p_iteration_statement', 'phase 5.py', 228),
    (
    'iteration_statement -> KEY_do label statement KEY_while LPAREN expression RPAREN SEMICOLON', 'iteration_statement',
    8, 'p_iteration_statement', 'phase 5.py', 229),
    ('iteration_statement -> KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statement',
     'iteration_statement', 11, 'p_iteration_statement', 'phase 5.py', 230),
    ('label -> empty', 'label', 1, 'p_label', 'phase 5.py', 248),
    ('save -> empty', 'save', 1, 'p_save', 'phase 5.py', 252),
    ('optexpr -> assignment_expression', 'optexpr', 1, 'p_optexpr', 'phase 5.py', 257),
    ('optexpr -> empty', 'optexpr', 1, 'p_optexpr', 'phase 5.py', 258),
    ('expression_statement -> expression SEMICOLON', 'expression_statement', 2, 'p_expression_statement', 'phase 5.py',
     263),
    ('expression -> assignment_expression', 'expression', 1, 'p_expression', 'phase 5.py', 268),
    ('expression -> expression COMMA assignment_expression', 'expression', 3, 'p_expression', 'phase 5.py', 269),
    (
    'assignment_expression -> equality_expression', 'assignment_expression', 1, 'p_assignment_expression', 'phase 5.py',
    276),
    ('assignment_expression -> IDENTIFIER OP_assign equality_expression', 'assignment_expression', 3,
     'p_assignment_expression', 'phase 5.py', 277),
    ('equality_expression -> relational_expression', 'equality_expression', 1, 'p_equality_expression', 'phase 5.py',
     305),
    ('equality_expression -> equality_expression OP_equal relational_expression', 'equality_expression', 3,
     'p_equality_expression', 'phase 5.py', 306),
    ('equality_expression -> equality_expression OP_notequal relational_expression', 'equality_expression', 3,
     'p_equality_expression', 'phase 5.py', 307),
    (
    'relational_expression -> additive_expression', 'relational_expression', 1, 'p_relational_expression', 'phase 5.py',
    320),
    ('relational_expression -> relational_expression OP_greater additive_expression', 'relational_expression', 3,
     'p_relational_expression', 'phase 5.py', 321),
    ('relational_expression -> relational_expression OP_less additive_expression', 'relational_expression', 3,
     'p_relational_expression', 'phase 5.py', 322),
    ('relational_expression -> relational_expression OP_greaterequal additive_expression', 'relational_expression', 3,
     'p_relational_expression', 'phase 5.py', 323),
    ('relational_expression -> relational_expression OP_lessequal additive_expression', 'relational_expression', 3,
     'p_relational_expression', 'phase 5.py', 324),
    (
    'additive_expression -> multiplicative_expression', 'additive_expression', 1, 'p_additive_expression', 'phase 5.py',
    342),
    ('additive_expression -> additive_expression OP_add multiplicative_expression', 'additive_expression', 3,
     'p_additive_expression', 'phase 5.py', 343),
    ('additive_expression -> additive_expression OP_subtract multiplicative_expression', 'additive_expression', 3,
     'p_additive_expression', 'phase 5.py', 344),
    ('multiplicative_expression -> unary_expression', 'multiplicative_expression', 1, 'p_multiplicative_expression',
     'phase 5.py', 358),
    ('multiplicative_expression -> multiplicative_expression OP_multiply unary_expression', 'multiplicative_expression',
     3, 'p_multiplicative_expression', 'phase 5.py', 359),
    (
    'multiplicative_expression -> multiplicative_expression OP_divide unary_expression', 'multiplicative_expression', 3,
    'p_multiplicative_expression', 'phase 5.py', 360),
    ('multiplicative_expression -> multiplicative_expression OP_mod unary_expression', 'multiplicative_expression', 3,
     'p_multiplicative_expression', 'phase 5.py', 361),
    ('unary_expression -> primary_expression', 'unary_expression', 1, 'p_unary_expression', 'phase 5.py', 379),
    ('unary_expression -> OP_subtract primary_expression', 'unary_expression', 2, 'p_unary_expression', 'phase 5.py',
     380),
    ('primary_expression -> INTEGER', 'primary_expression', 1, 'p_primary_expression', 'phase 5.py', 388),
    ('primary_expression -> FLOAT', 'primary_expression', 1, 'p_primary_expression', 'phase 5.py', 389),
    ('primary_expression -> CHARACTER', 'primary_expression', 1, 'p_primary_expression', 'phase 5.py', 390),
    ('primary_expression -> STRING', 'primary_expression', 1, 'p_primary_expression', 'phase 5.py', 391),
    ('primary_expression -> id_expression', 'primary_expression', 1, 'p_primary_expression', 'phase 5.py', 392),
    ('id_expression -> IDENTIFIER', 'id_expression', 1, 'p_id_expression', 'phase 5.py', 402),
    ('id_expression -> LPAREN expression RPAREN', 'id_expression', 3, 'p_id_expression', 'phase 5.py', 403),
    ('empty -> <empty>', 'empty', 0, 'p_empty', 'phase 5.py', 415),
]
