# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'statement_listrightOP_negateCHARACTER COMMA FLOAT IDENTIFIER INTEGER KEY_char KEY_do KEY_else KEY_float KEY_for KEY_if KEY_int KEY_print KEY_string KEY_while LBRACE LPAREN OP_add OP_assign OP_divide OP_equal OP_greater OP_greaterequal OP_less OP_lessequal OP_mod OP_multiply OP_negate OP_notequal OP_subtract RBRACE RPAREN SEMICOLON STRINGstatement : compound_statement\n                 | declaration_statement\n                 | selection_statement\n                 | iteration_statement\n                 | expression_statement\n                 | SEMICOLONcompound_statement : LBRACE statement_list RBRACE endstatement_list : statement_list statement\n                      | emptydeclaration_statement : type_specifier declaration_list SEMICOLONtype_specifier : KEY_int\n                      | KEY_char\n                      | KEY_float\n                      | KEY_string\n    declaration_list : single_var_declation COMMA declaration_list\n                        | single_var_declation\n    single_var_declation : IDENTIFIER\n\n    selection_statement : KEY_if LPAREN expression save RPAREN statement\n                           | KEY_if LPAREN expression save RPAREN statement KEY_else save statementiteration_statement : KEY_while label LPAREN expression save RPAREN statement end\n                           | KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statementlabel : emptysave : emptyend : emptyoptexpr : assignment_expression\n               | empty\n    expression_statement : expression SEMICOLONexpression : assignment_expression\n                  | expression COMMA assignment_expression\n    assignment_expression : IDENTIFIER OP_assign INTEGER\n                            | IDENTIFIER OP_multiply INTEGER\n                            | IDENTIFIER OP_divide INTEGER\n                            | IDENTIFIER OP_mod INTEGER\n                            | IDENTIFIER OP_add INTEGER\n                            | IDENTIFIER OP_subtract INTEGER\n                            | IDENTIFIER OP_greater INTEGER\n                            | IDENTIFIER OP_less INTEGER\n                            | IDENTIFIER OP_greaterequal INTEGER\n                            | IDENTIFIER OP_lessequal INTEGER\n                            | IDENTIFIER OP_equal INTEGER\n                            | IDENTIFIER OP_notequal INTEGER\n                            | INTEGER OP_assign INTEGER\n                            | INTEGER OP_multiply INTEGER\n                            | INTEGER OP_divide INTEGER\n                            | INTEGER OP_mod INTEGER\n                            | INTEGER OP_add INTEGER\n                            | INTEGER OP_subtract INTEGER\n                            | INTEGER OP_greater INTEGER\n                            | INTEGER OP_less INTEGER\n                            | INTEGER OP_greaterequal INTEGER\n                            | INTEGER OP_lessequal INTEGER\n                            | INTEGER OP_equal INTEGER\n                            | INTEGER OP_notequal INTEGER\n                            | IDENTIFIER OP_assign IDENTIFIER\n                            | IDENTIFIER OP_multiply IDENTIFIER\n                            | IDENTIFIER OP_divide IDENTIFIER\n                            | IDENTIFIER OP_mod IDENTIFIER\n                            | IDENTIFIER OP_add IDENTIFIER\n                            | IDENTIFIER OP_subtract IDENTIFIER\n                            | IDENTIFIER OP_greater IDENTIFIER\n                            | IDENTIFIER OP_less IDENTIFIER\n                            | IDENTIFIER OP_greaterequal IDENTIFIER\n                            | IDENTIFIER OP_lessequal IDENTIFIER\n                            | IDENTIFIER OP_equal IDENTIFIER\n                            | IDENTIFIER OP_notequal IDENTIFIER\n                            | primary_expression\n                            | OP_subtract primary_expression %prec OP_negate\n                            | primary_expression OP_multiply primary_expression\n                            | primary_expression OP_divide primary_expression\n                            | primary_expression OP_mod primary_expression\n                            | primary_expression OP_add primary_expression\n                            | primary_expression OP_subtract primary_expression\n                            | primary_expression OP_greater primary_expression\n                            | primary_expression OP_less primary_expression\n                            | primary_expression OP_greaterequal primary_expression\n                            | primary_expression OP_lessequal primary_expression\n                            | primary_expression OP_equal primary_expression\n                            | primary_expression OP_notequal primary_expression\n                            | IDENTIFIER OP_assign assignment_expression\n                            | primary_expression OP_lessequal STRING\n\n\n\n\n    primary_expression : INTEGER\n                          | IDENTIFIER\n                          | FLOAT\n                          | CHARACTER\n                          | STRING\n                          | id_expression\n    id_expression : IDENTIFIER\n             | LPAREN expression RPAREN\n    empty :'

_lr_action_items = {'SEMICOLON': (
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 39, 40, 65, 66, 67, 79, 80,
 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
 135, 136, 137, 138, 139, 140, 142, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 159, 160, ],
[-89, 9, -9, -8, -1, -2, -3, -4, -5, -6, -89, 36, -28, -82, -81, -66, -85, -83, -84, -86, 9, 80, -16, -17, -27, -22,
 -89, -67, -81, -82, -89, -10, -88, -29, -89, -25, -26, -54, -30, -79, -55, -31, -56, -32, -57, -33, -58, -34, -59, -35,
 -60, -36, -61, -37, -62, -38, -63, -39, -64, -40, -65, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53,
 -68, -69, -70, -71, -72, -73, -74, -75, -76, -80, -77, -78, -7, -24, -15, -23, 147, 9, -89, -18, 9, -89, -89, -89, 156,
 9, -20, -19, 9, -21, ]), 'LBRACE': (
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 36, 79, 80, 138, 139, 142, 145, 148, 149, 151, 152, 154, 155, 157, 159, 160, ],
[-89, 10, -9, -8, -1, -2, -3, -4, -5, -6, -89, 10, -27, -89, -10, -7, -24, -23, 10, -18, 10, -89, -89, 10, -20, -19, 10,
 -21, ]), 'KEY_if': (
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 36, 79, 80, 138, 139, 142, 145, 148, 149, 151, 152, 154, 155, 157, 159, 160, ],
[-89, 12, -9, -8, -1, -2, -3, -4, -5, -6, -89, 12, -27, -89, -10, -7, -24, -23, 12, -18, 12, -89, -89, 12, -20, -19, 12,
 -21, ]), 'KEY_while': (
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 36, 79, 80, 138, 139, 142, 145, 148, 149, 151, 152, 154, 155, 157, 159, 160, ],
[-89, 15, -9, -8, -1, -2, -3, -4, -5, -6, -89, 15, -27, -89, -10, -7, -24, -23, 15, -18, 15, -89, -89, 15, -20, -19, 15,
 -21, ]), 'KEY_for': (
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 36, 79, 80, 138, 139, 142, 145, 148, 149, 151, 152, 154, 155, 157, 159, 160, ],
[-89, 16, -9, -8, -1, -2, -3, -4, -5, -6, -89, 16, -27, -89, -10, -7, -24, -23, 16, -18, 16, -89, -89, 16, -20, -19, 16,
 -21, ]), 'KEY_int': (
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 36, 79, 80, 138, 139, 142, 145, 148, 149, 151, 152, 154, 155, 157, 159, 160, ],
[-89, 17, -9, -8, -1, -2, -3, -4, -5, -6, -89, 17, -27, -89, -10, -7, -24, -23, 17, -18, 17, -89, -89, 17, -20, -19, 17,
 -21, ]), 'KEY_char': (
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 36, 79, 80, 138, 139, 142, 145, 148, 149, 151, 152, 154, 155, 157, 159, 160, ],
[-89, 18, -9, -8, -1, -2, -3, -4, -5, -6, -89, 18, -27, -89, -10, -7, -24, -23, 18, -18, 18, -89, -89, 18, -20, -19, 18,
 -21, ]), 'KEY_float': (
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 36, 79, 80, 138, 139, 142, 145, 148, 149, 151, 152, 154, 155, 157, 159, 160, ],
[-89, 19, -9, -8, -1, -2, -3, -4, -5, -6, -89, 19, -27, -89, -10, -7, -24, -23, 19, -18, 19, -89, -89, 19, -20, -19, 19,
 -21, ]), 'KEY_string': (
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 36, 79, 80, 138, 139, 142, 145, 148, 149, 151, 152, 154, 155, 157, 159, 160, ],
[-89, 20, -9, -8, -1, -2, -3, -4, -5, -6, -89, 20, -27, -89, -10, -7, -24, -23, 20, -18, 20, -89, -89, 20, -20, -19, 20,
 -21, ]), 'IDENTIFIER': (
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 17, 18, 19, 20, 24, 30, 34, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
 50, 51, 52, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 138, 139, 142, 145, 147, 148, 149, 151, 152,
 154, 155, 156, 157, 159, 160, ],
[-89, 22, -9, -8, -1, -2, -3, -4, -5, -6, -89, 33, 22, -11, -12, -13, -14, 67, 22, 22, -27, 22, 22, 89, 92, 94, 96, 98,
 100, 102, 104, 106, 108, 110, 112, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, -89, -10, 33, 22, -7, -24, -23, 22, 22,
 -18, 22, -89, -89, 22, -20, 22, -19, 22, -21, ]), 'INTEGER': (
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 24, 30, 34, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 85, 138, 139, 142, 145,
 147, 148, 149, 151, 152, 154, 155, 156, 157, 159, 160, ],
[-89, 23, -9, -8, -1, -2, -3, -4, -5, -6, -89, 23, 66, 23, 23, -27, 23, 23, 90, 93, 95, 97, 99, 101, 103, 105, 107, 109,
 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, -89,
 -10, 23, -7, -24, -23, 23, 23, -18, 23, -89, -89, 23, -20, 23, -19, 23, -21, ]), 'OP_subtract': (
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 22, 23, 25, 26, 27, 28, 29, 30, 34, 36, 37, 40, 41, 79, 80, 83, 85, 89, 90, 138,
 139, 142, 145, 147, 148, 149, 151, 152, 154, 155, 156, 157, 159, 160, ],
[-89, 24, -9, -8, -1, -2, -3, -4, -5, -6, -89, 24, 46, 58, 72, -85, -83, -84, -86, 24, 24, -27, 24, 24, 24, -89, -10,
 -88, 24, 46, 58, -7, -24, -23, 24, 24, -18, 24, -89, -89, 24, -20, 24, -19, 24, -21, ]), 'FLOAT': (
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 24, 30, 34, 36, 37, 40, 41, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
 85, 138, 139, 142, 145, 147, 148, 149, 151, 152, 154, 155, 156, 157, 159, 160, ],
[-89, 27, -9, -8, -1, -2, -3, -4, -5, -6, -89, 27, 27, 27, 27, -27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
 27, -89, -10, 27, -7, -24, -23, 27, 27, -18, 27, -89, -89, 27, -20, 27, -19, 27, -21, ]), 'CHARACTER': (
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 24, 30, 34, 36, 37, 40, 41, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
 85, 138, 139, 142, 145, 147, 148, 149, 151, 152, 154, 155, 156, 157, 159, 160, ],
[-89, 28, -9, -8, -1, -2, -3, -4, -5, -6, -89, 28, 28, 28, 28, -27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
 28, -89, -10, 28, -7, -24, -23, 28, 28, -18, 28, -89, -89, 28, -20, 28, -19, 28, -21, ]), 'STRING': (
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 24, 30, 34, 36, 37, 40, 41, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
 85, 138, 139, 142, 145, 147, 148, 149, 151, 152, 154, 155, 156, 157, 159, 160, ],
[-89, 26, -9, -8, -1, -2, -3, -4, -5, -6, -89, 26, 26, 26, 26, -27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 135, 26,
 26, -89, -10, 26, -7, -24, -23, 26, 26, -18, 26, -89, -89, 26, -20, 26, -19, 26, -21, ]), 'LPAREN': (
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 24, 30, 34, 36, 37, 38, 39, 40, 41, 68, 69, 70, 71, 72, 73, 74, 75,
 76, 77, 78, 79, 80, 85, 138, 139, 142, 145, 147, 148, 149, 151, 152, 154, 155, 156, 157, 159, 160, ],
[-89, 13, -9, -8, -1, -2, -3, -4, -5, -6, -89, 34, 13, -89, 40, 13, 13, 13, -27, 13, 85, -22, 13, 13, 13, 13, 13, 13,
 13, 13, 13, 13, 13, 13, 13, -89, -10, 13, -7, -24, -23, 13, 13, -18, 13, -89, -89, 13, -20, 13, -19, 13, -21, ]),
                    '$end': ([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 36, 79, 80, 138, 139, 148, 152, 155, 157, 160, ],
                             [-89, 0, -9, -8, -1, -2, -3, -4, -5, -6, -27, -89, -10, -7, -24, -18, -89, -20, -19,
                              -21, ]), 'RBRACE': (
    [2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 36, 79, 80, 138, 139, 148, 152, 155, 157, 160, ],
    [-9, -8, -1, -2, -3, -4, -5, -6, -89, 79, -27, -89, -10, -7, -24, -18, -89, -20, -19, -21, ]), 'KEY_else': (
    [4, 5, 6, 7, 8, 9, 36, 79, 80, 138, 139, 148, 152, 155, 157, 160, ],
    [-1, -2, -3, -4, -5, -6, -27, -89, -10, -7, -24, 151, -89, -20, -19, -21, ]), 'COMMA': (
    [14, 21, 22, 23, 25, 26, 27, 28, 29, 32, 33, 35, 65, 66, 67, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
     100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
     123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 143, ],
    [37, -28, -82, -81, -66, -85, -83, -84, -86, 81, -17, 37, -67, -81, -82, 37, -88, -29, -54, -30, -79, -55, -31, -56,
     -32, -57, -33, -58, -34, -59, -35, -60, -36, -61, -37, -62, -38, -63, -39, -64, -40, -65, -41, -42, -43, -44, -45,
     -46, -47, -48, -49, -50, -51, -52, -53, -68, -69, -70, -71, -72, -73, -74, -75, -76, -80, -77, -78, 37, ]),
                    'RPAREN': (
                    [21, 22, 23, 25, 26, 27, 28, 29, 35, 65, 66, 67, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
                     97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
                     117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
                     137, 141, 142, 143, 146, 156, 158, ],
                    [-28, -82, -81, -66, -85, -83, -84, -86, 83, -67, -81, -82, -89, -88, -29, -25, -26, -54, -30, -79,
                     -55, -31, -56, -32, -57, -33, -58, -34, -59, -35, -60, -36, -61, -37, -62, -38, -63, -39, -64, -40,
                     -65, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -68, -69, -70, -71, -72, -73,
                     -74, -75, -76, -80, -77, -78, 145, -23, -89, 149, -89, 159, ]),
                    'OP_assign': ([22, 23, 89, 90, ], [41, 53, 41, 53, ]), 'OP_multiply': (
    [22, 23, 25, 26, 27, 28, 29, 83, 89, 90, ], [42, 54, 68, -85, -83, -84, -86, -88, 42, 54, ]), 'OP_divide': (
    [22, 23, 25, 26, 27, 28, 29, 83, 89, 90, ], [43, 55, 69, -85, -83, -84, -86, -88, 43, 55, ]), 'OP_mod': (
    [22, 23, 25, 26, 27, 28, 29, 83, 89, 90, ], [44, 56, 70, -85, -83, -84, -86, -88, 44, 56, ]), 'OP_add': (
    [22, 23, 25, 26, 27, 28, 29, 83, 89, 90, ], [45, 57, 71, -85, -83, -84, -86, -88, 45, 57, ]), 'OP_greater': (
    [22, 23, 25, 26, 27, 28, 29, 83, 89, 90, ], [47, 59, 73, -85, -83, -84, -86, -88, 47, 59, ]), 'OP_less': (
    [22, 23, 25, 26, 27, 28, 29, 83, 89, 90, ], [48, 60, 74, -85, -83, -84, -86, -88, 48, 60, ]), 'OP_greaterequal': (
    [22, 23, 25, 26, 27, 28, 29, 83, 89, 90, ], [49, 61, 75, -85, -83, -84, -86, -88, 49, 61, ]), 'OP_lessequal': (
    [22, 23, 25, 26, 27, 28, 29, 83, 89, 90, ], [50, 62, 76, -85, -83, -84, -86, -88, 50, 62, ]), 'OP_equal': (
    [22, 23, 25, 26, 27, 28, 29, 83, 89, 90, ], [51, 63, 77, -85, -83, -84, -86, -88, 51, 63, ]), 'OP_notequal': (
    [22, 23, 25, 26, 27, 28, 29, 83, 89, 90, ], [52, 64, 78, -85, -83, -84, -86, -88, 52, 64, ]), }

_lr_action = {}
for _k, _v in _lr_action_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_action:  _lr_action[_x] = {}
        _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement_list': ([0, 10, ], [1, 30, ]), 'empty': (
[0, 10, 15, 40, 79, 82, 86, 143, 147, 150, 151, 152, 156, ],
[2, 2, 39, 88, 139, 142, 39, 142, 88, 142, 142, 139, 88, ]),
                  'statement': ([1, 30, 145, 149, 154, 159, ], [3, 3, 148, 152, 157, 160, ]),
                  'compound_statement': ([1, 30, 145, 149, 154, 159, ], [4, 4, 4, 4, 4, 4, ]),
                  'declaration_statement': ([1, 30, 145, 149, 154, 159, ], [5, 5, 5, 5, 5, 5, ]),
                  'selection_statement': ([1, 30, 145, 149, 154, 159, ], [6, 6, 6, 6, 6, 6, ]),
                  'iteration_statement': ([1, 30, 145, 149, 154, 159, ], [7, 7, 7, 7, 7, 7, ]),
                  'expression_statement': ([1, 30, 145, 149, 154, 159, ], [8, 8, 8, 8, 8, 8, ]),
                  'type_specifier': ([1, 30, 145, 149, 154, 159, ], [11, 11, 11, 11, 11, 11, ]),
                  'expression': ([1, 13, 30, 34, 85, 145, 149, 154, 159, ], [14, 35, 14, 82, 143, 14, 14, 14, 14, ]),
                  'assignment_expression': ([1, 13, 30, 34, 37, 40, 41, 85, 145, 147, 149, 154, 156, 159, ],
                                            [21, 21, 21, 21, 84, 87, 91, 21, 21, 87, 21, 21, 87, 21, ]),
                  'primary_expression': (
                  [1, 13, 24, 30, 34, 37, 40, 41, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 85, 145, 147, 149, 154,
                   156, 159, ],
                  [25, 25, 65, 25, 25, 25, 25, 25, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 25, 25, 25,
                   25, 25, 25, 25, ]), 'id_expression': (
    [1, 13, 24, 30, 34, 37, 40, 41, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 85, 145, 147, 149, 154, 156, 159, ],
    [29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, ]),
                  'declaration_list': ([11, 81, ], [31, 140, ]), 'single_var_declation': ([11, 81, ], [32, 32, ]),
                  'label': ([15, 86, ], [38, 144, ]), 'optexpr': ([40, 147, 156, ], [86, 150, 158, ]),
                  'end': ([79, 152, ], [138, 155, ]), 'save': ([82, 143, 150, 151, ], [141, 146, 153, 154, ]), }

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_goto: _lr_goto[_x] = {}
        _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
    ("S' -> statement_list", "S'", 1, None, None, None),
    ('statement -> compound_statement', 'statement', 1, 'p_statement', 'phase 5.py', 117),
    ('statement -> declaration_statement', 'statement', 1, 'p_statement', 'phase 5.py', 118),
    ('statement -> selection_statement', 'statement', 1, 'p_statement', 'phase 5.py', 119),
    ('statement -> iteration_statement', 'statement', 1, 'p_statement', 'phase 5.py', 120),
    ('statement -> expression_statement', 'statement', 1, 'p_statement', 'phase 5.py', 121),
    ('statement -> SEMICOLON', 'statement', 1, 'p_statement', 'phase 5.py', 122),
    ('compound_statement -> LBRACE statement_list RBRACE end', 'compound_statement', 4, 'p_compound_statement',
     'phase 5.py', 127),
    ('statement_list -> statement_list statement', 'statement_list', 2, 'p_statement_list', 'phase 5.py', 134),
    ('statement_list -> empty', 'statement_list', 1, 'p_statement_list', 'phase 5.py', 135),
    ('declaration_statement -> type_specifier declaration_list SEMICOLON', 'declaration_statement', 3,
     'p_declaration_statement', 'phase 5.py', 139),
    ('type_specifier -> KEY_int', 'type_specifier', 1, 'p_type_specifier', 'phase 5.py', 143),
    ('type_specifier -> KEY_char', 'type_specifier', 1, 'p_type_specifier', 'phase 5.py', 144),
    ('type_specifier -> KEY_float', 'type_specifier', 1, 'p_type_specifier', 'phase 5.py', 145),
    ('type_specifier -> KEY_string', 'type_specifier', 1, 'p_type_specifier', 'phase 5.py', 146),
    ('declaration_list -> single_var_declation COMMA declaration_list', 'declaration_list', 3, 'p_declaration_list',
     'phase 5.py', 152),
    ('declaration_list -> single_var_declation', 'declaration_list', 1, 'p_declaration_list', 'phase 5.py', 153),
    ('single_var_declation -> IDENTIFIER', 'single_var_declation', 1, 'p_single_var_declation', 'phase 5.py', 158),
    ('selection_statement -> KEY_if LPAREN expression save RPAREN statement', 'selection_statement', 6,
     'p_selection_statement', 'phase 5.py', 178),
    ('selection_statement -> KEY_if LPAREN expression save RPAREN statement KEY_else save statement',
     'selection_statement', 9, 'p_selection_statement', 'phase 5.py', 179),
    ('iteration_statement -> KEY_while label LPAREN expression save RPAREN statement end', 'iteration_statement', 8,
     'p_iteration_statement', 'phase 5.py', 200),
    ('iteration_statement -> KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statement',
     'iteration_statement', 11, 'p_iteration_statement', 'phase 5.py', 201),
    ('label -> empty', 'label', 1, 'p_label', 'phase 5.py', 228),
    ('save -> empty', 'save', 1, 'p_save', 'phase 5.py', 233),
    ('end -> empty', 'end', 1, 'p_end', 'phase 5.py', 239),
    ('optexpr -> assignment_expression', 'optexpr', 1, 'p_optexpr', 'phase 5.py', 243),
    ('optexpr -> empty', 'optexpr', 1, 'p_optexpr', 'phase 5.py', 244),
    ('expression_statement -> expression SEMICOLON', 'expression_statement', 2, 'p_expression_statement', 'phase 5.py',
     249),
    ('expression -> assignment_expression', 'expression', 1, 'p_expression', 'phase 5.py', 253),
    ('expression -> expression COMMA assignment_expression', 'expression', 3, 'p_expression', 'phase 5.py', 254),
    ('assignment_expression -> IDENTIFIER OP_assign INTEGER', 'assignment_expression', 3, 'p_assignment_expression',
     'phase 5.py', 261),
    ('assignment_expression -> IDENTIFIER OP_multiply INTEGER', 'assignment_expression', 3, 'p_assignment_expression',
     'phase 5.py', 262),
    ('assignment_expression -> IDENTIFIER OP_divide INTEGER', 'assignment_expression', 3, 'p_assignment_expression',
     'phase 5.py', 263),
    ('assignment_expression -> IDENTIFIER OP_mod INTEGER', 'assignment_expression', 3, 'p_assignment_expression',
     'phase 5.py', 264),
    ('assignment_expression -> IDENTIFIER OP_add INTEGER', 'assignment_expression', 3, 'p_assignment_expression',
     'phase 5.py', 265),
    ('assignment_expression -> IDENTIFIER OP_subtract INTEGER', 'assignment_expression', 3, 'p_assignment_expression',
     'phase 5.py', 266),
    ('assignment_expression -> IDENTIFIER OP_greater INTEGER', 'assignment_expression', 3, 'p_assignment_expression',
     'phase 5.py', 267),
    ('assignment_expression -> IDENTIFIER OP_less INTEGER', 'assignment_expression', 3, 'p_assignment_expression',
     'phase 5.py', 268),
    ('assignment_expression -> IDENTIFIER OP_greaterequal INTEGER', 'assignment_expression', 3,
     'p_assignment_expression', 'phase 5.py', 269),
    ('assignment_expression -> IDENTIFIER OP_lessequal INTEGER', 'assignment_expression', 3, 'p_assignment_expression',
     'phase 5.py', 270),
    ('assignment_expression -> IDENTIFIER OP_equal INTEGER', 'assignment_expression', 3, 'p_assignment_expression',
     'phase 5.py', 271),
    ('assignment_expression -> IDENTIFIER OP_notequal INTEGER', 'assignment_expression', 3, 'p_assignment_expression',
     'phase 5.py', 272),
    ('assignment_expression -> INTEGER OP_assign INTEGER', 'assignment_expression', 3, 'p_assignment_expression',
     'phase 5.py', 273),
    ('assignment_expression -> INTEGER OP_multiply INTEGER', 'assignment_expression', 3, 'p_assignment_expression',
     'phase 5.py', 274),
    ('assignment_expression -> INTEGER OP_divide INTEGER', 'assignment_expression', 3, 'p_assignment_expression',
     'phase 5.py', 275),
    ('assignment_expression -> INTEGER OP_mod INTEGER', 'assignment_expression', 3, 'p_assignment_expression',
     'phase 5.py', 276),
    ('assignment_expression -> INTEGER OP_add INTEGER', 'assignment_expression', 3, 'p_assignment_expression',
     'phase 5.py', 277),
    ('assignment_expression -> INTEGER OP_subtract INTEGER', 'assignment_expression', 3, 'p_assignment_expression',
     'phase 5.py', 278),
    ('assignment_expression -> INTEGER OP_greater INTEGER', 'assignment_expression', 3, 'p_assignment_expression',
     'phase 5.py', 279),
    ('assignment_expression -> INTEGER OP_less INTEGER', 'assignment_expression', 3, 'p_assignment_expression',
     'phase 5.py', 280),
    ('assignment_expression -> INTEGER OP_greaterequal INTEGER', 'assignment_expression', 3, 'p_assignment_expression',
     'phase 5.py', 281),
    ('assignment_expression -> INTEGER OP_lessequal INTEGER', 'assignment_expression', 3, 'p_assignment_expression',
     'phase 5.py', 282),
    ('assignment_expression -> INTEGER OP_equal INTEGER', 'assignment_expression', 3, 'p_assignment_expression',
     'phase 5.py', 283),
    ('assignment_expression -> INTEGER OP_notequal INTEGER', 'assignment_expression', 3, 'p_assignment_expression',
     'phase 5.py', 284),
    ('assignment_expression -> IDENTIFIER OP_assign IDENTIFIER', 'assignment_expression', 3, 'p_assignment_expression',
     'phase 5.py', 285),
    (
    'assignment_expression -> IDENTIFIER OP_multiply IDENTIFIER', 'assignment_expression', 3, 'p_assignment_expression',
    'phase 5.py', 286),
    ('assignment_expression -> IDENTIFIER OP_divide IDENTIFIER', 'assignment_expression', 3, 'p_assignment_expression',
     'phase 5.py', 287),
    ('assignment_expression -> IDENTIFIER OP_mod IDENTIFIER', 'assignment_expression', 3, 'p_assignment_expression',
     'phase 5.py', 288),
    ('assignment_expression -> IDENTIFIER OP_add IDENTIFIER', 'assignment_expression', 3, 'p_assignment_expression',
     'phase 5.py', 289),
    (
    'assignment_expression -> IDENTIFIER OP_subtract IDENTIFIER', 'assignment_expression', 3, 'p_assignment_expression',
    'phase 5.py', 290),
    ('assignment_expression -> IDENTIFIER OP_greater IDENTIFIER', 'assignment_expression', 3, 'p_assignment_expression',
     'phase 5.py', 291),
    ('assignment_expression -> IDENTIFIER OP_less IDENTIFIER', 'assignment_expression', 3, 'p_assignment_expression',
     'phase 5.py', 292),
    ('assignment_expression -> IDENTIFIER OP_greaterequal IDENTIFIER', 'assignment_expression', 3,
     'p_assignment_expression', 'phase 5.py', 293),
    ('assignment_expression -> IDENTIFIER OP_lessequal IDENTIFIER', 'assignment_expression', 3,
     'p_assignment_expression', 'phase 5.py', 294),
    ('assignment_expression -> IDENTIFIER OP_equal IDENTIFIER', 'assignment_expression', 3, 'p_assignment_expression',
     'phase 5.py', 295),
    (
    'assignment_expression -> IDENTIFIER OP_notequal IDENTIFIER', 'assignment_expression', 3, 'p_assignment_expression',
    'phase 5.py', 296),
    ('assignment_expression -> primary_expression', 'assignment_expression', 1, 'p_assignment_expression', 'phase 5.py',
     297),
    ('assignment_expression -> OP_subtract primary_expression', 'assignment_expression', 2, 'p_assignment_expression',
     'phase 5.py', 298),
    ('assignment_expression -> primary_expression OP_multiply primary_expression', 'assignment_expression', 3,
     'p_assignment_expression', 'phase 5.py', 299),
    ('assignment_expression -> primary_expression OP_divide primary_expression', 'assignment_expression', 3,
     'p_assignment_expression', 'phase 5.py', 300),
    ('assignment_expression -> primary_expression OP_mod primary_expression', 'assignment_expression', 3,
     'p_assignment_expression', 'phase 5.py', 301),
    ('assignment_expression -> primary_expression OP_add primary_expression', 'assignment_expression', 3,
     'p_assignment_expression', 'phase 5.py', 302),
    ('assignment_expression -> primary_expression OP_subtract primary_expression', 'assignment_expression', 3,
     'p_assignment_expression', 'phase 5.py', 303),
    ('assignment_expression -> primary_expression OP_greater primary_expression', 'assignment_expression', 3,
     'p_assignment_expression', 'phase 5.py', 304),
    ('assignment_expression -> primary_expression OP_less primary_expression', 'assignment_expression', 3,
     'p_assignment_expression', 'phase 5.py', 305),
    ('assignment_expression -> primary_expression OP_greaterequal primary_expression', 'assignment_expression', 3,
     'p_assignment_expression', 'phase 5.py', 306),
    ('assignment_expression -> primary_expression OP_lessequal primary_expression', 'assignment_expression', 3,
     'p_assignment_expression', 'phase 5.py', 307),
    ('assignment_expression -> primary_expression OP_equal primary_expression', 'assignment_expression', 3,
     'p_assignment_expression', 'phase 5.py', 308),
    ('assignment_expression -> primary_expression OP_notequal primary_expression', 'assignment_expression', 3,
     'p_assignment_expression', 'phase 5.py', 309),
    ('assignment_expression -> IDENTIFIER OP_assign assignment_expression', 'assignment_expression', 3,
     'p_assignment_expression', 'phase 5.py', 310),
    ('assignment_expression -> primary_expression OP_lessequal STRING', 'assignment_expression', 3,
     'p_assignment_expression', 'phase 5.py', 311),
    ('primary_expression -> INTEGER', 'primary_expression', 1, 'p_primary_expression', 'phase 5.py', 559),
    ('primary_expression -> IDENTIFIER', 'primary_expression', 1, 'p_primary_expression', 'phase 5.py', 560),
    ('primary_expression -> FLOAT', 'primary_expression', 1, 'p_primary_expression', 'phase 5.py', 561),
    ('primary_expression -> CHARACTER', 'primary_expression', 1, 'p_primary_expression', 'phase 5.py', 562),
    ('primary_expression -> STRING', 'primary_expression', 1, 'p_primary_expression', 'phase 5.py', 563),
    ('primary_expression -> id_expression', 'primary_expression', 1, 'p_primary_expression', 'phase 5.py', 564),
    ('id_expression -> IDENTIFIER', 'id_expression', 1, 'p_id_expression', 'phase 5.py', 573),
    ('id_expression -> LPAREN expression RPAREN', 'id_expression', 3, 'p_id_expression', 'phase 5.py', 574),
    ('empty -> <empty>', 'empty', 0, 'p_empty', 'phase 5.py', 587),
]
