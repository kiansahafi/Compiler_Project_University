# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOOLEAN CHAR CLASS COMMA DIVIDE DO ELSE EQ FALSE FOR GE GT IDENTIFIER IF INT LBRACE LBRACKET LE LPAREN LT MAIN MINUS NEW NOT NOT_EQ NUMBER PLUS PLUSASSIGN PRIVATE PUBLIC RBRACE RBRACKET RETURN RPAREN SEMICOLON STATIC THIS TIMES TRUE VOID WHILEstart : ClassDeclaration\n            | empty\n            | exp\n            | ClassDeclaration ClassDeclaration ClassDeclaration : CLASS IDENTIFIER LBRACE RBRACE\n            | CLASS IDENTIFIER LBRACE MethodDeclaration RBRACE\n            | CLASS IDENTIFIER LBRACE FieldDeclaration RBRACEFieldDeclaration : Declarators IDENTIFIER SEMICOLONMethodDeclaration : Declarators IDENTIFIER LPAREN RPAREN LBRACE statement RBRACE\n        | Declarators IDENTIFIER LPAREN RPAREN LBRACE statement RETURN exp SEMICOLON RBRACE\n        | Declarators IDENTIFIER LPAREN ParameterList RPAREN LBRACE statement RETURN exp SEMICOLON RBRACE\n        | Declarators IDENTIFIER LPAREN ParameterList RPAREN LBRACE statement RBRACE ParameterList : Type IDENTIFIER\n    | Type IDENTIFIER COMMA Type IDENTIFIERDeclarators : Type\n    | STATIC Type\n    | PUBLIC Type\n    | PRIVATE Type\n    | PUBLIC STATIC Type\n    | PRIVATE STATIC TypeType : PrimeType\n    | ClassType\n    | arraytype PrimeType : INT\n    | BOOLEAN\n    | VOID ClassType : IDENTIFIER  arraytype : INT LBRACKET RBRACKET\n    | ClassType LBRACKET RBRACKET  argumentlist : exp\n    | exp COMMA exp Refrence : THIS\n    | IDENTIFIER statement : if_st\n                | while_st\n                | LBRACE statement RBRACE\n                | Refrence LPAREN argumentlist RPAREN SEMICOLON\n                | Refrence LPAREN RPAREN SEMICOLON\n                | Refrence LBRACKET exp RBRACKET ASSIGN exp SEMICOLON\n                | Refrence ASSIGN exp SEMICOLON\n                | Type IDENTIFIER ASSIGN exp SEMICOLON\n                | empty\n                | statement statement while_st : WHILE LPAREN exp RPAREN statementif_st : IF LPAREN exp RPAREN statement\n    | IF LPAREN exp RPAREN statement ELSE statementexp : Refrence\n    | Type exp\n    | Refrence LBRACKET exp RBRACKET\n    | Refrence LPAREN RPAREN\n    | Refrence LPAREN argumentlist RPAREN\n    | Unop exp\n    | exp Binop exp\n    | LPAREN exp RPAREN\n    | NUMBER\n    | TRUE\n    | IDENTIFIER Binop NUMBER\n    | FALSE\n    | NEW IDENTIFIER LPAREN RPAREN\n    | NEW INT LBRACKET exp RBRACKET\n    | NEW IDENTIFIER LBRACKET exp RBRACKET\n     Unop : NOT\n    | MINUSBinop : PLUS\n    | MINUS\n    | TIMES\n    | DIVIDE\n    | EQ\n    | NOT_EQ\n    | LT\n    | GT\n    | LE\n    | GE\n    | AND\n    | NOT\n    empty : '

_lr_action_items = {'CLASS': ([0, 2, 63, 77, 78, ], [5, 5, -5, -6, -7, ]), '$end': (
[0, 1, 2, 3, 4, 6, 7, 11, 12, 13, 16, 24, 42, 44, 49, 51, 53, 56, 63, 71, 72, 74, 77, 78, 86, 87, ],
[-76, 0, -1, -2, -3, -33, -47, -55, -56, -58, -32, -4, -48, -52, -53, -57, -50, -54, -5, -49, -51, -59, -6, -7, -61,
 -60, ]), 'LPAREN': (
[0, 6, 7, 8, 9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 45,
 58, 59, 60, 61, 73, 79, 98, 103, 106, 107, 113, 114, 115, 116, 118, 119, 128, 131, 145, ],
[9, -27, 41, 9, 9, 9, -24, -32, -21, -22, -23, -62, -63, -25, -26, 9, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73,
 -74, -75, 9, 9, 57, 9, 9, -28, -29, 9, 88, -33, 114, 118, 119, 9, 9, 9, 9, 9, 9, 9, 9, 9, ]), 'NUMBER': (
[0, 6, 8, 9, 10, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 58, 59,
 60, 61, 73, 113, 114, 115, 116, 118, 119, 128, 131, 145, ],
[11, -27, 11, 11, 11, -24, -21, -22, -23, -62, -63, -25, -26, 11, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74,
 -75, 51, 11, 11, 11, 11, -28, -29, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, ]), 'TRUE': (
[0, 6, 8, 9, 10, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 58, 59, 60,
 61, 73, 113, 114, 115, 116, 118, 119, 128, 131, 145, ],
[12, -27, 12, 12, 12, -24, -21, -22, -23, -62, -63, -25, -26, 12, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74,
 -75, 12, 12, 12, 12, -28, -29, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, ]), 'IDENTIFIER': (
[0, 5, 6, 8, 9, 10, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 50,
 58, 59, 60, 61, 62, 66, 67, 68, 69, 70, 73, 80, 81, 82, 83, 84, 88, 90, 91, 94, 95, 98, 99, 100, 101, 102, 104, 105,
 108, 109, 110, 111, 113, 114, 115, 116, 118, 119, 120, 121, 122, 128, 131, 136, 138, 140, 141, 144, 145, 146, 147, 148,
 151, 153, 154, ],
[6, 38, -27, 6, 6, 6, 45, -24, -21, -22, -23, -62, -63, -25, -26, 6, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73,
 -74, -75, 6, 6, 62, 6, 6, -28, -29, -27, 79, -15, 62, 62, 62, 6, -16, -17, 62, -18, 62, 62, -19, -20, 97, 98, -27, 98,
 98, -34, -35, 117, -42, 98, 62, 98, 98, 6, 6, 6, 6, 6, 6, 98, 133, -36, 6, 6, -38, -40, 98, 98, -37, 6, -41, 98, 98,
 98, -39, 98, ]), 'FALSE': (
[0, 6, 8, 9, 10, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 58, 59, 60,
 61, 73, 113, 114, 115, 116, 118, 119, 128, 131, 145, ],
[13, -27, 13, 13, 13, -24, -21, -22, -23, -62, -63, -25, -26, 13, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74,
 -75, 13, 13, 13, 13, -28, -29, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, ]), 'NEW': (
[0, 6, 8, 9, 10, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 58, 59, 60,
 61, 73, 113, 114, 115, 116, 118, 119, 128, 131, 145, ],
[14, -27, 14, 14, 14, -24, -21, -22, -23, -62, -63, -25, -26, 14, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74,
 -75, 14, 14, 14, 14, -28, -29, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, ]), 'THIS': (
[0, 6, 8, 9, 10, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 58, 59, 60,
 61, 73, 95, 99, 100, 101, 102, 105, 108, 110, 111, 113, 114, 115, 116, 118, 119, 120, 122, 128, 131, 136, 138, 140,
 141, 144, 145, 146, 147, 148, 151, 153, 154, ],
[16, -27, 16, 16, 16, -24, -21, -22, -23, -62, -63, -25, -26, 16, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74,
 -75, 16, 16, 16, 16, -28, -29, 16, 16, 16, 16, -34, -35, -42, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, -36, 16, 16, -38,
 -40, 16, 16, -37, 16, -41, 16, 16, 16, -39, 16, ]), 'NOT': (
[0, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
 37, 40, 41, 42, 43, 44, 49, 51, 52, 53, 55, 56, 58, 59, 60, 61, 71, 72, 73, 74, 75, 76, 85, 86, 87, 113, 114, 115, 116,
 118, 119, 123, 126, 127, 128, 129, 130, 131, 139, 142, 145, 150, ],
[20, 37, 37, -47, 20, 20, 20, -55, -56, -58, -24, -32, -21, -22, -23, -62, -63, -25, -26, 20, -64, -65, -66, -67, -68,
 -69, -70, -71, -72, -73, -74, -75, 20, 20, 37, 37, 37, 37, -57, 37, -50, 37, -54, 20, 20, -28, -29, -49, -51, 20, -59,
 37, 37, 37, -61, -60, 20, 20, 20, 20, 20, 20, 37, 37, 37, 20, 37, 37, 20, 37, 37, 20, 37, ]), 'MINUS': (
[0, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
 37, 40, 41, 42, 43, 44, 49, 51, 52, 53, 55, 56, 58, 59, 60, 61, 71, 72, 73, 74, 75, 76, 85, 86, 87, 113, 114, 115, 116,
 118, 119, 123, 126, 127, 128, 129, 130, 131, 139, 142, 145, 150, ],
[21, 27, 27, -47, 21, 21, 21, -55, -56, -58, -24, -32, -21, -22, -23, -62, -63, -25, -26, 21, -64, -65, -66, -67, -68,
 -69, -70, -71, -72, -73, -74, -75, 21, 21, 27, 27, 27, 27, -57, 27, -50, 27, -54, 21, 21, -28, -29, -49, -51, 21, -59,
 27, 27, 27, -61, -60, 21, 21, 21, 21, 21, 21, 27, 27, 27, 21, 27, 27, 21, 27, 27, 21, 27, ]), 'INT': (
[0, 6, 8, 9, 10, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 50, 58,
 59, 60, 61, 68, 69, 70, 73, 82, 84, 88, 95, 99, 100, 101, 102, 105, 108, 109, 110, 111, 113, 114, 115, 116, 118, 119,
 120, 122, 128, 131, 136, 138, 140, 141, 144, 145, 146, 147, 148, 151, 153, 154, ],
[15, -27, 15, 15, 15, 46, -24, -21, -22, -23, -62, -63, -25, -26, 15, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73,
 -74, -75, 15, 15, 15, 15, 15, -28, -29, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, -34, -35, -42, 15, 15, 15, 15, 15, 15,
 15, 15, 15, 15, 15, -36, 15, 15, -38, -40, 15, 15, -37, 15, -41, 15, 15, 15, -39, 15, ]), 'BOOLEAN': (
[0, 6, 8, 9, 10, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 50, 58, 59,
 60, 61, 68, 69, 70, 73, 82, 84, 88, 95, 99, 100, 101, 102, 105, 108, 109, 110, 111, 113, 114, 115, 116, 118, 119, 120,
 122, 128, 131, 136, 138, 140, 141, 144, 145, 146, 147, 148, 151, 153, 154, ],
[22, -27, 22, 22, 22, -24, -21, -22, -23, -62, -63, -25, -26, 22, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74,
 -75, 22, 22, 22, 22, 22, -28, -29, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, -34, -35, -42, 22, 22, 22, 22, 22, 22, 22,
 22, 22, 22, 22, -36, 22, 22, -38, -40, 22, 22, -37, 22, -41, 22, 22, 22, -39, 22, ]), 'VOID': (
[0, 6, 8, 9, 10, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 50, 58, 59,
 60, 61, 68, 69, 70, 73, 82, 84, 88, 95, 99, 100, 101, 102, 105, 108, 109, 110, 111, 113, 114, 115, 116, 118, 119, 120,
 122, 128, 131, 136, 138, 140, 141, 144, 145, 146, 147, 148, 151, 153, 154, ],
[23, -27, 23, 23, 23, -24, -21, -22, -23, -62, -63, -25, -26, 23, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74,
 -75, 23, 23, 23, 23, 23, -28, -29, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, -34, -35, -42, 23, 23, 23, 23, 23, 23, 23,
 23, 23, 23, 23, -36, 23, 23, -38, -40, 23, 23, -37, 23, -41, 23, 23, 23, -39, 23, ]), 'PLUS': (
[4, 6, 7, 11, 12, 13, 16, 42, 43, 44, 49, 51, 52, 53, 55, 56, 71, 72, 74, 75, 76, 85, 86, 87, 123, 126, 127, 129, 130,
 139, 142, 150, ],
[26, 26, -47, -55, -56, -58, -32, 26, 26, 26, 26, -57, 26, -50, 26, -54, -49, -51, -59, 26, 26, 26, -61, -60, 26, 26,
 26, 26, 26, 26, 26, 26, ]), 'TIMES': (
[4, 6, 7, 11, 12, 13, 16, 42, 43, 44, 49, 51, 52, 53, 55, 56, 71, 72, 74, 75, 76, 85, 86, 87, 123, 126, 127, 129, 130,
 139, 142, 150, ],
[28, 28, -47, -55, -56, -58, -32, 28, 28, 28, 28, -57, 28, -50, 28, -54, -49, -51, -59, 28, 28, 28, -61, -60, 28, 28,
 28, 28, 28, 28, 28, 28, ]), 'DIVIDE': (
[4, 6, 7, 11, 12, 13, 16, 42, 43, 44, 49, 51, 52, 53, 55, 56, 71, 72, 74, 75, 76, 85, 86, 87, 123, 126, 127, 129, 130,
 139, 142, 150, ],
[29, 29, -47, -55, -56, -58, -32, 29, 29, 29, 29, -57, 29, -50, 29, -54, -49, -51, -59, 29, 29, 29, -61, -60, 29, 29,
 29, 29, 29, 29, 29, 29, ]), 'EQ': (
[4, 6, 7, 11, 12, 13, 16, 42, 43, 44, 49, 51, 52, 53, 55, 56, 71, 72, 74, 75, 76, 85, 86, 87, 123, 126, 127, 129, 130,
 139, 142, 150, ],
[30, 30, -47, -55, -56, -58, -32, 30, 30, 30, 30, -57, 30, -50, 30, -54, -49, -51, -59, 30, 30, 30, -61, -60, 30, 30,
 30, 30, 30, 30, 30, 30, ]), 'NOT_EQ': (
[4, 6, 7, 11, 12, 13, 16, 42, 43, 44, 49, 51, 52, 53, 55, 56, 71, 72, 74, 75, 76, 85, 86, 87, 123, 126, 127, 129, 130,
 139, 142, 150, ],
[31, 31, -47, -55, -56, -58, -32, 31, 31, 31, 31, -57, 31, -50, 31, -54, -49, -51, -59, 31, 31, 31, -61, -60, 31, 31,
 31, 31, 31, 31, 31, 31, ]), 'LT': (
[4, 6, 7, 11, 12, 13, 16, 42, 43, 44, 49, 51, 52, 53, 55, 56, 71, 72, 74, 75, 76, 85, 86, 87, 123, 126, 127, 129, 130,
 139, 142, 150, ],
[32, 32, -47, -55, -56, -58, -32, 32, 32, 32, 32, -57, 32, -50, 32, -54, -49, -51, -59, 32, 32, 32, -61, -60, 32, 32,
 32, 32, 32, 32, 32, 32, ]), 'GT': (
[4, 6, 7, 11, 12, 13, 16, 42, 43, 44, 49, 51, 52, 53, 55, 56, 71, 72, 74, 75, 76, 85, 86, 87, 123, 126, 127, 129, 130,
 139, 142, 150, ],
[33, 33, -47, -55, -56, -58, -32, 33, 33, 33, 33, -57, 33, -50, 33, -54, -49, -51, -59, 33, 33, 33, -61, -60, 33, 33,
 33, 33, 33, 33, 33, 33, ]), 'LE': (
[4, 6, 7, 11, 12, 13, 16, 42, 43, 44, 49, 51, 52, 53, 55, 56, 71, 72, 74, 75, 76, 85, 86, 87, 123, 126, 127, 129, 130,
 139, 142, 150, ],
[34, 34, -47, -55, -56, -58, -32, 34, 34, 34, 34, -57, 34, -50, 34, -54, -49, -51, -59, 34, 34, 34, -61, -60, 34, 34,
 34, 34, 34, 34, 34, 34, ]), 'GE': (
[4, 6, 7, 11, 12, 13, 16, 42, 43, 44, 49, 51, 52, 53, 55, 56, 71, 72, 74, 75, 76, 85, 86, 87, 123, 126, 127, 129, 130,
 139, 142, 150, ],
[35, 35, -47, -55, -56, -58, -32, 35, 35, 35, 35, -57, 35, -50, 35, -54, -49, -51, -59, 35, 35, 35, -61, -60, 35, 35,
 35, 35, 35, 35, 35, 35, ]), 'AND': (
[4, 6, 7, 11, 12, 13, 16, 42, 43, 44, 49, 51, 52, 53, 55, 56, 71, 72, 74, 75, 76, 85, 86, 87, 123, 126, 127, 129, 130,
 139, 142, 150, ],
[36, 36, -47, -55, -56, -58, -32, 36, 36, 36, 36, -57, 36, -50, 36, -54, -49, -51, -59, 36, 36, 36, -61, -60, 36, 36,
 36, 36, 36, 36, 36, 36, ]), 'LBRACKET': (
[6, 7, 15, 16, 18, 45, 46, 62, 98, 103, ], [-27, 40, 47, -32, 48, 58, 59, -27, -27, 115, ]), 'RPAREN': (
[6, 7, 11, 12, 13, 16, 41, 42, 43, 44, 49, 51, 53, 54, 55, 56, 57, 71, 72, 74, 85, 86, 87, 88, 93, 97, 114, 124, 129,
 130, 133, ],
[-33, -47, -55, -56, -58, -32, 53, -48, 56, -52, -53, -57, -50, 72, -30, -54, 74, -49, -51, -59, -31, -61, -60, 92, 96,
 -13, 125, 135, 140, 141, -14, ]), 'RBRACKET': (
[6, 7, 11, 12, 13, 16, 42, 44, 47, 48, 49, 51, 52, 53, 56, 71, 72, 74, 75, 76, 86, 87, 126, ],
[-33, -47, -55, -56, -58, -32, -48, -52, 60, 61, -53, -57, 71, -50, -54, -49, -51, -59, 86, 87, -61, -60, 137, ]),
                    'COMMA': ([6, 7, 11, 12, 13, 16, 42, 44, 49, 51, 53, 55, 56, 71, 72, 74, 86, 87, 97, ],
                              [-33, -47, -55, -56, -58, -32, -48, -52, -53, -57, -50, 73, -54, -49, -51, -59, -61, -60,
                               109, ]), 'SEMICOLON': (
    [6, 7, 11, 12, 13, 16, 42, 44, 49, 51, 53, 56, 71, 72, 74, 79, 86, 87, 123, 125, 127, 135, 139, 142, 150, ],
    [-33, -47, -55, -56, -58, -32, -48, -52, -53, -57, -50, -54, -49, -51, -59, 89, -61, -60, 134, 136, 138, 144, 146,
     149, 153, ]), 'ASSIGN': ([16, 98, 103, 117, 137, ], [-32, -33, 116, 128, 145, ]), 'LBRACE': (
    [38, 92, 95, 96, 99, 100, 101, 102, 105, 108, 110, 111, 120, 122, 136, 138, 140, 141, 144, 146, 147, 148, 151, 153,
     154, ],
    [50, 95, 99, 108, 99, 99, -34, -35, -42, 99, 99, 99, 99, -36, -38, -40, 99, 99, -37, -41, 99, 99, 99, -39, 99, ]),
                    'RBRACE': (
                    [50, 64, 65, 89, 95, 99, 100, 101, 102, 105, 108, 110, 111, 112, 120, 122, 132, 134, 136, 138, 140,
                     141, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, ],
                    [63, 77, 78, -8, -76, -76, 112, -34, -35, -42, -76, 122, -43, -9, 132, -36, -12, 143, -38, -40, -76,
                     -76, -10, -37, -41, -45, -44, 152, -76, -11, -39, -46, ]),
                    'STATIC': ([50, 69, 70, ], [68, 82, 84, ]), 'PUBLIC': ([50, ], [69, ]), 'PRIVATE': ([50, ], [70, ]),
                    'IF': (
                    [95, 99, 100, 101, 102, 105, 108, 110, 111, 120, 122, 136, 138, 140, 141, 144, 146, 147, 148, 151,
                     153, 154, ],
                    [106, 106, 106, -34, -35, -42, 106, 106, 106, 106, -36, -38, -40, 106, 106, -37, -41, 106, 106, 106,
                     -39, 106, ]), 'WHILE': (
    [95, 99, 100, 101, 102, 105, 108, 110, 111, 120, 122, 136, 138, 140, 141, 144, 146, 147, 148, 151, 153, 154, ],
    [107, 107, 107, -34, -35, -42, 107, 107, 107, 107, -36, -38, -40, 107, 107, -37, -41, 107, 107, 107, -39, 107, ]),
                    'RETURN': (
                    [95, 100, 101, 102, 105, 108, 111, 120, 122, 136, 138, 140, 141, 144, 146, 147, 148, 151, 153,
                     154, ],
                    [-76, 113, -34, -35, -42, -76, -43, 131, -36, -38, -40, -76, -76, -37, -41, -45, -44, -76, -39,
                     -46, ]), 'ELSE': (
    [101, 102, 105, 111, 122, 136, 138, 140, 141, 144, 146, 147, 148, 151, 153, 154, ],
    [-34, -35, -42, -43, -36, -38, -40, -76, -76, -37, -41, 151, -44, -76, -39, -46, ]), }

_lr_action = {}
for _k, _v in _lr_action_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_action:  _lr_action[_x] = {}
        _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start': ([0, ], [1, ]), 'ClassDeclaration': ([0, 2, ], [2, 24, ]), 'empty': (
[0, 95, 99, 100, 108, 110, 111, 120, 140, 141, 147, 148, 151, 154, ],
[3, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, ]), 'exp': (
[0, 8, 9, 10, 25, 40, 41, 58, 59, 73, 113, 114, 115, 116, 118, 119, 128, 131, 145, ],
[4, 42, 43, 44, 49, 52, 55, 75, 76, 85, 123, 55, 126, 127, 129, 130, 139, 142, 150, ]), 'Refrence': (
[0, 8, 9, 10, 25, 40, 41, 58, 59, 73, 95, 99, 100, 108, 110, 111, 113, 114, 115, 116, 118, 119, 120, 128, 131, 140, 141,
 145, 147, 148, 151, 154, ],
[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 103, 103, 103, 103, 103, 103, 7, 7, 7, 7, 7, 7, 103, 7, 7, 103, 103, 7, 103, 103, 103,
 103, ]), 'Type': (
[0, 8, 9, 10, 25, 40, 41, 50, 58, 59, 68, 69, 70, 73, 82, 84, 88, 95, 99, 100, 108, 109, 110, 111, 113, 114, 115, 116,
 118, 119, 120, 128, 131, 140, 141, 145, 147, 148, 151, 154, ],
[8, 8, 8, 8, 8, 8, 8, 67, 8, 8, 80, 81, 83, 8, 90, 91, 94, 104, 104, 104, 104, 121, 104, 104, 8, 8, 8, 8, 8, 8, 104, 8,
 8, 104, 104, 8, 104, 104, 104, 104, ]), 'Unop': (
[0, 8, 9, 10, 25, 40, 41, 58, 59, 73, 113, 114, 115, 116, 118, 119, 128, 131, 145, ],
[10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, ]), 'PrimeType': (
[0, 8, 9, 10, 25, 40, 41, 50, 58, 59, 68, 69, 70, 73, 82, 84, 88, 95, 99, 100, 108, 109, 110, 111, 113, 114, 115, 116,
 118, 119, 120, 128, 131, 140, 141, 145, 147, 148, 151, 154, ],
[17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, ]), 'ClassType': (
[0, 8, 9, 10, 25, 40, 41, 50, 58, 59, 68, 69, 70, 73, 82, 84, 88, 95, 99, 100, 108, 109, 110, 111, 113, 114, 115, 116,
 118, 119, 120, 128, 131, 140, 141, 145, 147, 148, 151, 154, ],
[18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, ]), 'arraytype': (
[0, 8, 9, 10, 25, 40, 41, 50, 58, 59, 68, 69, 70, 73, 82, 84, 88, 95, 99, 100, 108, 109, 110, 111, 113, 114, 115, 116,
 118, 119, 120, 128, 131, 140, 141, 145, 147, 148, 151, 154, ],
[19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, ]), 'Binop': (
[4, 6, 42, 43, 44, 49, 52, 55, 75, 76, 85, 123, 126, 127, 129, 130, 139, 142, 150, ],
[25, 39, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, ]),
                  'argumentlist': ([41, 114, ], [54, 124, ]), 'MethodDeclaration': ([50, ], [64, ]),
                  'FieldDeclaration': ([50, ], [65, ]), 'Declarators': ([50, ], [66, ]),
                  'ParameterList': ([88, ], [93, ]), 'statement': (
    [95, 99, 100, 108, 110, 111, 120, 140, 141, 147, 148, 151, 154, ],
    [100, 110, 111, 120, 111, 111, 111, 147, 148, 111, 111, 154, 111, ]), 'if_st': (
    [95, 99, 100, 108, 110, 111, 120, 140, 141, 147, 148, 151, 154, ],
    [101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, ]), 'while_st': (
    [95, 99, 100, 108, 110, 111, 120, 140, 141, 147, 148, 151, 154, ],
    [102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, ]), }

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_goto: _lr_goto[_x] = {}
        _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
    ("S' -> start", "S'", 1, None, None, None),
    ('start -> ClassDeclaration', 'start', 1, 'p_s', 'parser.py', 11),
    ('start -> empty', 'start', 1, 'p_s', 'parser.py', 12),
    ('start -> exp', 'start', 1, 'p_s', 'parser.py', 13),
    ('start -> ClassDeclaration ClassDeclaration', 'start', 2, 'p_s', 'parser.py', 14),
    (
    'ClassDeclaration -> CLASS IDENTIFIER LBRACE RBRACE', 'ClassDeclaration', 4, 'p_ClassDeclaration', 'parser.py', 18),
    (
    'ClassDeclaration -> CLASS IDENTIFIER LBRACE MethodDeclaration RBRACE', 'ClassDeclaration', 5, 'p_ClassDeclaration',
    'parser.py', 19),
    ('ClassDeclaration -> CLASS IDENTIFIER LBRACE FieldDeclaration RBRACE', 'ClassDeclaration', 5, 'p_ClassDeclaration',
     'parser.py', 20),
    ('FieldDeclaration -> Declarators IDENTIFIER SEMICOLON', 'FieldDeclaration', 3, 'p_FieldDeclaration', 'parser.py',
     25),
    ('MethodDeclaration -> Declarators IDENTIFIER LPAREN RPAREN LBRACE statement RBRACE', 'MethodDeclaration', 7,
     'p_MethodDeclaration', 'parser.py', 30),
    ('MethodDeclaration -> Declarators IDENTIFIER LPAREN RPAREN LBRACE statement RETURN exp SEMICOLON RBRACE',
     'MethodDeclaration', 10, 'p_MethodDeclaration', 'parser.py', 31),
    (
    'MethodDeclaration -> Declarators IDENTIFIER LPAREN ParameterList RPAREN LBRACE statement RETURN exp SEMICOLON RBRACE',
    'MethodDeclaration', 11, 'p_MethodDeclaration', 'parser.py', 32),
    ('MethodDeclaration -> Declarators IDENTIFIER LPAREN ParameterList RPAREN LBRACE statement RBRACE',
     'MethodDeclaration', 8, 'p_MethodDeclaration', 'parser.py', 33),
    ('ParameterList -> Type IDENTIFIER', 'ParameterList', 2, 'p_ParameterList', 'parser.py', 37),
    ('ParameterList -> Type IDENTIFIER COMMA Type IDENTIFIER', 'ParameterList', 5, 'p_ParameterList', 'parser.py', 38),
    ('Declarators -> Type', 'Declarators', 1, 'p_Declarators', 'parser.py', 42),
    ('Declarators -> STATIC Type', 'Declarators', 2, 'p_Declarators', 'parser.py', 43),
    ('Declarators -> PUBLIC Type', 'Declarators', 2, 'p_Declarators', 'parser.py', 44),
    ('Declarators -> PRIVATE Type', 'Declarators', 2, 'p_Declarators', 'parser.py', 45),
    ('Declarators -> PUBLIC STATIC Type', 'Declarators', 3, 'p_Declarators', 'parser.py', 46),
    ('Declarators -> PRIVATE STATIC Type', 'Declarators', 3, 'p_Declarators', 'parser.py', 47),
    ('Type -> PrimeType', 'Type', 1, 'p_type', 'parser.py', 52),
    ('Type -> ClassType', 'Type', 1, 'p_type', 'parser.py', 53),
    ('Type -> arraytype', 'Type', 1, 'p_type', 'parser.py', 54),
    ('PrimeType -> INT', 'PrimeType', 1, 'p_primtype', 'parser.py', 59),
    ('PrimeType -> BOOLEAN', 'PrimeType', 1, 'p_primtype', 'parser.py', 60),
    ('PrimeType -> VOID', 'PrimeType', 1, 'p_primtype', 'parser.py', 61),
    ('ClassType -> IDENTIFIER', 'ClassType', 1, 'p_classtype', 'parser.py', 66),
    ('arraytype -> INT LBRACKET RBRACKET', 'arraytype', 3, 'p_arraytype', 'parser.py', 71),
    ('arraytype -> ClassType LBRACKET RBRACKET', 'arraytype', 3, 'p_arraytype', 'parser.py', 72),
    ('argumentlist -> exp', 'argumentlist', 1, 'p_argumentlist', 'parser.py', 82),
    ('argumentlist -> exp COMMA exp', 'argumentlist', 3, 'p_argumentlist', 'parser.py', 83),
    ('Refrence -> THIS', 'Refrence', 1, 'p_refrence', 'parser.py', 89),
    ('Refrence -> IDENTIFIER', 'Refrence', 1, 'p_refrence', 'parser.py', 90),
    ('statement -> if_st', 'statement', 1, 'p_statement', 'parser.py', 97),
    ('statement -> while_st', 'statement', 1, 'p_statement', 'parser.py', 98),
    ('statement -> LBRACE statement RBRACE', 'statement', 3, 'p_statement', 'parser.py', 99),
    ('statement -> Refrence LPAREN argumentlist RPAREN SEMICOLON', 'statement', 5, 'p_statement', 'parser.py', 100),
    ('statement -> Refrence LPAREN RPAREN SEMICOLON', 'statement', 4, 'p_statement', 'parser.py', 101),
    ('statement -> Refrence LBRACKET exp RBRACKET ASSIGN exp SEMICOLON', 'statement', 7, 'p_statement', 'parser.py',
     102),
    ('statement -> Refrence ASSIGN exp SEMICOLON', 'statement', 4, 'p_statement', 'parser.py', 103),
    ('statement -> Type IDENTIFIER ASSIGN exp SEMICOLON', 'statement', 5, 'p_statement', 'parser.py', 104),
    ('statement -> empty', 'statement', 1, 'p_statement', 'parser.py', 105),
    ('statement -> statement statement', 'statement', 2, 'p_statement', 'parser.py', 106),
    ('while_st -> WHILE LPAREN exp RPAREN statement', 'while_st', 5, 'p_while_st', 'parser.py', 114),
    ('if_st -> IF LPAREN exp RPAREN statement', 'if_st', 5, 'p_if_st', 'parser.py', 120),
    ('if_st -> IF LPAREN exp RPAREN statement ELSE statement', 'if_st', 7, 'p_if_st', 'parser.py', 121),
    ('exp -> Refrence', 'exp', 1, 'p_exp', 'parser.py', 126),
    ('exp -> Type exp', 'exp', 2, 'p_exp', 'parser.py', 127),
    ('exp -> Refrence LBRACKET exp RBRACKET', 'exp', 4, 'p_exp', 'parser.py', 128),
    ('exp -> Refrence LPAREN RPAREN', 'exp', 3, 'p_exp', 'parser.py', 129),
    ('exp -> Refrence LPAREN argumentlist RPAREN', 'exp', 4, 'p_exp', 'parser.py', 130),
    ('exp -> Unop exp', 'exp', 2, 'p_exp', 'parser.py', 131),
    ('exp -> exp Binop exp', 'exp', 3, 'p_exp', 'parser.py', 132),
    ('exp -> LPAREN exp RPAREN', 'exp', 3, 'p_exp', 'parser.py', 133),
    ('exp -> NUMBER', 'exp', 1, 'p_exp', 'parser.py', 134),
    ('exp -> TRUE', 'exp', 1, 'p_exp', 'parser.py', 135),
    ('exp -> IDENTIFIER Binop NUMBER', 'exp', 3, 'p_exp', 'parser.py', 136),
    ('exp -> FALSE', 'exp', 1, 'p_exp', 'parser.py', 137),
    ('exp -> NEW IDENTIFIER LPAREN RPAREN', 'exp', 4, 'p_exp', 'parser.py', 138),
    ('exp -> NEW INT LBRACKET exp RBRACKET', 'exp', 5, 'p_exp', 'parser.py', 139),
    ('exp -> NEW IDENTIFIER LBRACKET exp RBRACKET', 'exp', 5, 'p_exp', 'parser.py', 140),
    ('Unop -> NOT', 'Unop', 1, 'p_Unop', 'parser.py', 145),
    ('Unop -> MINUS', 'Unop', 1, 'p_Unop', 'parser.py', 146),
    ('Binop -> PLUS', 'Binop', 1, 'p_Binop', 'parser.py', 150),
    ('Binop -> MINUS', 'Binop', 1, 'p_Binop', 'parser.py', 151),
    ('Binop -> TIMES', 'Binop', 1, 'p_Binop', 'parser.py', 152),
    ('Binop -> DIVIDE', 'Binop', 1, 'p_Binop', 'parser.py', 153),
    ('Binop -> EQ', 'Binop', 1, 'p_Binop', 'parser.py', 154),
    ('Binop -> NOT_EQ', 'Binop', 1, 'p_Binop', 'parser.py', 155),
    ('Binop -> LT', 'Binop', 1, 'p_Binop', 'parser.py', 156),
    ('Binop -> GT', 'Binop', 1, 'p_Binop', 'parser.py', 157),
    ('Binop -> LE', 'Binop', 1, 'p_Binop', 'parser.py', 158),
    ('Binop -> GE', 'Binop', 1, 'p_Binop', 'parser.py', 159),
    ('Binop -> AND', 'Binop', 1, 'p_Binop', 'parser.py', 160),
    ('Binop -> NOT', 'Binop', 1, 'p_Binop', 'parser.py', 161),
    ('empty -> <empty>', 'empty', 0, 'p_empty', 'parser.py', 166),
]
