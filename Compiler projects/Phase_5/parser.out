Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    KEY_do
    KEY_print
    OP_negate

Grammar

Rule 0     S' -> statement_list
Rule 1     statement -> compound_statement
Rule 2     statement -> declaration_statement
Rule 3     statement -> selection_statement
Rule 4     statement -> iteration_statement
Rule 5     statement -> expression_statement
Rule 6     statement -> SEMICOLON
Rule 7     compound_statement -> LBRACE statement_list RBRACE end
Rule 8     statement_list -> statement_list statement
Rule 9     statement_list -> empty
Rule 10    declaration_statement -> type_specifier declaration_list SEMICOLON
Rule 11    type_specifier -> KEY_int
Rule 12    type_specifier -> KEY_char
Rule 13    type_specifier -> KEY_float
Rule 14    type_specifier -> KEY_string
Rule 15    declaration_list -> single_var_declation COMMA declaration_list
Rule 16    declaration_list -> single_var_declation
Rule 17    single_var_declation -> IDENTIFIER
Rule 18    selection_statement -> KEY_if LPAREN expression save RPAREN statement
Rule 19    selection_statement -> KEY_if LPAREN expression save RPAREN statement KEY_else save statement
Rule 20    iteration_statement -> KEY_while label LPAREN expression save RPAREN statement end
Rule 21    iteration_statement -> KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statement
Rule 22    label -> empty
Rule 23    save -> empty
Rule 24    end -> empty
Rule 25    optexpr -> assignment_expression
Rule 26    optexpr -> empty
Rule 27    expression_statement -> expression SEMICOLON
Rule 28    expression -> assignment_expression
Rule 29    expression -> expression COMMA assignment_expression
Rule 30    assignment_expression -> IDENTIFIER OP_assign INTEGER
Rule 31    assignment_expression -> IDENTIFIER OP_multiply INTEGER
Rule 32    assignment_expression -> IDENTIFIER OP_divide INTEGER
Rule 33    assignment_expression -> IDENTIFIER OP_mod INTEGER
Rule 34    assignment_expression -> IDENTIFIER OP_add INTEGER
Rule 35    assignment_expression -> IDENTIFIER OP_subtract INTEGER
Rule 36    assignment_expression -> IDENTIFIER OP_greater INTEGER
Rule 37    assignment_expression -> IDENTIFIER OP_less INTEGER
Rule 38    assignment_expression -> IDENTIFIER OP_greaterequal INTEGER
Rule 39    assignment_expression -> IDENTIFIER OP_lessequal INTEGER
Rule 40    assignment_expression -> IDENTIFIER OP_equal INTEGER
Rule 41    assignment_expression -> IDENTIFIER OP_notequal INTEGER
Rule 42    assignment_expression -> INTEGER OP_assign INTEGER
Rule 43    assignment_expression -> INTEGER OP_multiply INTEGER
Rule 44    assignment_expression -> INTEGER OP_divide INTEGER
Rule 45    assignment_expression -> INTEGER OP_mod INTEGER
Rule 46    assignment_expression -> INTEGER OP_add INTEGER
Rule 47    assignment_expression -> INTEGER OP_subtract INTEGER
Rule 48    assignment_expression -> INTEGER OP_greater INTEGER
Rule 49    assignment_expression -> INTEGER OP_less INTEGER
Rule 50    assignment_expression -> INTEGER OP_greaterequal INTEGER
Rule 51    assignment_expression -> INTEGER OP_lessequal INTEGER
Rule 52    assignment_expression -> INTEGER OP_equal INTEGER
Rule 53    assignment_expression -> INTEGER OP_notequal INTEGER
Rule 54    assignment_expression -> IDENTIFIER OP_assign IDENTIFIER
Rule 55    assignment_expression -> IDENTIFIER OP_multiply IDENTIFIER
Rule 56    assignment_expression -> IDENTIFIER OP_divide IDENTIFIER
Rule 57    assignment_expression -> IDENTIFIER OP_mod IDENTIFIER
Rule 58    assignment_expression -> IDENTIFIER OP_add IDENTIFIER
Rule 59    assignment_expression -> IDENTIFIER OP_subtract IDENTIFIER
Rule 60    assignment_expression -> IDENTIFIER OP_greater IDENTIFIER
Rule 61    assignment_expression -> IDENTIFIER OP_less IDENTIFIER
Rule 62    assignment_expression -> IDENTIFIER OP_greaterequal IDENTIFIER
Rule 63    assignment_expression -> IDENTIFIER OP_lessequal IDENTIFIER
Rule 64    assignment_expression -> IDENTIFIER OP_equal IDENTIFIER
Rule 65    assignment_expression -> IDENTIFIER OP_notequal IDENTIFIER
Rule 66    assignment_expression -> primary_expression
Rule 67    assignment_expression -> OP_subtract primary_expression
Rule 68    assignment_expression -> primary_expression OP_multiply primary_expression
Rule 69    assignment_expression -> primary_expression OP_divide primary_expression
Rule 70    assignment_expression -> primary_expression OP_mod primary_expression
Rule 71    assignment_expression -> primary_expression OP_add primary_expression
Rule 72    assignment_expression -> primary_expression OP_subtract primary_expression
Rule 73    assignment_expression -> primary_expression OP_greater primary_expression
Rule 74    assignment_expression -> primary_expression OP_less primary_expression
Rule 75    assignment_expression -> primary_expression OP_greaterequal primary_expression
Rule 76    assignment_expression -> primary_expression OP_lessequal primary_expression
Rule 77    assignment_expression -> primary_expression OP_equal primary_expression
Rule 78    assignment_expression -> primary_expression OP_notequal primary_expression
Rule 79    assignment_expression -> IDENTIFIER OP_assign assignment_expression
Rule 80    assignment_expression -> primary_expression OP_lessequal STRING
Rule 81    primary_expression -> INTEGER
Rule 82    primary_expression -> IDENTIFIER
Rule 83    primary_expression -> FLOAT
Rule 84    primary_expression -> CHARACTER
Rule 85    primary_expression -> STRING
Rule 86    primary_expression -> id_expression
Rule 87    id_expression -> IDENTIFIER
Rule 88    id_expression -> LPAREN expression RPAREN
Rule 89    empty -> <empty>

Terminals, with rules where they appear

CHARACTER            : 84
COMMA                : 15 29
FLOAT                : 83
IDENTIFIER           : 17 30 31 32 33 34 35 36 37 38 39 40 41 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 79 82 87
INTEGER              : 30 31 32 33 34 35 36 37 38 39 40 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 81
KEY_char             : 12
KEY_do               : 
KEY_else             : 19
KEY_float            : 13
KEY_for              : 21
KEY_if               : 18 19
KEY_int              : 11
KEY_print            : 
KEY_string           : 14
KEY_while            : 20
LBRACE               : 7
LPAREN               : 18 19 20 21 88
OP_add               : 34 46 58 71
OP_assign            : 30 42 54 79
OP_divide            : 32 44 56 69
OP_equal             : 40 52 64 77
OP_greater           : 36 48 60 73
OP_greaterequal      : 38 50 62 75
OP_less              : 37 49 61 74
OP_lessequal         : 39 51 63 76 80
OP_mod               : 33 45 57 70
OP_multiply          : 31 43 55 68
OP_negate            : 
OP_notequal          : 41 53 65 78
OP_subtract          : 35 47 59 67 72
RBRACE               : 7
RPAREN               : 18 19 20 21 88
SEMICOLON            : 6 10 21 21 27
STRING               : 80 85
error                : 

Nonterminals, with rules where they appear

assignment_expression : 25 28 29 79
compound_statement   : 1
declaration_list     : 10 15
declaration_statement : 2
empty                : 9 22 23 24 26
end                  : 7 20
expression           : 18 19 20 27 29 88
expression_statement : 5
id_expression        : 86
iteration_statement  : 4
label                : 20 21
optexpr              : 21 21 21
primary_expression   : 66 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 76 77 77 78 78 80
save                 : 18 19 19 20 21
selection_statement  : 3
single_var_declation : 15 16
statement            : 8 18 19 19 20 21
statement_list       : 7 8 0
type_specifier       : 10

Parsing method: LALR

state 0

    (0) S' -> . statement_list
    (8) statement_list -> . statement_list statement
    (9) statement_list -> . empty
    (89) empty -> .

    SEMICOLON       reduce using rule 89 (empty -> .)
    LBRACE          reduce using rule 89 (empty -> .)
    KEY_if          reduce using rule 89 (empty -> .)
    KEY_while       reduce using rule 89 (empty -> .)
    KEY_for         reduce using rule 89 (empty -> .)
    KEY_int         reduce using rule 89 (empty -> .)
    KEY_char        reduce using rule 89 (empty -> .)
    KEY_float       reduce using rule 89 (empty -> .)
    KEY_string      reduce using rule 89 (empty -> .)
    IDENTIFIER      reduce using rule 89 (empty -> .)
    INTEGER         reduce using rule 89 (empty -> .)
    OP_subtract     reduce using rule 89 (empty -> .)
    FLOAT           reduce using rule 89 (empty -> .)
    CHARACTER       reduce using rule 89 (empty -> .)
    STRING          reduce using rule 89 (empty -> .)
    LPAREN          reduce using rule 89 (empty -> .)
    $end            reduce using rule 89 (empty -> .)

    statement_list                 shift and go to state 1
    empty                          shift and go to state 2

state 1

    (0) S' -> statement_list .
    (8) statement_list -> statement_list . statement
    (1) statement -> . compound_statement
    (2) statement -> . declaration_statement
    (3) statement -> . selection_statement
    (4) statement -> . iteration_statement
    (5) statement -> . expression_statement
    (6) statement -> . SEMICOLON
    (7) compound_statement -> . LBRACE statement_list RBRACE end
    (10) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (18) selection_statement -> . KEY_if LPAREN expression save RPAREN statement
    (19) selection_statement -> . KEY_if LPAREN expression save RPAREN statement KEY_else save statement
    (20) iteration_statement -> . KEY_while label LPAREN expression save RPAREN statement end
    (21) iteration_statement -> . KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statement
    (27) expression_statement -> . expression SEMICOLON
    (11) type_specifier -> . KEY_int
    (12) type_specifier -> . KEY_char
    (13) type_specifier -> . KEY_float
    (14) type_specifier -> . KEY_string
    (28) expression -> . assignment_expression
    (29) expression -> . expression COMMA assignment_expression
    (30) assignment_expression -> . IDENTIFIER OP_assign INTEGER
    (31) assignment_expression -> . IDENTIFIER OP_multiply INTEGER
    (32) assignment_expression -> . IDENTIFIER OP_divide INTEGER
    (33) assignment_expression -> . IDENTIFIER OP_mod INTEGER
    (34) assignment_expression -> . IDENTIFIER OP_add INTEGER
    (35) assignment_expression -> . IDENTIFIER OP_subtract INTEGER
    (36) assignment_expression -> . IDENTIFIER OP_greater INTEGER
    (37) assignment_expression -> . IDENTIFIER OP_less INTEGER
    (38) assignment_expression -> . IDENTIFIER OP_greaterequal INTEGER
    (39) assignment_expression -> . IDENTIFIER OP_lessequal INTEGER
    (40) assignment_expression -> . IDENTIFIER OP_equal INTEGER
    (41) assignment_expression -> . IDENTIFIER OP_notequal INTEGER
    (42) assignment_expression -> . INTEGER OP_assign INTEGER
    (43) assignment_expression -> . INTEGER OP_multiply INTEGER
    (44) assignment_expression -> . INTEGER OP_divide INTEGER
    (45) assignment_expression -> . INTEGER OP_mod INTEGER
    (46) assignment_expression -> . INTEGER OP_add INTEGER
    (47) assignment_expression -> . INTEGER OP_subtract INTEGER
    (48) assignment_expression -> . INTEGER OP_greater INTEGER
    (49) assignment_expression -> . INTEGER OP_less INTEGER
    (50) assignment_expression -> . INTEGER OP_greaterequal INTEGER
    (51) assignment_expression -> . INTEGER OP_lessequal INTEGER
    (52) assignment_expression -> . INTEGER OP_equal INTEGER
    (53) assignment_expression -> . INTEGER OP_notequal INTEGER
    (54) assignment_expression -> . IDENTIFIER OP_assign IDENTIFIER
    (55) assignment_expression -> . IDENTIFIER OP_multiply IDENTIFIER
    (56) assignment_expression -> . IDENTIFIER OP_divide IDENTIFIER
    (57) assignment_expression -> . IDENTIFIER OP_mod IDENTIFIER
    (58) assignment_expression -> . IDENTIFIER OP_add IDENTIFIER
    (59) assignment_expression -> . IDENTIFIER OP_subtract IDENTIFIER
    (60) assignment_expression -> . IDENTIFIER OP_greater IDENTIFIER
    (61) assignment_expression -> . IDENTIFIER OP_less IDENTIFIER
    (62) assignment_expression -> . IDENTIFIER OP_greaterequal IDENTIFIER
    (63) assignment_expression -> . IDENTIFIER OP_lessequal IDENTIFIER
    (64) assignment_expression -> . IDENTIFIER OP_equal IDENTIFIER
    (65) assignment_expression -> . IDENTIFIER OP_notequal IDENTIFIER
    (66) assignment_expression -> . primary_expression
    (67) assignment_expression -> . OP_subtract primary_expression
    (68) assignment_expression -> . primary_expression OP_multiply primary_expression
    (69) assignment_expression -> . primary_expression OP_divide primary_expression
    (70) assignment_expression -> . primary_expression OP_mod primary_expression
    (71) assignment_expression -> . primary_expression OP_add primary_expression
    (72) assignment_expression -> . primary_expression OP_subtract primary_expression
    (73) assignment_expression -> . primary_expression OP_greater primary_expression
    (74) assignment_expression -> . primary_expression OP_less primary_expression
    (75) assignment_expression -> . primary_expression OP_greaterequal primary_expression
    (76) assignment_expression -> . primary_expression OP_lessequal primary_expression
    (77) assignment_expression -> . primary_expression OP_equal primary_expression
    (78) assignment_expression -> . primary_expression OP_notequal primary_expression
    (79) assignment_expression -> . IDENTIFIER OP_assign assignment_expression
    (80) assignment_expression -> . primary_expression OP_lessequal STRING
    (81) primary_expression -> . INTEGER
    (82) primary_expression -> . IDENTIFIER
    (83) primary_expression -> . FLOAT
    (84) primary_expression -> . CHARACTER
    (85) primary_expression -> . STRING
    (86) primary_expression -> . id_expression
    (87) id_expression -> . IDENTIFIER
    (88) id_expression -> . LPAREN expression RPAREN

    SEMICOLON       shift and go to state 9
    LBRACE          shift and go to state 10
    KEY_if          shift and go to state 12
    KEY_while       shift and go to state 15
    KEY_for         shift and go to state 16
    KEY_int         shift and go to state 17
    KEY_char        shift and go to state 18
    KEY_float       shift and go to state 19
    KEY_string      shift and go to state 20
    IDENTIFIER      shift and go to state 22
    INTEGER         shift and go to state 23
    OP_subtract     shift and go to state 24
    FLOAT           shift and go to state 27
    CHARACTER       shift and go to state 28
    STRING          shift and go to state 26
    LPAREN          shift and go to state 13

    statement                      shift and go to state 3
    compound_statement             shift and go to state 4
    declaration_statement          shift and go to state 5
    selection_statement            shift and go to state 6
    iteration_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    type_specifier                 shift and go to state 11
    expression                     shift and go to state 14
    assignment_expression          shift and go to state 21
    primary_expression             shift and go to state 25
    id_expression                  shift and go to state 29

state 2

    (9) statement_list -> empty .

    SEMICOLON       reduce using rule 9 (statement_list -> empty .)
    LBRACE          reduce using rule 9 (statement_list -> empty .)
    KEY_if          reduce using rule 9 (statement_list -> empty .)
    KEY_while       reduce using rule 9 (statement_list -> empty .)
    KEY_for         reduce using rule 9 (statement_list -> empty .)
    KEY_int         reduce using rule 9 (statement_list -> empty .)
    KEY_char        reduce using rule 9 (statement_list -> empty .)
    KEY_float       reduce using rule 9 (statement_list -> empty .)
    KEY_string      reduce using rule 9 (statement_list -> empty .)
    IDENTIFIER      reduce using rule 9 (statement_list -> empty .)
    INTEGER         reduce using rule 9 (statement_list -> empty .)
    OP_subtract     reduce using rule 9 (statement_list -> empty .)
    FLOAT           reduce using rule 9 (statement_list -> empty .)
    CHARACTER       reduce using rule 9 (statement_list -> empty .)
    STRING          reduce using rule 9 (statement_list -> empty .)
    LPAREN          reduce using rule 9 (statement_list -> empty .)
    $end            reduce using rule 9 (statement_list -> empty .)
    RBRACE          reduce using rule 9 (statement_list -> empty .)


state 3

    (8) statement_list -> statement_list statement .

    SEMICOLON       reduce using rule 8 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 8 (statement_list -> statement_list statement .)
    KEY_if          reduce using rule 8 (statement_list -> statement_list statement .)
    KEY_while       reduce using rule 8 (statement_list -> statement_list statement .)
    KEY_for         reduce using rule 8 (statement_list -> statement_list statement .)
    KEY_int         reduce using rule 8 (statement_list -> statement_list statement .)
    KEY_char        reduce using rule 8 (statement_list -> statement_list statement .)
    KEY_float       reduce using rule 8 (statement_list -> statement_list statement .)
    KEY_string      reduce using rule 8 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 8 (statement_list -> statement_list statement .)
    INTEGER         reduce using rule 8 (statement_list -> statement_list statement .)
    OP_subtract     reduce using rule 8 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 8 (statement_list -> statement_list statement .)
    CHARACTER       reduce using rule 8 (statement_list -> statement_list statement .)
    STRING          reduce using rule 8 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 8 (statement_list -> statement_list statement .)
    $end            reduce using rule 8 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 8 (statement_list -> statement_list statement .)


state 4

    (1) statement -> compound_statement .

    SEMICOLON       reduce using rule 1 (statement -> compound_statement .)
    LBRACE          reduce using rule 1 (statement -> compound_statement .)
    KEY_if          reduce using rule 1 (statement -> compound_statement .)
    KEY_while       reduce using rule 1 (statement -> compound_statement .)
    KEY_for         reduce using rule 1 (statement -> compound_statement .)
    KEY_int         reduce using rule 1 (statement -> compound_statement .)
    KEY_char        reduce using rule 1 (statement -> compound_statement .)
    KEY_float       reduce using rule 1 (statement -> compound_statement .)
    KEY_string      reduce using rule 1 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 1 (statement -> compound_statement .)
    INTEGER         reduce using rule 1 (statement -> compound_statement .)
    OP_subtract     reduce using rule 1 (statement -> compound_statement .)
    FLOAT           reduce using rule 1 (statement -> compound_statement .)
    CHARACTER       reduce using rule 1 (statement -> compound_statement .)
    STRING          reduce using rule 1 (statement -> compound_statement .)
    LPAREN          reduce using rule 1 (statement -> compound_statement .)
    $end            reduce using rule 1 (statement -> compound_statement .)
    RBRACE          reduce using rule 1 (statement -> compound_statement .)
    KEY_else        reduce using rule 1 (statement -> compound_statement .)


state 5

    (2) statement -> declaration_statement .

    SEMICOLON       reduce using rule 2 (statement -> declaration_statement .)
    LBRACE          reduce using rule 2 (statement -> declaration_statement .)
    KEY_if          reduce using rule 2 (statement -> declaration_statement .)
    KEY_while       reduce using rule 2 (statement -> declaration_statement .)
    KEY_for         reduce using rule 2 (statement -> declaration_statement .)
    KEY_int         reduce using rule 2 (statement -> declaration_statement .)
    KEY_char        reduce using rule 2 (statement -> declaration_statement .)
    KEY_float       reduce using rule 2 (statement -> declaration_statement .)
    KEY_string      reduce using rule 2 (statement -> declaration_statement .)
    IDENTIFIER      reduce using rule 2 (statement -> declaration_statement .)
    INTEGER         reduce using rule 2 (statement -> declaration_statement .)
    OP_subtract     reduce using rule 2 (statement -> declaration_statement .)
    FLOAT           reduce using rule 2 (statement -> declaration_statement .)
    CHARACTER       reduce using rule 2 (statement -> declaration_statement .)
    STRING          reduce using rule 2 (statement -> declaration_statement .)
    LPAREN          reduce using rule 2 (statement -> declaration_statement .)
    $end            reduce using rule 2 (statement -> declaration_statement .)
    RBRACE          reduce using rule 2 (statement -> declaration_statement .)
    KEY_else        reduce using rule 2 (statement -> declaration_statement .)


state 6

    (3) statement -> selection_statement .

    SEMICOLON       reduce using rule 3 (statement -> selection_statement .)
    LBRACE          reduce using rule 3 (statement -> selection_statement .)
    KEY_if          reduce using rule 3 (statement -> selection_statement .)
    KEY_while       reduce using rule 3 (statement -> selection_statement .)
    KEY_for         reduce using rule 3 (statement -> selection_statement .)
    KEY_int         reduce using rule 3 (statement -> selection_statement .)
    KEY_char        reduce using rule 3 (statement -> selection_statement .)
    KEY_float       reduce using rule 3 (statement -> selection_statement .)
    KEY_string      reduce using rule 3 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 3 (statement -> selection_statement .)
    INTEGER         reduce using rule 3 (statement -> selection_statement .)
    OP_subtract     reduce using rule 3 (statement -> selection_statement .)
    FLOAT           reduce using rule 3 (statement -> selection_statement .)
    CHARACTER       reduce using rule 3 (statement -> selection_statement .)
    STRING          reduce using rule 3 (statement -> selection_statement .)
    LPAREN          reduce using rule 3 (statement -> selection_statement .)
    $end            reduce using rule 3 (statement -> selection_statement .)
    RBRACE          reduce using rule 3 (statement -> selection_statement .)
    KEY_else        reduce using rule 3 (statement -> selection_statement .)


state 7

    (4) statement -> iteration_statement .

    SEMICOLON       reduce using rule 4 (statement -> iteration_statement .)
    LBRACE          reduce using rule 4 (statement -> iteration_statement .)
    KEY_if          reduce using rule 4 (statement -> iteration_statement .)
    KEY_while       reduce using rule 4 (statement -> iteration_statement .)
    KEY_for         reduce using rule 4 (statement -> iteration_statement .)
    KEY_int         reduce using rule 4 (statement -> iteration_statement .)
    KEY_char        reduce using rule 4 (statement -> iteration_statement .)
    KEY_float       reduce using rule 4 (statement -> iteration_statement .)
    KEY_string      reduce using rule 4 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 4 (statement -> iteration_statement .)
    INTEGER         reduce using rule 4 (statement -> iteration_statement .)
    OP_subtract     reduce using rule 4 (statement -> iteration_statement .)
    FLOAT           reduce using rule 4 (statement -> iteration_statement .)
    CHARACTER       reduce using rule 4 (statement -> iteration_statement .)
    STRING          reduce using rule 4 (statement -> iteration_statement .)
    LPAREN          reduce using rule 4 (statement -> iteration_statement .)
    $end            reduce using rule 4 (statement -> iteration_statement .)
    RBRACE          reduce using rule 4 (statement -> iteration_statement .)
    KEY_else        reduce using rule 4 (statement -> iteration_statement .)


state 8

    (5) statement -> expression_statement .

    SEMICOLON       reduce using rule 5 (statement -> expression_statement .)
    LBRACE          reduce using rule 5 (statement -> expression_statement .)
    KEY_if          reduce using rule 5 (statement -> expression_statement .)
    KEY_while       reduce using rule 5 (statement -> expression_statement .)
    KEY_for         reduce using rule 5 (statement -> expression_statement .)
    KEY_int         reduce using rule 5 (statement -> expression_statement .)
    KEY_char        reduce using rule 5 (statement -> expression_statement .)
    KEY_float       reduce using rule 5 (statement -> expression_statement .)
    KEY_string      reduce using rule 5 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 5 (statement -> expression_statement .)
    INTEGER         reduce using rule 5 (statement -> expression_statement .)
    OP_subtract     reduce using rule 5 (statement -> expression_statement .)
    FLOAT           reduce using rule 5 (statement -> expression_statement .)
    CHARACTER       reduce using rule 5 (statement -> expression_statement .)
    STRING          reduce using rule 5 (statement -> expression_statement .)
    LPAREN          reduce using rule 5 (statement -> expression_statement .)
    $end            reduce using rule 5 (statement -> expression_statement .)
    RBRACE          reduce using rule 5 (statement -> expression_statement .)
    KEY_else        reduce using rule 5 (statement -> expression_statement .)


state 9

    (6) statement -> SEMICOLON .

    SEMICOLON       reduce using rule 6 (statement -> SEMICOLON .)
    LBRACE          reduce using rule 6 (statement -> SEMICOLON .)
    KEY_if          reduce using rule 6 (statement -> SEMICOLON .)
    KEY_while       reduce using rule 6 (statement -> SEMICOLON .)
    KEY_for         reduce using rule 6 (statement -> SEMICOLON .)
    KEY_int         reduce using rule 6 (statement -> SEMICOLON .)
    KEY_char        reduce using rule 6 (statement -> SEMICOLON .)
    KEY_float       reduce using rule 6 (statement -> SEMICOLON .)
    KEY_string      reduce using rule 6 (statement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 6 (statement -> SEMICOLON .)
    INTEGER         reduce using rule 6 (statement -> SEMICOLON .)
    OP_subtract     reduce using rule 6 (statement -> SEMICOLON .)
    FLOAT           reduce using rule 6 (statement -> SEMICOLON .)
    CHARACTER       reduce using rule 6 (statement -> SEMICOLON .)
    STRING          reduce using rule 6 (statement -> SEMICOLON .)
    LPAREN          reduce using rule 6 (statement -> SEMICOLON .)
    $end            reduce using rule 6 (statement -> SEMICOLON .)
    RBRACE          reduce using rule 6 (statement -> SEMICOLON .)
    KEY_else        reduce using rule 6 (statement -> SEMICOLON .)


state 10

    (7) compound_statement -> LBRACE . statement_list RBRACE end
    (8) statement_list -> . statement_list statement
    (9) statement_list -> . empty
    (89) empty -> .

    RBRACE          reduce using rule 89 (empty -> .)
    SEMICOLON       reduce using rule 89 (empty -> .)
    LBRACE          reduce using rule 89 (empty -> .)
    KEY_if          reduce using rule 89 (empty -> .)
    KEY_while       reduce using rule 89 (empty -> .)
    KEY_for         reduce using rule 89 (empty -> .)
    KEY_int         reduce using rule 89 (empty -> .)
    KEY_char        reduce using rule 89 (empty -> .)
    KEY_float       reduce using rule 89 (empty -> .)
    KEY_string      reduce using rule 89 (empty -> .)
    IDENTIFIER      reduce using rule 89 (empty -> .)
    INTEGER         reduce using rule 89 (empty -> .)
    OP_subtract     reduce using rule 89 (empty -> .)
    FLOAT           reduce using rule 89 (empty -> .)
    CHARACTER       reduce using rule 89 (empty -> .)
    STRING          reduce using rule 89 (empty -> .)
    LPAREN          reduce using rule 89 (empty -> .)

    statement_list                 shift and go to state 30
    empty                          shift and go to state 2

state 11

    (10) declaration_statement -> type_specifier . declaration_list SEMICOLON
    (15) declaration_list -> . single_var_declation COMMA declaration_list
    (16) declaration_list -> . single_var_declation
    (17) single_var_declation -> . IDENTIFIER

    IDENTIFIER      shift and go to state 33

    declaration_list               shift and go to state 31
    single_var_declation           shift and go to state 32

state 12

    (18) selection_statement -> KEY_if . LPAREN expression save RPAREN statement
    (19) selection_statement -> KEY_if . LPAREN expression save RPAREN statement KEY_else save statement

    LPAREN          shift and go to state 34


state 13

    (88) id_expression -> LPAREN . expression RPAREN
    (28) expression -> . assignment_expression
    (29) expression -> . expression COMMA assignment_expression
    (30) assignment_expression -> . IDENTIFIER OP_assign INTEGER
    (31) assignment_expression -> . IDENTIFIER OP_multiply INTEGER
    (32) assignment_expression -> . IDENTIFIER OP_divide INTEGER
    (33) assignment_expression -> . IDENTIFIER OP_mod INTEGER
    (34) assignment_expression -> . IDENTIFIER OP_add INTEGER
    (35) assignment_expression -> . IDENTIFIER OP_subtract INTEGER
    (36) assignment_expression -> . IDENTIFIER OP_greater INTEGER
    (37) assignment_expression -> . IDENTIFIER OP_less INTEGER
    (38) assignment_expression -> . IDENTIFIER OP_greaterequal INTEGER
    (39) assignment_expression -> . IDENTIFIER OP_lessequal INTEGER
    (40) assignment_expression -> . IDENTIFIER OP_equal INTEGER
    (41) assignment_expression -> . IDENTIFIER OP_notequal INTEGER
    (42) assignment_expression -> . INTEGER OP_assign INTEGER
    (43) assignment_expression -> . INTEGER OP_multiply INTEGER
    (44) assignment_expression -> . INTEGER OP_divide INTEGER
    (45) assignment_expression -> . INTEGER OP_mod INTEGER
    (46) assignment_expression -> . INTEGER OP_add INTEGER
    (47) assignment_expression -> . INTEGER OP_subtract INTEGER
    (48) assignment_expression -> . INTEGER OP_greater INTEGER
    (49) assignment_expression -> . INTEGER OP_less INTEGER
    (50) assignment_expression -> . INTEGER OP_greaterequal INTEGER
    (51) assignment_expression -> . INTEGER OP_lessequal INTEGER
    (52) assignment_expression -> . INTEGER OP_equal INTEGER
    (53) assignment_expression -> . INTEGER OP_notequal INTEGER
    (54) assignment_expression -> . IDENTIFIER OP_assign IDENTIFIER
    (55) assignment_expression -> . IDENTIFIER OP_multiply IDENTIFIER
    (56) assignment_expression -> . IDENTIFIER OP_divide IDENTIFIER
    (57) assignment_expression -> . IDENTIFIER OP_mod IDENTIFIER
    (58) assignment_expression -> . IDENTIFIER OP_add IDENTIFIER
    (59) assignment_expression -> . IDENTIFIER OP_subtract IDENTIFIER
    (60) assignment_expression -> . IDENTIFIER OP_greater IDENTIFIER
    (61) assignment_expression -> . IDENTIFIER OP_less IDENTIFIER
    (62) assignment_expression -> . IDENTIFIER OP_greaterequal IDENTIFIER
    (63) assignment_expression -> . IDENTIFIER OP_lessequal IDENTIFIER
    (64) assignment_expression -> . IDENTIFIER OP_equal IDENTIFIER
    (65) assignment_expression -> . IDENTIFIER OP_notequal IDENTIFIER
    (66) assignment_expression -> . primary_expression
    (67) assignment_expression -> . OP_subtract primary_expression
    (68) assignment_expression -> . primary_expression OP_multiply primary_expression
    (69) assignment_expression -> . primary_expression OP_divide primary_expression
    (70) assignment_expression -> . primary_expression OP_mod primary_expression
    (71) assignment_expression -> . primary_expression OP_add primary_expression
    (72) assignment_expression -> . primary_expression OP_subtract primary_expression
    (73) assignment_expression -> . primary_expression OP_greater primary_expression
    (74) assignment_expression -> . primary_expression OP_less primary_expression
    (75) assignment_expression -> . primary_expression OP_greaterequal primary_expression
    (76) assignment_expression -> . primary_expression OP_lessequal primary_expression
    (77) assignment_expression -> . primary_expression OP_equal primary_expression
    (78) assignment_expression -> . primary_expression OP_notequal primary_expression
    (79) assignment_expression -> . IDENTIFIER OP_assign assignment_expression
    (80) assignment_expression -> . primary_expression OP_lessequal STRING
    (81) primary_expression -> . INTEGER
    (82) primary_expression -> . IDENTIFIER
    (83) primary_expression -> . FLOAT
    (84) primary_expression -> . CHARACTER
    (85) primary_expression -> . STRING
    (86) primary_expression -> . id_expression
    (87) id_expression -> . IDENTIFIER
    (88) id_expression -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 22
    INTEGER         shift and go to state 23
    OP_subtract     shift and go to state 24
    FLOAT           shift and go to state 27
    CHARACTER       shift and go to state 28
    STRING          shift and go to state 26
    LPAREN          shift and go to state 13

    expression                     shift and go to state 35
    assignment_expression          shift and go to state 21
    primary_expression             shift and go to state 25
    id_expression                  shift and go to state 29

state 14

    (27) expression_statement -> expression . SEMICOLON
    (29) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 36
    COMMA           shift and go to state 37


state 15

    (20) iteration_statement -> KEY_while . label LPAREN expression save RPAREN statement end
    (22) label -> . empty
    (89) empty -> .

    LPAREN          reduce using rule 89 (empty -> .)

    label                          shift and go to state 38
    empty                          shift and go to state 39

state 16

    (21) iteration_statement -> KEY_for . LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statement

    LPAREN          shift and go to state 40


state 17

    (11) type_specifier -> KEY_int .

    IDENTIFIER      reduce using rule 11 (type_specifier -> KEY_int .)


state 18

    (12) type_specifier -> KEY_char .

    IDENTIFIER      reduce using rule 12 (type_specifier -> KEY_char .)


state 19

    (13) type_specifier -> KEY_float .

    IDENTIFIER      reduce using rule 13 (type_specifier -> KEY_float .)


state 20

    (14) type_specifier -> KEY_string .

    IDENTIFIER      reduce using rule 14 (type_specifier -> KEY_string .)


state 21

    (28) expression -> assignment_expression .

    SEMICOLON       reduce using rule 28 (expression -> assignment_expression .)
    COMMA           reduce using rule 28 (expression -> assignment_expression .)
    RPAREN          reduce using rule 28 (expression -> assignment_expression .)


state 22

    (30) assignment_expression -> IDENTIFIER . OP_assign INTEGER
    (31) assignment_expression -> IDENTIFIER . OP_multiply INTEGER
    (32) assignment_expression -> IDENTIFIER . OP_divide INTEGER
    (33) assignment_expression -> IDENTIFIER . OP_mod INTEGER
    (34) assignment_expression -> IDENTIFIER . OP_add INTEGER
    (35) assignment_expression -> IDENTIFIER . OP_subtract INTEGER
    (36) assignment_expression -> IDENTIFIER . OP_greater INTEGER
    (37) assignment_expression -> IDENTIFIER . OP_less INTEGER
    (38) assignment_expression -> IDENTIFIER . OP_greaterequal INTEGER
    (39) assignment_expression -> IDENTIFIER . OP_lessequal INTEGER
    (40) assignment_expression -> IDENTIFIER . OP_equal INTEGER
    (41) assignment_expression -> IDENTIFIER . OP_notequal INTEGER
    (54) assignment_expression -> IDENTIFIER . OP_assign IDENTIFIER
    (55) assignment_expression -> IDENTIFIER . OP_multiply IDENTIFIER
    (56) assignment_expression -> IDENTIFIER . OP_divide IDENTIFIER
    (57) assignment_expression -> IDENTIFIER . OP_mod IDENTIFIER
    (58) assignment_expression -> IDENTIFIER . OP_add IDENTIFIER
    (59) assignment_expression -> IDENTIFIER . OP_subtract IDENTIFIER
    (60) assignment_expression -> IDENTIFIER . OP_greater IDENTIFIER
    (61) assignment_expression -> IDENTIFIER . OP_less IDENTIFIER
    (62) assignment_expression -> IDENTIFIER . OP_greaterequal IDENTIFIER
    (63) assignment_expression -> IDENTIFIER . OP_lessequal IDENTIFIER
    (64) assignment_expression -> IDENTIFIER . OP_equal IDENTIFIER
    (65) assignment_expression -> IDENTIFIER . OP_notequal IDENTIFIER
    (79) assignment_expression -> IDENTIFIER . OP_assign assignment_expression
    (82) primary_expression -> IDENTIFIER .
    (87) id_expression -> IDENTIFIER .

  ! shift/reduce conflict for OP_multiply resolved as shift
  ! shift/reduce conflict for OP_divide resolved as shift
  ! shift/reduce conflict for OP_mod resolved as shift
  ! shift/reduce conflict for OP_add resolved as shift
  ! shift/reduce conflict for OP_subtract resolved as shift
  ! shift/reduce conflict for OP_greater resolved as shift
  ! shift/reduce conflict for OP_less resolved as shift
  ! shift/reduce conflict for OP_greaterequal resolved as shift
  ! shift/reduce conflict for OP_lessequal resolved as shift
  ! shift/reduce conflict for OP_equal resolved as shift
  ! shift/reduce conflict for OP_notequal resolved as shift
  ! shift/reduce conflict for OP_multiply resolved as shift
  ! shift/reduce conflict for OP_divide resolved as shift
  ! shift/reduce conflict for OP_mod resolved as shift
  ! shift/reduce conflict for OP_add resolved as shift
  ! shift/reduce conflict for OP_subtract resolved as shift
  ! shift/reduce conflict for OP_greater resolved as shift
  ! shift/reduce conflict for OP_less resolved as shift
  ! shift/reduce conflict for OP_greaterequal resolved as shift
  ! shift/reduce conflict for OP_lessequal resolved as shift
  ! shift/reduce conflict for OP_equal resolved as shift
  ! shift/reduce conflict for OP_notequal resolved as shift
  ! reduce/reduce conflict for SEMICOLON resolved using rule 82 (primary_expression -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 82 (primary_expression -> IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 82 (primary_expression -> IDENTIFIER .)
    OP_assign       shift and go to state 41
    OP_multiply     shift and go to state 42
    OP_divide       shift and go to state 43
    OP_mod          shift and go to state 44
    OP_add          shift and go to state 45
    OP_subtract     shift and go to state 46
    OP_greater      shift and go to state 47
    OP_less         shift and go to state 48
    OP_greaterequal shift and go to state 49
    OP_lessequal    shift and go to state 50
    OP_equal        shift and go to state 51
    OP_notequal     shift and go to state 52
    SEMICOLON       reduce using rule 82 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 82 (primary_expression -> IDENTIFIER .)
    RPAREN          reduce using rule 82 (primary_expression -> IDENTIFIER .)

  ! OP_multiply     [ reduce using rule 82 (primary_expression -> IDENTIFIER .) ]
  ! OP_divide       [ reduce using rule 82 (primary_expression -> IDENTIFIER .) ]
  ! OP_mod          [ reduce using rule 82 (primary_expression -> IDENTIFIER .) ]
  ! OP_add          [ reduce using rule 82 (primary_expression -> IDENTIFIER .) ]
  ! OP_subtract     [ reduce using rule 82 (primary_expression -> IDENTIFIER .) ]
  ! OP_greater      [ reduce using rule 82 (primary_expression -> IDENTIFIER .) ]
  ! OP_less         [ reduce using rule 82 (primary_expression -> IDENTIFIER .) ]
  ! OP_greaterequal [ reduce using rule 82 (primary_expression -> IDENTIFIER .) ]
  ! OP_lessequal    [ reduce using rule 82 (primary_expression -> IDENTIFIER .) ]
  ! OP_equal        [ reduce using rule 82 (primary_expression -> IDENTIFIER .) ]
  ! OP_notequal     [ reduce using rule 82 (primary_expression -> IDENTIFIER .) ]
  ! OP_multiply     [ reduce using rule 87 (id_expression -> IDENTIFIER .) ]
  ! OP_divide       [ reduce using rule 87 (id_expression -> IDENTIFIER .) ]
  ! OP_mod          [ reduce using rule 87 (id_expression -> IDENTIFIER .) ]
  ! OP_add          [ reduce using rule 87 (id_expression -> IDENTIFIER .) ]
  ! OP_subtract     [ reduce using rule 87 (id_expression -> IDENTIFIER .) ]
  ! OP_greater      [ reduce using rule 87 (id_expression -> IDENTIFIER .) ]
  ! OP_less         [ reduce using rule 87 (id_expression -> IDENTIFIER .) ]
  ! OP_greaterequal [ reduce using rule 87 (id_expression -> IDENTIFIER .) ]
  ! OP_lessequal    [ reduce using rule 87 (id_expression -> IDENTIFIER .) ]
  ! OP_equal        [ reduce using rule 87 (id_expression -> IDENTIFIER .) ]
  ! OP_notequal     [ reduce using rule 87 (id_expression -> IDENTIFIER .) ]
  ! SEMICOLON       [ reduce using rule 87 (id_expression -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 87 (id_expression -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 87 (id_expression -> IDENTIFIER .) ]


state 23

    (42) assignment_expression -> INTEGER . OP_assign INTEGER
    (43) assignment_expression -> INTEGER . OP_multiply INTEGER
    (44) assignment_expression -> INTEGER . OP_divide INTEGER
    (45) assignment_expression -> INTEGER . OP_mod INTEGER
    (46) assignment_expression -> INTEGER . OP_add INTEGER
    (47) assignment_expression -> INTEGER . OP_subtract INTEGER
    (48) assignment_expression -> INTEGER . OP_greater INTEGER
    (49) assignment_expression -> INTEGER . OP_less INTEGER
    (50) assignment_expression -> INTEGER . OP_greaterequal INTEGER
    (51) assignment_expression -> INTEGER . OP_lessequal INTEGER
    (52) assignment_expression -> INTEGER . OP_equal INTEGER
    (53) assignment_expression -> INTEGER . OP_notequal INTEGER
    (81) primary_expression -> INTEGER .

  ! shift/reduce conflict for OP_multiply resolved as shift
  ! shift/reduce conflict for OP_divide resolved as shift
  ! shift/reduce conflict for OP_mod resolved as shift
  ! shift/reduce conflict for OP_add resolved as shift
  ! shift/reduce conflict for OP_subtract resolved as shift
  ! shift/reduce conflict for OP_greater resolved as shift
  ! shift/reduce conflict for OP_less resolved as shift
  ! shift/reduce conflict for OP_greaterequal resolved as shift
  ! shift/reduce conflict for OP_lessequal resolved as shift
  ! shift/reduce conflict for OP_equal resolved as shift
  ! shift/reduce conflict for OP_notequal resolved as shift
    OP_assign       shift and go to state 53
    OP_multiply     shift and go to state 54
    OP_divide       shift and go to state 55
    OP_mod          shift and go to state 56
    OP_add          shift and go to state 57
    OP_subtract     shift and go to state 58
    OP_greater      shift and go to state 59
    OP_less         shift and go to state 60
    OP_greaterequal shift and go to state 61
    OP_lessequal    shift and go to state 62
    OP_equal        shift and go to state 63
    OP_notequal     shift and go to state 64
    SEMICOLON       reduce using rule 81 (primary_expression -> INTEGER .)
    COMMA           reduce using rule 81 (primary_expression -> INTEGER .)
    RPAREN          reduce using rule 81 (primary_expression -> INTEGER .)

  ! OP_multiply     [ reduce using rule 81 (primary_expression -> INTEGER .) ]
  ! OP_divide       [ reduce using rule 81 (primary_expression -> INTEGER .) ]
  ! OP_mod          [ reduce using rule 81 (primary_expression -> INTEGER .) ]
  ! OP_add          [ reduce using rule 81 (primary_expression -> INTEGER .) ]
  ! OP_subtract     [ reduce using rule 81 (primary_expression -> INTEGER .) ]
  ! OP_greater      [ reduce using rule 81 (primary_expression -> INTEGER .) ]
  ! OP_less         [ reduce using rule 81 (primary_expression -> INTEGER .) ]
  ! OP_greaterequal [ reduce using rule 81 (primary_expression -> INTEGER .) ]
  ! OP_lessequal    [ reduce using rule 81 (primary_expression -> INTEGER .) ]
  ! OP_equal        [ reduce using rule 81 (primary_expression -> INTEGER .) ]
  ! OP_notequal     [ reduce using rule 81 (primary_expression -> INTEGER .) ]


state 24

    (67) assignment_expression -> OP_subtract . primary_expression
    (81) primary_expression -> . INTEGER
    (82) primary_expression -> . IDENTIFIER
    (83) primary_expression -> . FLOAT
    (84) primary_expression -> . CHARACTER
    (85) primary_expression -> . STRING
    (86) primary_expression -> . id_expression
    (87) id_expression -> . IDENTIFIER
    (88) id_expression -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 66
    IDENTIFIER      shift and go to state 67
    FLOAT           shift and go to state 27
    CHARACTER       shift and go to state 28
    STRING          shift and go to state 26
    LPAREN          shift and go to state 13

    primary_expression             shift and go to state 65
    id_expression                  shift and go to state 29

state 25

    (66) assignment_expression -> primary_expression .
    (68) assignment_expression -> primary_expression . OP_multiply primary_expression
    (69) assignment_expression -> primary_expression . OP_divide primary_expression
    (70) assignment_expression -> primary_expression . OP_mod primary_expression
    (71) assignment_expression -> primary_expression . OP_add primary_expression
    (72) assignment_expression -> primary_expression . OP_subtract primary_expression
    (73) assignment_expression -> primary_expression . OP_greater primary_expression
    (74) assignment_expression -> primary_expression . OP_less primary_expression
    (75) assignment_expression -> primary_expression . OP_greaterequal primary_expression
    (76) assignment_expression -> primary_expression . OP_lessequal primary_expression
    (77) assignment_expression -> primary_expression . OP_equal primary_expression
    (78) assignment_expression -> primary_expression . OP_notequal primary_expression
    (80) assignment_expression -> primary_expression . OP_lessequal STRING

    SEMICOLON       reduce using rule 66 (assignment_expression -> primary_expression .)
    COMMA           reduce using rule 66 (assignment_expression -> primary_expression .)
    RPAREN          reduce using rule 66 (assignment_expression -> primary_expression .)
    OP_multiply     shift and go to state 68
    OP_divide       shift and go to state 69
    OP_mod          shift and go to state 70
    OP_add          shift and go to state 71
    OP_subtract     shift and go to state 72
    OP_greater      shift and go to state 73
    OP_less         shift and go to state 74
    OP_greaterequal shift and go to state 75
    OP_lessequal    shift and go to state 76
    OP_equal        shift and go to state 77
    OP_notequal     shift and go to state 78


state 26

    (85) primary_expression -> STRING .

    OP_multiply     reduce using rule 85 (primary_expression -> STRING .)
    OP_divide       reduce using rule 85 (primary_expression -> STRING .)
    OP_mod          reduce using rule 85 (primary_expression -> STRING .)
    OP_add          reduce using rule 85 (primary_expression -> STRING .)
    OP_subtract     reduce using rule 85 (primary_expression -> STRING .)
    OP_greater      reduce using rule 85 (primary_expression -> STRING .)
    OP_less         reduce using rule 85 (primary_expression -> STRING .)
    OP_greaterequal reduce using rule 85 (primary_expression -> STRING .)
    OP_lessequal    reduce using rule 85 (primary_expression -> STRING .)
    OP_equal        reduce using rule 85 (primary_expression -> STRING .)
    OP_notequal     reduce using rule 85 (primary_expression -> STRING .)
    SEMICOLON       reduce using rule 85 (primary_expression -> STRING .)
    COMMA           reduce using rule 85 (primary_expression -> STRING .)
    RPAREN          reduce using rule 85 (primary_expression -> STRING .)


state 27

    (83) primary_expression -> FLOAT .

    OP_multiply     reduce using rule 83 (primary_expression -> FLOAT .)
    OP_divide       reduce using rule 83 (primary_expression -> FLOAT .)
    OP_mod          reduce using rule 83 (primary_expression -> FLOAT .)
    OP_add          reduce using rule 83 (primary_expression -> FLOAT .)
    OP_subtract     reduce using rule 83 (primary_expression -> FLOAT .)
    OP_greater      reduce using rule 83 (primary_expression -> FLOAT .)
    OP_less         reduce using rule 83 (primary_expression -> FLOAT .)
    OP_greaterequal reduce using rule 83 (primary_expression -> FLOAT .)
    OP_lessequal    reduce using rule 83 (primary_expression -> FLOAT .)
    OP_equal        reduce using rule 83 (primary_expression -> FLOAT .)
    OP_notequal     reduce using rule 83 (primary_expression -> FLOAT .)
    SEMICOLON       reduce using rule 83 (primary_expression -> FLOAT .)
    COMMA           reduce using rule 83 (primary_expression -> FLOAT .)
    RPAREN          reduce using rule 83 (primary_expression -> FLOAT .)


state 28

    (84) primary_expression -> CHARACTER .

    OP_multiply     reduce using rule 84 (primary_expression -> CHARACTER .)
    OP_divide       reduce using rule 84 (primary_expression -> CHARACTER .)
    OP_mod          reduce using rule 84 (primary_expression -> CHARACTER .)
    OP_add          reduce using rule 84 (primary_expression -> CHARACTER .)
    OP_subtract     reduce using rule 84 (primary_expression -> CHARACTER .)
    OP_greater      reduce using rule 84 (primary_expression -> CHARACTER .)
    OP_less         reduce using rule 84 (primary_expression -> CHARACTER .)
    OP_greaterequal reduce using rule 84 (primary_expression -> CHARACTER .)
    OP_lessequal    reduce using rule 84 (primary_expression -> CHARACTER .)
    OP_equal        reduce using rule 84 (primary_expression -> CHARACTER .)
    OP_notequal     reduce using rule 84 (primary_expression -> CHARACTER .)
    SEMICOLON       reduce using rule 84 (primary_expression -> CHARACTER .)
    COMMA           reduce using rule 84 (primary_expression -> CHARACTER .)
    RPAREN          reduce using rule 84 (primary_expression -> CHARACTER .)


state 29

    (86) primary_expression -> id_expression .

    OP_multiply     reduce using rule 86 (primary_expression -> id_expression .)
    OP_divide       reduce using rule 86 (primary_expression -> id_expression .)
    OP_mod          reduce using rule 86 (primary_expression -> id_expression .)
    OP_add          reduce using rule 86 (primary_expression -> id_expression .)
    OP_subtract     reduce using rule 86 (primary_expression -> id_expression .)
    OP_greater      reduce using rule 86 (primary_expression -> id_expression .)
    OP_less         reduce using rule 86 (primary_expression -> id_expression .)
    OP_greaterequal reduce using rule 86 (primary_expression -> id_expression .)
    OP_lessequal    reduce using rule 86 (primary_expression -> id_expression .)
    OP_equal        reduce using rule 86 (primary_expression -> id_expression .)
    OP_notequal     reduce using rule 86 (primary_expression -> id_expression .)
    SEMICOLON       reduce using rule 86 (primary_expression -> id_expression .)
    COMMA           reduce using rule 86 (primary_expression -> id_expression .)
    RPAREN          reduce using rule 86 (primary_expression -> id_expression .)


state 30

    (7) compound_statement -> LBRACE statement_list . RBRACE end
    (8) statement_list -> statement_list . statement
    (1) statement -> . compound_statement
    (2) statement -> . declaration_statement
    (3) statement -> . selection_statement
    (4) statement -> . iteration_statement
    (5) statement -> . expression_statement
    (6) statement -> . SEMICOLON
    (7) compound_statement -> . LBRACE statement_list RBRACE end
    (10) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (18) selection_statement -> . KEY_if LPAREN expression save RPAREN statement
    (19) selection_statement -> . KEY_if LPAREN expression save RPAREN statement KEY_else save statement
    (20) iteration_statement -> . KEY_while label LPAREN expression save RPAREN statement end
    (21) iteration_statement -> . KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statement
    (27) expression_statement -> . expression SEMICOLON
    (11) type_specifier -> . KEY_int
    (12) type_specifier -> . KEY_char
    (13) type_specifier -> . KEY_float
    (14) type_specifier -> . KEY_string
    (28) expression -> . assignment_expression
    (29) expression -> . expression COMMA assignment_expression
    (30) assignment_expression -> . IDENTIFIER OP_assign INTEGER
    (31) assignment_expression -> . IDENTIFIER OP_multiply INTEGER
    (32) assignment_expression -> . IDENTIFIER OP_divide INTEGER
    (33) assignment_expression -> . IDENTIFIER OP_mod INTEGER
    (34) assignment_expression -> . IDENTIFIER OP_add INTEGER
    (35) assignment_expression -> . IDENTIFIER OP_subtract INTEGER
    (36) assignment_expression -> . IDENTIFIER OP_greater INTEGER
    (37) assignment_expression -> . IDENTIFIER OP_less INTEGER
    (38) assignment_expression -> . IDENTIFIER OP_greaterequal INTEGER
    (39) assignment_expression -> . IDENTIFIER OP_lessequal INTEGER
    (40) assignment_expression -> . IDENTIFIER OP_equal INTEGER
    (41) assignment_expression -> . IDENTIFIER OP_notequal INTEGER
    (42) assignment_expression -> . INTEGER OP_assign INTEGER
    (43) assignment_expression -> . INTEGER OP_multiply INTEGER
    (44) assignment_expression -> . INTEGER OP_divide INTEGER
    (45) assignment_expression -> . INTEGER OP_mod INTEGER
    (46) assignment_expression -> . INTEGER OP_add INTEGER
    (47) assignment_expression -> . INTEGER OP_subtract INTEGER
    (48) assignment_expression -> . INTEGER OP_greater INTEGER
    (49) assignment_expression -> . INTEGER OP_less INTEGER
    (50) assignment_expression -> . INTEGER OP_greaterequal INTEGER
    (51) assignment_expression -> . INTEGER OP_lessequal INTEGER
    (52) assignment_expression -> . INTEGER OP_equal INTEGER
    (53) assignment_expression -> . INTEGER OP_notequal INTEGER
    (54) assignment_expression -> . IDENTIFIER OP_assign IDENTIFIER
    (55) assignment_expression -> . IDENTIFIER OP_multiply IDENTIFIER
    (56) assignment_expression -> . IDENTIFIER OP_divide IDENTIFIER
    (57) assignment_expression -> . IDENTIFIER OP_mod IDENTIFIER
    (58) assignment_expression -> . IDENTIFIER OP_add IDENTIFIER
    (59) assignment_expression -> . IDENTIFIER OP_subtract IDENTIFIER
    (60) assignment_expression -> . IDENTIFIER OP_greater IDENTIFIER
    (61) assignment_expression -> . IDENTIFIER OP_less IDENTIFIER
    (62) assignment_expression -> . IDENTIFIER OP_greaterequal IDENTIFIER
    (63) assignment_expression -> . IDENTIFIER OP_lessequal IDENTIFIER
    (64) assignment_expression -> . IDENTIFIER OP_equal IDENTIFIER
    (65) assignment_expression -> . IDENTIFIER OP_notequal IDENTIFIER
    (66) assignment_expression -> . primary_expression
    (67) assignment_expression -> . OP_subtract primary_expression
    (68) assignment_expression -> . primary_expression OP_multiply primary_expression
    (69) assignment_expression -> . primary_expression OP_divide primary_expression
    (70) assignment_expression -> . primary_expression OP_mod primary_expression
    (71) assignment_expression -> . primary_expression OP_add primary_expression
    (72) assignment_expression -> . primary_expression OP_subtract primary_expression
    (73) assignment_expression -> . primary_expression OP_greater primary_expression
    (74) assignment_expression -> . primary_expression OP_less primary_expression
    (75) assignment_expression -> . primary_expression OP_greaterequal primary_expression
    (76) assignment_expression -> . primary_expression OP_lessequal primary_expression
    (77) assignment_expression -> . primary_expression OP_equal primary_expression
    (78) assignment_expression -> . primary_expression OP_notequal primary_expression
    (79) assignment_expression -> . IDENTIFIER OP_assign assignment_expression
    (80) assignment_expression -> . primary_expression OP_lessequal STRING
    (81) primary_expression -> . INTEGER
    (82) primary_expression -> . IDENTIFIER
    (83) primary_expression -> . FLOAT
    (84) primary_expression -> . CHARACTER
    (85) primary_expression -> . STRING
    (86) primary_expression -> . id_expression
    (87) id_expression -> . IDENTIFIER
    (88) id_expression -> . LPAREN expression RPAREN

    RBRACE          shift and go to state 79
    SEMICOLON       shift and go to state 9
    LBRACE          shift and go to state 10
    KEY_if          shift and go to state 12
    KEY_while       shift and go to state 15
    KEY_for         shift and go to state 16
    KEY_int         shift and go to state 17
    KEY_char        shift and go to state 18
    KEY_float       shift and go to state 19
    KEY_string      shift and go to state 20
    IDENTIFIER      shift and go to state 22
    INTEGER         shift and go to state 23
    OP_subtract     shift and go to state 24
    FLOAT           shift and go to state 27
    CHARACTER       shift and go to state 28
    STRING          shift and go to state 26
    LPAREN          shift and go to state 13

    statement                      shift and go to state 3
    compound_statement             shift and go to state 4
    declaration_statement          shift and go to state 5
    selection_statement            shift and go to state 6
    iteration_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    type_specifier                 shift and go to state 11
    expression                     shift and go to state 14
    assignment_expression          shift and go to state 21
    primary_expression             shift and go to state 25
    id_expression                  shift and go to state 29

state 31

    (10) declaration_statement -> type_specifier declaration_list . SEMICOLON

    SEMICOLON       shift and go to state 80


state 32

    (15) declaration_list -> single_var_declation . COMMA declaration_list
    (16) declaration_list -> single_var_declation .

    COMMA           shift and go to state 81
    SEMICOLON       reduce using rule 16 (declaration_list -> single_var_declation .)


state 33

    (17) single_var_declation -> IDENTIFIER .

    COMMA           reduce using rule 17 (single_var_declation -> IDENTIFIER .)
    SEMICOLON       reduce using rule 17 (single_var_declation -> IDENTIFIER .)


state 34

    (18) selection_statement -> KEY_if LPAREN . expression save RPAREN statement
    (19) selection_statement -> KEY_if LPAREN . expression save RPAREN statement KEY_else save statement
    (28) expression -> . assignment_expression
    (29) expression -> . expression COMMA assignment_expression
    (30) assignment_expression -> . IDENTIFIER OP_assign INTEGER
    (31) assignment_expression -> . IDENTIFIER OP_multiply INTEGER
    (32) assignment_expression -> . IDENTIFIER OP_divide INTEGER
    (33) assignment_expression -> . IDENTIFIER OP_mod INTEGER
    (34) assignment_expression -> . IDENTIFIER OP_add INTEGER
    (35) assignment_expression -> . IDENTIFIER OP_subtract INTEGER
    (36) assignment_expression -> . IDENTIFIER OP_greater INTEGER
    (37) assignment_expression -> . IDENTIFIER OP_less INTEGER
    (38) assignment_expression -> . IDENTIFIER OP_greaterequal INTEGER
    (39) assignment_expression -> . IDENTIFIER OP_lessequal INTEGER
    (40) assignment_expression -> . IDENTIFIER OP_equal INTEGER
    (41) assignment_expression -> . IDENTIFIER OP_notequal INTEGER
    (42) assignment_expression -> . INTEGER OP_assign INTEGER
    (43) assignment_expression -> . INTEGER OP_multiply INTEGER
    (44) assignment_expression -> . INTEGER OP_divide INTEGER
    (45) assignment_expression -> . INTEGER OP_mod INTEGER
    (46) assignment_expression -> . INTEGER OP_add INTEGER
    (47) assignment_expression -> . INTEGER OP_subtract INTEGER
    (48) assignment_expression -> . INTEGER OP_greater INTEGER
    (49) assignment_expression -> . INTEGER OP_less INTEGER
    (50) assignment_expression -> . INTEGER OP_greaterequal INTEGER
    (51) assignment_expression -> . INTEGER OP_lessequal INTEGER
    (52) assignment_expression -> . INTEGER OP_equal INTEGER
    (53) assignment_expression -> . INTEGER OP_notequal INTEGER
    (54) assignment_expression -> . IDENTIFIER OP_assign IDENTIFIER
    (55) assignment_expression -> . IDENTIFIER OP_multiply IDENTIFIER
    (56) assignment_expression -> . IDENTIFIER OP_divide IDENTIFIER
    (57) assignment_expression -> . IDENTIFIER OP_mod IDENTIFIER
    (58) assignment_expression -> . IDENTIFIER OP_add IDENTIFIER
    (59) assignment_expression -> . IDENTIFIER OP_subtract IDENTIFIER
    (60) assignment_expression -> . IDENTIFIER OP_greater IDENTIFIER
    (61) assignment_expression -> . IDENTIFIER OP_less IDENTIFIER
    (62) assignment_expression -> . IDENTIFIER OP_greaterequal IDENTIFIER
    (63) assignment_expression -> . IDENTIFIER OP_lessequal IDENTIFIER
    (64) assignment_expression -> . IDENTIFIER OP_equal IDENTIFIER
    (65) assignment_expression -> . IDENTIFIER OP_notequal IDENTIFIER
    (66) assignment_expression -> . primary_expression
    (67) assignment_expression -> . OP_subtract primary_expression
    (68) assignment_expression -> . primary_expression OP_multiply primary_expression
    (69) assignment_expression -> . primary_expression OP_divide primary_expression
    (70) assignment_expression -> . primary_expression OP_mod primary_expression
    (71) assignment_expression -> . primary_expression OP_add primary_expression
    (72) assignment_expression -> . primary_expression OP_subtract primary_expression
    (73) assignment_expression -> . primary_expression OP_greater primary_expression
    (74) assignment_expression -> . primary_expression OP_less primary_expression
    (75) assignment_expression -> . primary_expression OP_greaterequal primary_expression
    (76) assignment_expression -> . primary_expression OP_lessequal primary_expression
    (77) assignment_expression -> . primary_expression OP_equal primary_expression
    (78) assignment_expression -> . primary_expression OP_notequal primary_expression
    (79) assignment_expression -> . IDENTIFIER OP_assign assignment_expression
    (80) assignment_expression -> . primary_expression OP_lessequal STRING
    (81) primary_expression -> . INTEGER
    (82) primary_expression -> . IDENTIFIER
    (83) primary_expression -> . FLOAT
    (84) primary_expression -> . CHARACTER
    (85) primary_expression -> . STRING
    (86) primary_expression -> . id_expression
    (87) id_expression -> . IDENTIFIER
    (88) id_expression -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 22
    INTEGER         shift and go to state 23
    OP_subtract     shift and go to state 24
    FLOAT           shift and go to state 27
    CHARACTER       shift and go to state 28
    STRING          shift and go to state 26
    LPAREN          shift and go to state 13

    expression                     shift and go to state 82
    assignment_expression          shift and go to state 21
    primary_expression             shift and go to state 25
    id_expression                  shift and go to state 29

state 35

    (88) id_expression -> LPAREN expression . RPAREN
    (29) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 83
    COMMA           shift and go to state 37


state 36

    (27) expression_statement -> expression SEMICOLON .

    SEMICOLON       reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    LBRACE          reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    KEY_if          reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    KEY_while       reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    KEY_for         reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    KEY_int         reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    KEY_char        reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    KEY_float       reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    KEY_string      reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    INTEGER         reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    OP_subtract     reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    FLOAT           reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    CHARACTER       reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    STRING          reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    $end            reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    RBRACE          reduce using rule 27 (expression_statement -> expression SEMICOLON .)
    KEY_else        reduce using rule 27 (expression_statement -> expression SEMICOLON .)


state 37

    (29) expression -> expression COMMA . assignment_expression
    (30) assignment_expression -> . IDENTIFIER OP_assign INTEGER
    (31) assignment_expression -> . IDENTIFIER OP_multiply INTEGER
    (32) assignment_expression -> . IDENTIFIER OP_divide INTEGER
    (33) assignment_expression -> . IDENTIFIER OP_mod INTEGER
    (34) assignment_expression -> . IDENTIFIER OP_add INTEGER
    (35) assignment_expression -> . IDENTIFIER OP_subtract INTEGER
    (36) assignment_expression -> . IDENTIFIER OP_greater INTEGER
    (37) assignment_expression -> . IDENTIFIER OP_less INTEGER
    (38) assignment_expression -> . IDENTIFIER OP_greaterequal INTEGER
    (39) assignment_expression -> . IDENTIFIER OP_lessequal INTEGER
    (40) assignment_expression -> . IDENTIFIER OP_equal INTEGER
    (41) assignment_expression -> . IDENTIFIER OP_notequal INTEGER
    (42) assignment_expression -> . INTEGER OP_assign INTEGER
    (43) assignment_expression -> . INTEGER OP_multiply INTEGER
    (44) assignment_expression -> . INTEGER OP_divide INTEGER
    (45) assignment_expression -> . INTEGER OP_mod INTEGER
    (46) assignment_expression -> . INTEGER OP_add INTEGER
    (47) assignment_expression -> . INTEGER OP_subtract INTEGER
    (48) assignment_expression -> . INTEGER OP_greater INTEGER
    (49) assignment_expression -> . INTEGER OP_less INTEGER
    (50) assignment_expression -> . INTEGER OP_greaterequal INTEGER
    (51) assignment_expression -> . INTEGER OP_lessequal INTEGER
    (52) assignment_expression -> . INTEGER OP_equal INTEGER
    (53) assignment_expression -> . INTEGER OP_notequal INTEGER
    (54) assignment_expression -> . IDENTIFIER OP_assign IDENTIFIER
    (55) assignment_expression -> . IDENTIFIER OP_multiply IDENTIFIER
    (56) assignment_expression -> . IDENTIFIER OP_divide IDENTIFIER
    (57) assignment_expression -> . IDENTIFIER OP_mod IDENTIFIER
    (58) assignment_expression -> . IDENTIFIER OP_add IDENTIFIER
    (59) assignment_expression -> . IDENTIFIER OP_subtract IDENTIFIER
    (60) assignment_expression -> . IDENTIFIER OP_greater IDENTIFIER
    (61) assignment_expression -> . IDENTIFIER OP_less IDENTIFIER
    (62) assignment_expression -> . IDENTIFIER OP_greaterequal IDENTIFIER
    (63) assignment_expression -> . IDENTIFIER OP_lessequal IDENTIFIER
    (64) assignment_expression -> . IDENTIFIER OP_equal IDENTIFIER
    (65) assignment_expression -> . IDENTIFIER OP_notequal IDENTIFIER
    (66) assignment_expression -> . primary_expression
    (67) assignment_expression -> . OP_subtract primary_expression
    (68) assignment_expression -> . primary_expression OP_multiply primary_expression
    (69) assignment_expression -> . primary_expression OP_divide primary_expression
    (70) assignment_expression -> . primary_expression OP_mod primary_expression
    (71) assignment_expression -> . primary_expression OP_add primary_expression
    (72) assignment_expression -> . primary_expression OP_subtract primary_expression
    (73) assignment_expression -> . primary_expression OP_greater primary_expression
    (74) assignment_expression -> . primary_expression OP_less primary_expression
    (75) assignment_expression -> . primary_expression OP_greaterequal primary_expression
    (76) assignment_expression -> . primary_expression OP_lessequal primary_expression
    (77) assignment_expression -> . primary_expression OP_equal primary_expression
    (78) assignment_expression -> . primary_expression OP_notequal primary_expression
    (79) assignment_expression -> . IDENTIFIER OP_assign assignment_expression
    (80) assignment_expression -> . primary_expression OP_lessequal STRING
    (81) primary_expression -> . INTEGER
    (82) primary_expression -> . IDENTIFIER
    (83) primary_expression -> . FLOAT
    (84) primary_expression -> . CHARACTER
    (85) primary_expression -> . STRING
    (86) primary_expression -> . id_expression
    (87) id_expression -> . IDENTIFIER
    (88) id_expression -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 22
    INTEGER         shift and go to state 23
    OP_subtract     shift and go to state 24
    FLOAT           shift and go to state 27
    CHARACTER       shift and go to state 28
    STRING          shift and go to state 26
    LPAREN          shift and go to state 13

    assignment_expression          shift and go to state 84
    primary_expression             shift and go to state 25
    id_expression                  shift and go to state 29

state 38

    (20) iteration_statement -> KEY_while label . LPAREN expression save RPAREN statement end

    LPAREN          shift and go to state 85


state 39

    (22) label -> empty .

    LPAREN          reduce using rule 22 (label -> empty .)
    SEMICOLON       reduce using rule 22 (label -> empty .)


state 40

    (21) iteration_statement -> KEY_for LPAREN . optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statement
    (25) optexpr -> . assignment_expression
    (26) optexpr -> . empty
    (30) assignment_expression -> . IDENTIFIER OP_assign INTEGER
    (31) assignment_expression -> . IDENTIFIER OP_multiply INTEGER
    (32) assignment_expression -> . IDENTIFIER OP_divide INTEGER
    (33) assignment_expression -> . IDENTIFIER OP_mod INTEGER
    (34) assignment_expression -> . IDENTIFIER OP_add INTEGER
    (35) assignment_expression -> . IDENTIFIER OP_subtract INTEGER
    (36) assignment_expression -> . IDENTIFIER OP_greater INTEGER
    (37) assignment_expression -> . IDENTIFIER OP_less INTEGER
    (38) assignment_expression -> . IDENTIFIER OP_greaterequal INTEGER
    (39) assignment_expression -> . IDENTIFIER OP_lessequal INTEGER
    (40) assignment_expression -> . IDENTIFIER OP_equal INTEGER
    (41) assignment_expression -> . IDENTIFIER OP_notequal INTEGER
    (42) assignment_expression -> . INTEGER OP_assign INTEGER
    (43) assignment_expression -> . INTEGER OP_multiply INTEGER
    (44) assignment_expression -> . INTEGER OP_divide INTEGER
    (45) assignment_expression -> . INTEGER OP_mod INTEGER
    (46) assignment_expression -> . INTEGER OP_add INTEGER
    (47) assignment_expression -> . INTEGER OP_subtract INTEGER
    (48) assignment_expression -> . INTEGER OP_greater INTEGER
    (49) assignment_expression -> . INTEGER OP_less INTEGER
    (50) assignment_expression -> . INTEGER OP_greaterequal INTEGER
    (51) assignment_expression -> . INTEGER OP_lessequal INTEGER
    (52) assignment_expression -> . INTEGER OP_equal INTEGER
    (53) assignment_expression -> . INTEGER OP_notequal INTEGER
    (54) assignment_expression -> . IDENTIFIER OP_assign IDENTIFIER
    (55) assignment_expression -> . IDENTIFIER OP_multiply IDENTIFIER
    (56) assignment_expression -> . IDENTIFIER OP_divide IDENTIFIER
    (57) assignment_expression -> . IDENTIFIER OP_mod IDENTIFIER
    (58) assignment_expression -> . IDENTIFIER OP_add IDENTIFIER
    (59) assignment_expression -> . IDENTIFIER OP_subtract IDENTIFIER
    (60) assignment_expression -> . IDENTIFIER OP_greater IDENTIFIER
    (61) assignment_expression -> . IDENTIFIER OP_less IDENTIFIER
    (62) assignment_expression -> . IDENTIFIER OP_greaterequal IDENTIFIER
    (63) assignment_expression -> . IDENTIFIER OP_lessequal IDENTIFIER
    (64) assignment_expression -> . IDENTIFIER OP_equal IDENTIFIER
    (65) assignment_expression -> . IDENTIFIER OP_notequal IDENTIFIER
    (66) assignment_expression -> . primary_expression
    (67) assignment_expression -> . OP_subtract primary_expression
    (68) assignment_expression -> . primary_expression OP_multiply primary_expression
    (69) assignment_expression -> . primary_expression OP_divide primary_expression
    (70) assignment_expression -> . primary_expression OP_mod primary_expression
    (71) assignment_expression -> . primary_expression OP_add primary_expression
    (72) assignment_expression -> . primary_expression OP_subtract primary_expression
    (73) assignment_expression -> . primary_expression OP_greater primary_expression
    (74) assignment_expression -> . primary_expression OP_less primary_expression
    (75) assignment_expression -> . primary_expression OP_greaterequal primary_expression
    (76) assignment_expression -> . primary_expression OP_lessequal primary_expression
    (77) assignment_expression -> . primary_expression OP_equal primary_expression
    (78) assignment_expression -> . primary_expression OP_notequal primary_expression
    (79) assignment_expression -> . IDENTIFIER OP_assign assignment_expression
    (80) assignment_expression -> . primary_expression OP_lessequal STRING
    (89) empty -> .
    (81) primary_expression -> . INTEGER
    (82) primary_expression -> . IDENTIFIER
    (83) primary_expression -> . FLOAT
    (84) primary_expression -> . CHARACTER
    (85) primary_expression -> . STRING
    (86) primary_expression -> . id_expression
    (87) id_expression -> . IDENTIFIER
    (88) id_expression -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 22
    INTEGER         shift and go to state 23
    OP_subtract     shift and go to state 24
    SEMICOLON       reduce using rule 89 (empty -> .)
    FLOAT           shift and go to state 27
    CHARACTER       shift and go to state 28
    STRING          shift and go to state 26
    LPAREN          shift and go to state 13

    optexpr                        shift and go to state 86
    assignment_expression          shift and go to state 87
    empty                          shift and go to state 88
    primary_expression             shift and go to state 25
    id_expression                  shift and go to state 29

state 41

    (30) assignment_expression -> IDENTIFIER OP_assign . INTEGER
    (54) assignment_expression -> IDENTIFIER OP_assign . IDENTIFIER
    (79) assignment_expression -> IDENTIFIER OP_assign . assignment_expression
    (30) assignment_expression -> . IDENTIFIER OP_assign INTEGER
    (31) assignment_expression -> . IDENTIFIER OP_multiply INTEGER
    (32) assignment_expression -> . IDENTIFIER OP_divide INTEGER
    (33) assignment_expression -> . IDENTIFIER OP_mod INTEGER
    (34) assignment_expression -> . IDENTIFIER OP_add INTEGER
    (35) assignment_expression -> . IDENTIFIER OP_subtract INTEGER
    (36) assignment_expression -> . IDENTIFIER OP_greater INTEGER
    (37) assignment_expression -> . IDENTIFIER OP_less INTEGER
    (38) assignment_expression -> . IDENTIFIER OP_greaterequal INTEGER
    (39) assignment_expression -> . IDENTIFIER OP_lessequal INTEGER
    (40) assignment_expression -> . IDENTIFIER OP_equal INTEGER
    (41) assignment_expression -> . IDENTIFIER OP_notequal INTEGER
    (42) assignment_expression -> . INTEGER OP_assign INTEGER
    (43) assignment_expression -> . INTEGER OP_multiply INTEGER
    (44) assignment_expression -> . INTEGER OP_divide INTEGER
    (45) assignment_expression -> . INTEGER OP_mod INTEGER
    (46) assignment_expression -> . INTEGER OP_add INTEGER
    (47) assignment_expression -> . INTEGER OP_subtract INTEGER
    (48) assignment_expression -> . INTEGER OP_greater INTEGER
    (49) assignment_expression -> . INTEGER OP_less INTEGER
    (50) assignment_expression -> . INTEGER OP_greaterequal INTEGER
    (51) assignment_expression -> . INTEGER OP_lessequal INTEGER
    (52) assignment_expression -> . INTEGER OP_equal INTEGER
    (53) assignment_expression -> . INTEGER OP_notequal INTEGER
    (54) assignment_expression -> . IDENTIFIER OP_assign IDENTIFIER
    (55) assignment_expression -> . IDENTIFIER OP_multiply IDENTIFIER
    (56) assignment_expression -> . IDENTIFIER OP_divide IDENTIFIER
    (57) assignment_expression -> . IDENTIFIER OP_mod IDENTIFIER
    (58) assignment_expression -> . IDENTIFIER OP_add IDENTIFIER
    (59) assignment_expression -> . IDENTIFIER OP_subtract IDENTIFIER
    (60) assignment_expression -> . IDENTIFIER OP_greater IDENTIFIER
    (61) assignment_expression -> . IDENTIFIER OP_less IDENTIFIER
    (62) assignment_expression -> . IDENTIFIER OP_greaterequal IDENTIFIER
    (63) assignment_expression -> . IDENTIFIER OP_lessequal IDENTIFIER
    (64) assignment_expression -> . IDENTIFIER OP_equal IDENTIFIER
    (65) assignment_expression -> . IDENTIFIER OP_notequal IDENTIFIER
    (66) assignment_expression -> . primary_expression
    (67) assignment_expression -> . OP_subtract primary_expression
    (68) assignment_expression -> . primary_expression OP_multiply primary_expression
    (69) assignment_expression -> . primary_expression OP_divide primary_expression
    (70) assignment_expression -> . primary_expression OP_mod primary_expression
    (71) assignment_expression -> . primary_expression OP_add primary_expression
    (72) assignment_expression -> . primary_expression OP_subtract primary_expression
    (73) assignment_expression -> . primary_expression OP_greater primary_expression
    (74) assignment_expression -> . primary_expression OP_less primary_expression
    (75) assignment_expression -> . primary_expression OP_greaterequal primary_expression
    (76) assignment_expression -> . primary_expression OP_lessequal primary_expression
    (77) assignment_expression -> . primary_expression OP_equal primary_expression
    (78) assignment_expression -> . primary_expression OP_notequal primary_expression
    (79) assignment_expression -> . IDENTIFIER OP_assign assignment_expression
    (80) assignment_expression -> . primary_expression OP_lessequal STRING
    (81) primary_expression -> . INTEGER
    (82) primary_expression -> . IDENTIFIER
    (83) primary_expression -> . FLOAT
    (84) primary_expression -> . CHARACTER
    (85) primary_expression -> . STRING
    (86) primary_expression -> . id_expression
    (87) id_expression -> . IDENTIFIER
    (88) id_expression -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 90
    IDENTIFIER      shift and go to state 89
    OP_subtract     shift and go to state 24
    FLOAT           shift and go to state 27
    CHARACTER       shift and go to state 28
    STRING          shift and go to state 26
    LPAREN          shift and go to state 13

    assignment_expression          shift and go to state 91
    primary_expression             shift and go to state 25
    id_expression                  shift and go to state 29

state 42

    (31) assignment_expression -> IDENTIFIER OP_multiply . INTEGER
    (55) assignment_expression -> IDENTIFIER OP_multiply . IDENTIFIER

    INTEGER         shift and go to state 93
    IDENTIFIER      shift and go to state 92


state 43

    (32) assignment_expression -> IDENTIFIER OP_divide . INTEGER
    (56) assignment_expression -> IDENTIFIER OP_divide . IDENTIFIER

    INTEGER         shift and go to state 95
    IDENTIFIER      shift and go to state 94


state 44

    (33) assignment_expression -> IDENTIFIER OP_mod . INTEGER
    (57) assignment_expression -> IDENTIFIER OP_mod . IDENTIFIER

    INTEGER         shift and go to state 97
    IDENTIFIER      shift and go to state 96


state 45

    (34) assignment_expression -> IDENTIFIER OP_add . INTEGER
    (58) assignment_expression -> IDENTIFIER OP_add . IDENTIFIER

    INTEGER         shift and go to state 99
    IDENTIFIER      shift and go to state 98


state 46

    (35) assignment_expression -> IDENTIFIER OP_subtract . INTEGER
    (59) assignment_expression -> IDENTIFIER OP_subtract . IDENTIFIER

    INTEGER         shift and go to state 101
    IDENTIFIER      shift and go to state 100


state 47

    (36) assignment_expression -> IDENTIFIER OP_greater . INTEGER
    (60) assignment_expression -> IDENTIFIER OP_greater . IDENTIFIER

    INTEGER         shift and go to state 103
    IDENTIFIER      shift and go to state 102


state 48

    (37) assignment_expression -> IDENTIFIER OP_less . INTEGER
    (61) assignment_expression -> IDENTIFIER OP_less . IDENTIFIER

    INTEGER         shift and go to state 105
    IDENTIFIER      shift and go to state 104


state 49

    (38) assignment_expression -> IDENTIFIER OP_greaterequal . INTEGER
    (62) assignment_expression -> IDENTIFIER OP_greaterequal . IDENTIFIER

    INTEGER         shift and go to state 107
    IDENTIFIER      shift and go to state 106


state 50

    (39) assignment_expression -> IDENTIFIER OP_lessequal . INTEGER
    (63) assignment_expression -> IDENTIFIER OP_lessequal . IDENTIFIER

    INTEGER         shift and go to state 109
    IDENTIFIER      shift and go to state 108


state 51

    (40) assignment_expression -> IDENTIFIER OP_equal . INTEGER
    (64) assignment_expression -> IDENTIFIER OP_equal . IDENTIFIER

    INTEGER         shift and go to state 111
    IDENTIFIER      shift and go to state 110


state 52

    (41) assignment_expression -> IDENTIFIER OP_notequal . INTEGER
    (65) assignment_expression -> IDENTIFIER OP_notequal . IDENTIFIER

    INTEGER         shift and go to state 113
    IDENTIFIER      shift and go to state 112


state 53

    (42) assignment_expression -> INTEGER OP_assign . INTEGER

    INTEGER         shift and go to state 114


state 54

    (43) assignment_expression -> INTEGER OP_multiply . INTEGER

    INTEGER         shift and go to state 115


state 55

    (44) assignment_expression -> INTEGER OP_divide . INTEGER

    INTEGER         shift and go to state 116


state 56

    (45) assignment_expression -> INTEGER OP_mod . INTEGER

    INTEGER         shift and go to state 117


state 57

    (46) assignment_expression -> INTEGER OP_add . INTEGER

    INTEGER         shift and go to state 118


state 58

    (47) assignment_expression -> INTEGER OP_subtract . INTEGER

    INTEGER         shift and go to state 119


state 59

    (48) assignment_expression -> INTEGER OP_greater . INTEGER

    INTEGER         shift and go to state 120


state 60

    (49) assignment_expression -> INTEGER OP_less . INTEGER

    INTEGER         shift and go to state 121


state 61

    (50) assignment_expression -> INTEGER OP_greaterequal . INTEGER

    INTEGER         shift and go to state 122


state 62

    (51) assignment_expression -> INTEGER OP_lessequal . INTEGER

    INTEGER         shift and go to state 123


state 63

    (52) assignment_expression -> INTEGER OP_equal . INTEGER

    INTEGER         shift and go to state 124


state 64

    (53) assignment_expression -> INTEGER OP_notequal . INTEGER

    INTEGER         shift and go to state 125


state 65

    (67) assignment_expression -> OP_subtract primary_expression .

    SEMICOLON       reduce using rule 67 (assignment_expression -> OP_subtract primary_expression .)
    COMMA           reduce using rule 67 (assignment_expression -> OP_subtract primary_expression .)
    RPAREN          reduce using rule 67 (assignment_expression -> OP_subtract primary_expression .)


state 66

    (81) primary_expression -> INTEGER .

    SEMICOLON       reduce using rule 81 (primary_expression -> INTEGER .)
    COMMA           reduce using rule 81 (primary_expression -> INTEGER .)
    RPAREN          reduce using rule 81 (primary_expression -> INTEGER .)


state 67

    (82) primary_expression -> IDENTIFIER .
    (87) id_expression -> IDENTIFIER .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 82 (primary_expression -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 82 (primary_expression -> IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 82 (primary_expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 82 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 82 (primary_expression -> IDENTIFIER .)
    RPAREN          reduce using rule 82 (primary_expression -> IDENTIFIER .)

  ! SEMICOLON       [ reduce using rule 87 (id_expression -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 87 (id_expression -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 87 (id_expression -> IDENTIFIER .) ]


state 68

    (68) assignment_expression -> primary_expression OP_multiply . primary_expression
    (81) primary_expression -> . INTEGER
    (82) primary_expression -> . IDENTIFIER
    (83) primary_expression -> . FLOAT
    (84) primary_expression -> . CHARACTER
    (85) primary_expression -> . STRING
    (86) primary_expression -> . id_expression
    (87) id_expression -> . IDENTIFIER
    (88) id_expression -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 66
    IDENTIFIER      shift and go to state 67
    FLOAT           shift and go to state 27
    CHARACTER       shift and go to state 28
    STRING          shift and go to state 26
    LPAREN          shift and go to state 13

    primary_expression             shift and go to state 126
    id_expression                  shift and go to state 29

state 69

    (69) assignment_expression -> primary_expression OP_divide . primary_expression
    (81) primary_expression -> . INTEGER
    (82) primary_expression -> . IDENTIFIER
    (83) primary_expression -> . FLOAT
    (84) primary_expression -> . CHARACTER
    (85) primary_expression -> . STRING
    (86) primary_expression -> . id_expression
    (87) id_expression -> . IDENTIFIER
    (88) id_expression -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 66
    IDENTIFIER      shift and go to state 67
    FLOAT           shift and go to state 27
    CHARACTER       shift and go to state 28
    STRING          shift and go to state 26
    LPAREN          shift and go to state 13

    primary_expression             shift and go to state 127
    id_expression                  shift and go to state 29

state 70

    (70) assignment_expression -> primary_expression OP_mod . primary_expression
    (81) primary_expression -> . INTEGER
    (82) primary_expression -> . IDENTIFIER
    (83) primary_expression -> . FLOAT
    (84) primary_expression -> . CHARACTER
    (85) primary_expression -> . STRING
    (86) primary_expression -> . id_expression
    (87) id_expression -> . IDENTIFIER
    (88) id_expression -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 66
    IDENTIFIER      shift and go to state 67
    FLOAT           shift and go to state 27
    CHARACTER       shift and go to state 28
    STRING          shift and go to state 26
    LPAREN          shift and go to state 13

    primary_expression             shift and go to state 128
    id_expression                  shift and go to state 29

state 71

    (71) assignment_expression -> primary_expression OP_add . primary_expression
    (81) primary_expression -> . INTEGER
    (82) primary_expression -> . IDENTIFIER
    (83) primary_expression -> . FLOAT
    (84) primary_expression -> . CHARACTER
    (85) primary_expression -> . STRING
    (86) primary_expression -> . id_expression
    (87) id_expression -> . IDENTIFIER
    (88) id_expression -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 66
    IDENTIFIER      shift and go to state 67
    FLOAT           shift and go to state 27
    CHARACTER       shift and go to state 28
    STRING          shift and go to state 26
    LPAREN          shift and go to state 13

    primary_expression             shift and go to state 129
    id_expression                  shift and go to state 29

state 72

    (72) assignment_expression -> primary_expression OP_subtract . primary_expression
    (81) primary_expression -> . INTEGER
    (82) primary_expression -> . IDENTIFIER
    (83) primary_expression -> . FLOAT
    (84) primary_expression -> . CHARACTER
    (85) primary_expression -> . STRING
    (86) primary_expression -> . id_expression
    (87) id_expression -> . IDENTIFIER
    (88) id_expression -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 66
    IDENTIFIER      shift and go to state 67
    FLOAT           shift and go to state 27
    CHARACTER       shift and go to state 28
    STRING          shift and go to state 26
    LPAREN          shift and go to state 13

    primary_expression             shift and go to state 130
    id_expression                  shift and go to state 29

state 73

    (73) assignment_expression -> primary_expression OP_greater . primary_expression
    (81) primary_expression -> . INTEGER
    (82) primary_expression -> . IDENTIFIER
    (83) primary_expression -> . FLOAT
    (84) primary_expression -> . CHARACTER
    (85) primary_expression -> . STRING
    (86) primary_expression -> . id_expression
    (87) id_expression -> . IDENTIFIER
    (88) id_expression -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 66
    IDENTIFIER      shift and go to state 67
    FLOAT           shift and go to state 27
    CHARACTER       shift and go to state 28
    STRING          shift and go to state 26
    LPAREN          shift and go to state 13

    primary_expression             shift and go to state 131
    id_expression                  shift and go to state 29

state 74

    (74) assignment_expression -> primary_expression OP_less . primary_expression
    (81) primary_expression -> . INTEGER
    (82) primary_expression -> . IDENTIFIER
    (83) primary_expression -> . FLOAT
    (84) primary_expression -> . CHARACTER
    (85) primary_expression -> . STRING
    (86) primary_expression -> . id_expression
    (87) id_expression -> . IDENTIFIER
    (88) id_expression -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 66
    IDENTIFIER      shift and go to state 67
    FLOAT           shift and go to state 27
    CHARACTER       shift and go to state 28
    STRING          shift and go to state 26
    LPAREN          shift and go to state 13

    primary_expression             shift and go to state 132
    id_expression                  shift and go to state 29

state 75

    (75) assignment_expression -> primary_expression OP_greaterequal . primary_expression
    (81) primary_expression -> . INTEGER
    (82) primary_expression -> . IDENTIFIER
    (83) primary_expression -> . FLOAT
    (84) primary_expression -> . CHARACTER
    (85) primary_expression -> . STRING
    (86) primary_expression -> . id_expression
    (87) id_expression -> . IDENTIFIER
    (88) id_expression -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 66
    IDENTIFIER      shift and go to state 67
    FLOAT           shift and go to state 27
    CHARACTER       shift and go to state 28
    STRING          shift and go to state 26
    LPAREN          shift and go to state 13

    primary_expression             shift and go to state 133
    id_expression                  shift and go to state 29

state 76

    (76) assignment_expression -> primary_expression OP_lessequal . primary_expression
    (80) assignment_expression -> primary_expression OP_lessequal . STRING
    (81) primary_expression -> . INTEGER
    (82) primary_expression -> . IDENTIFIER
    (83) primary_expression -> . FLOAT
    (84) primary_expression -> . CHARACTER
    (85) primary_expression -> . STRING
    (86) primary_expression -> . id_expression
    (87) id_expression -> . IDENTIFIER
    (88) id_expression -> . LPAREN expression RPAREN

    STRING          shift and go to state 135
    INTEGER         shift and go to state 66
    IDENTIFIER      shift and go to state 67
    FLOAT           shift and go to state 27
    CHARACTER       shift and go to state 28
    LPAREN          shift and go to state 13

    primary_expression             shift and go to state 134
    id_expression                  shift and go to state 29

state 77

    (77) assignment_expression -> primary_expression OP_equal . primary_expression
    (81) primary_expression -> . INTEGER
    (82) primary_expression -> . IDENTIFIER
    (83) primary_expression -> . FLOAT
    (84) primary_expression -> . CHARACTER
    (85) primary_expression -> . STRING
    (86) primary_expression -> . id_expression
    (87) id_expression -> . IDENTIFIER
    (88) id_expression -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 66
    IDENTIFIER      shift and go to state 67
    FLOAT           shift and go to state 27
    CHARACTER       shift and go to state 28
    STRING          shift and go to state 26
    LPAREN          shift and go to state 13

    primary_expression             shift and go to state 136
    id_expression                  shift and go to state 29

state 78

    (78) assignment_expression -> primary_expression OP_notequal . primary_expression
    (81) primary_expression -> . INTEGER
    (82) primary_expression -> . IDENTIFIER
    (83) primary_expression -> . FLOAT
    (84) primary_expression -> . CHARACTER
    (85) primary_expression -> . STRING
    (86) primary_expression -> . id_expression
    (87) id_expression -> . IDENTIFIER
    (88) id_expression -> . LPAREN expression RPAREN

    INTEGER         shift and go to state 66
    IDENTIFIER      shift and go to state 67
    FLOAT           shift and go to state 27
    CHARACTER       shift and go to state 28
    STRING          shift and go to state 26
    LPAREN          shift and go to state 13

    primary_expression             shift and go to state 137
    id_expression                  shift and go to state 29

state 79

    (7) compound_statement -> LBRACE statement_list RBRACE . end
    (24) end -> . empty
    (89) empty -> .

    SEMICOLON       reduce using rule 89 (empty -> .)
    LBRACE          reduce using rule 89 (empty -> .)
    KEY_if          reduce using rule 89 (empty -> .)
    KEY_while       reduce using rule 89 (empty -> .)
    KEY_for         reduce using rule 89 (empty -> .)
    KEY_int         reduce using rule 89 (empty -> .)
    KEY_char        reduce using rule 89 (empty -> .)
    KEY_float       reduce using rule 89 (empty -> .)
    KEY_string      reduce using rule 89 (empty -> .)
    IDENTIFIER      reduce using rule 89 (empty -> .)
    INTEGER         reduce using rule 89 (empty -> .)
    OP_subtract     reduce using rule 89 (empty -> .)
    FLOAT           reduce using rule 89 (empty -> .)
    CHARACTER       reduce using rule 89 (empty -> .)
    STRING          reduce using rule 89 (empty -> .)
    LPAREN          reduce using rule 89 (empty -> .)
    $end            reduce using rule 89 (empty -> .)
    RBRACE          reduce using rule 89 (empty -> .)
    KEY_else        reduce using rule 89 (empty -> .)

    end                            shift and go to state 138
    empty                          shift and go to state 139

state 80

    (10) declaration_statement -> type_specifier declaration_list SEMICOLON .

    SEMICOLON       reduce using rule 10 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    LBRACE          reduce using rule 10 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    KEY_if          reduce using rule 10 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    KEY_while       reduce using rule 10 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    KEY_for         reduce using rule 10 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    KEY_int         reduce using rule 10 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    KEY_char        reduce using rule 10 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    KEY_float       reduce using rule 10 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    KEY_string      reduce using rule 10 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    IDENTIFIER      reduce using rule 10 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    INTEGER         reduce using rule 10 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    OP_subtract     reduce using rule 10 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    FLOAT           reduce using rule 10 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    CHARACTER       reduce using rule 10 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    STRING          reduce using rule 10 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    LPAREN          reduce using rule 10 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    $end            reduce using rule 10 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    RBRACE          reduce using rule 10 (declaration_statement -> type_specifier declaration_list SEMICOLON .)
    KEY_else        reduce using rule 10 (declaration_statement -> type_specifier declaration_list SEMICOLON .)


state 81

    (15) declaration_list -> single_var_declation COMMA . declaration_list
    (15) declaration_list -> . single_var_declation COMMA declaration_list
    (16) declaration_list -> . single_var_declation
    (17) single_var_declation -> . IDENTIFIER

    IDENTIFIER      shift and go to state 33

    single_var_declation           shift and go to state 32
    declaration_list               shift and go to state 140

state 82

    (18) selection_statement -> KEY_if LPAREN expression . save RPAREN statement
    (19) selection_statement -> KEY_if LPAREN expression . save RPAREN statement KEY_else save statement
    (29) expression -> expression . COMMA assignment_expression
    (23) save -> . empty
    (89) empty -> .

    COMMA           shift and go to state 37
    RPAREN          reduce using rule 89 (empty -> .)

    save                           shift and go to state 141
    empty                          shift and go to state 142

state 83

    (88) id_expression -> LPAREN expression RPAREN .

    OP_multiply     reduce using rule 88 (id_expression -> LPAREN expression RPAREN .)
    OP_divide       reduce using rule 88 (id_expression -> LPAREN expression RPAREN .)
    OP_mod          reduce using rule 88 (id_expression -> LPAREN expression RPAREN .)
    OP_add          reduce using rule 88 (id_expression -> LPAREN expression RPAREN .)
    OP_subtract     reduce using rule 88 (id_expression -> LPAREN expression RPAREN .)
    OP_greater      reduce using rule 88 (id_expression -> LPAREN expression RPAREN .)
    OP_less         reduce using rule 88 (id_expression -> LPAREN expression RPAREN .)
    OP_greaterequal reduce using rule 88 (id_expression -> LPAREN expression RPAREN .)
    OP_lessequal    reduce using rule 88 (id_expression -> LPAREN expression RPAREN .)
    OP_equal        reduce using rule 88 (id_expression -> LPAREN expression RPAREN .)
    OP_notequal     reduce using rule 88 (id_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 88 (id_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 88 (id_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 88 (id_expression -> LPAREN expression RPAREN .)


state 84

    (29) expression -> expression COMMA assignment_expression .

    SEMICOLON       reduce using rule 29 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 29 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 29 (expression -> expression COMMA assignment_expression .)


state 85

    (20) iteration_statement -> KEY_while label LPAREN . expression save RPAREN statement end
    (28) expression -> . assignment_expression
    (29) expression -> . expression COMMA assignment_expression
    (30) assignment_expression -> . IDENTIFIER OP_assign INTEGER
    (31) assignment_expression -> . IDENTIFIER OP_multiply INTEGER
    (32) assignment_expression -> . IDENTIFIER OP_divide INTEGER
    (33) assignment_expression -> . IDENTIFIER OP_mod INTEGER
    (34) assignment_expression -> . IDENTIFIER OP_add INTEGER
    (35) assignment_expression -> . IDENTIFIER OP_subtract INTEGER
    (36) assignment_expression -> . IDENTIFIER OP_greater INTEGER
    (37) assignment_expression -> . IDENTIFIER OP_less INTEGER
    (38) assignment_expression -> . IDENTIFIER OP_greaterequal INTEGER
    (39) assignment_expression -> . IDENTIFIER OP_lessequal INTEGER
    (40) assignment_expression -> . IDENTIFIER OP_equal INTEGER
    (41) assignment_expression -> . IDENTIFIER OP_notequal INTEGER
    (42) assignment_expression -> . INTEGER OP_assign INTEGER
    (43) assignment_expression -> . INTEGER OP_multiply INTEGER
    (44) assignment_expression -> . INTEGER OP_divide INTEGER
    (45) assignment_expression -> . INTEGER OP_mod INTEGER
    (46) assignment_expression -> . INTEGER OP_add INTEGER
    (47) assignment_expression -> . INTEGER OP_subtract INTEGER
    (48) assignment_expression -> . INTEGER OP_greater INTEGER
    (49) assignment_expression -> . INTEGER OP_less INTEGER
    (50) assignment_expression -> . INTEGER OP_greaterequal INTEGER
    (51) assignment_expression -> . INTEGER OP_lessequal INTEGER
    (52) assignment_expression -> . INTEGER OP_equal INTEGER
    (53) assignment_expression -> . INTEGER OP_notequal INTEGER
    (54) assignment_expression -> . IDENTIFIER OP_assign IDENTIFIER
    (55) assignment_expression -> . IDENTIFIER OP_multiply IDENTIFIER
    (56) assignment_expression -> . IDENTIFIER OP_divide IDENTIFIER
    (57) assignment_expression -> . IDENTIFIER OP_mod IDENTIFIER
    (58) assignment_expression -> . IDENTIFIER OP_add IDENTIFIER
    (59) assignment_expression -> . IDENTIFIER OP_subtract IDENTIFIER
    (60) assignment_expression -> . IDENTIFIER OP_greater IDENTIFIER
    (61) assignment_expression -> . IDENTIFIER OP_less IDENTIFIER
    (62) assignment_expression -> . IDENTIFIER OP_greaterequal IDENTIFIER
    (63) assignment_expression -> . IDENTIFIER OP_lessequal IDENTIFIER
    (64) assignment_expression -> . IDENTIFIER OP_equal IDENTIFIER
    (65) assignment_expression -> . IDENTIFIER OP_notequal IDENTIFIER
    (66) assignment_expression -> . primary_expression
    (67) assignment_expression -> . OP_subtract primary_expression
    (68) assignment_expression -> . primary_expression OP_multiply primary_expression
    (69) assignment_expression -> . primary_expression OP_divide primary_expression
    (70) assignment_expression -> . primary_expression OP_mod primary_expression
    (71) assignment_expression -> . primary_expression OP_add primary_expression
    (72) assignment_expression -> . primary_expression OP_subtract primary_expression
    (73) assignment_expression -> . primary_expression OP_greater primary_expression
    (74) assignment_expression -> . primary_expression OP_less primary_expression
    (75) assignment_expression -> . primary_expression OP_greaterequal primary_expression
    (76) assignment_expression -> . primary_expression OP_lessequal primary_expression
    (77) assignment_expression -> . primary_expression OP_equal primary_expression
    (78) assignment_expression -> . primary_expression OP_notequal primary_expression
    (79) assignment_expression -> . IDENTIFIER OP_assign assignment_expression
    (80) assignment_expression -> . primary_expression OP_lessequal STRING
    (81) primary_expression -> . INTEGER
    (82) primary_expression -> . IDENTIFIER
    (83) primary_expression -> . FLOAT
    (84) primary_expression -> . CHARACTER
    (85) primary_expression -> . STRING
    (86) primary_expression -> . id_expression
    (87) id_expression -> . IDENTIFIER
    (88) id_expression -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 22
    INTEGER         shift and go to state 23
    OP_subtract     shift and go to state 24
    FLOAT           shift and go to state 27
    CHARACTER       shift and go to state 28
    STRING          shift and go to state 26
    LPAREN          shift and go to state 13

    expression                     shift and go to state 143
    assignment_expression          shift and go to state 21
    primary_expression             shift and go to state 25
    id_expression                  shift and go to state 29

state 86

    (21) iteration_statement -> KEY_for LPAREN optexpr . label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statement
    (22) label -> . empty
    (89) empty -> .

    SEMICOLON       reduce using rule 89 (empty -> .)

    label                          shift and go to state 144
    empty                          shift and go to state 39

state 87

    (25) optexpr -> assignment_expression .

    SEMICOLON       reduce using rule 25 (optexpr -> assignment_expression .)
    RPAREN          reduce using rule 25 (optexpr -> assignment_expression .)


state 88

    (26) optexpr -> empty .

    SEMICOLON       reduce using rule 26 (optexpr -> empty .)
    RPAREN          reduce using rule 26 (optexpr -> empty .)


state 89

    (54) assignment_expression -> IDENTIFIER OP_assign IDENTIFIER .
    (30) assignment_expression -> IDENTIFIER . OP_assign INTEGER
    (31) assignment_expression -> IDENTIFIER . OP_multiply INTEGER
    (32) assignment_expression -> IDENTIFIER . OP_divide INTEGER
    (33) assignment_expression -> IDENTIFIER . OP_mod INTEGER
    (34) assignment_expression -> IDENTIFIER . OP_add INTEGER
    (35) assignment_expression -> IDENTIFIER . OP_subtract INTEGER
    (36) assignment_expression -> IDENTIFIER . OP_greater INTEGER
    (37) assignment_expression -> IDENTIFIER . OP_less INTEGER
    (38) assignment_expression -> IDENTIFIER . OP_greaterequal INTEGER
    (39) assignment_expression -> IDENTIFIER . OP_lessequal INTEGER
    (40) assignment_expression -> IDENTIFIER . OP_equal INTEGER
    (41) assignment_expression -> IDENTIFIER . OP_notequal INTEGER
    (54) assignment_expression -> IDENTIFIER . OP_assign IDENTIFIER
    (55) assignment_expression -> IDENTIFIER . OP_multiply IDENTIFIER
    (56) assignment_expression -> IDENTIFIER . OP_divide IDENTIFIER
    (57) assignment_expression -> IDENTIFIER . OP_mod IDENTIFIER
    (58) assignment_expression -> IDENTIFIER . OP_add IDENTIFIER
    (59) assignment_expression -> IDENTIFIER . OP_subtract IDENTIFIER
    (60) assignment_expression -> IDENTIFIER . OP_greater IDENTIFIER
    (61) assignment_expression -> IDENTIFIER . OP_less IDENTIFIER
    (62) assignment_expression -> IDENTIFIER . OP_greaterequal IDENTIFIER
    (63) assignment_expression -> IDENTIFIER . OP_lessequal IDENTIFIER
    (64) assignment_expression -> IDENTIFIER . OP_equal IDENTIFIER
    (65) assignment_expression -> IDENTIFIER . OP_notequal IDENTIFIER
    (79) assignment_expression -> IDENTIFIER . OP_assign assignment_expression
    (82) primary_expression -> IDENTIFIER .
    (87) id_expression -> IDENTIFIER .

  ! shift/reduce conflict for OP_multiply resolved as shift
  ! shift/reduce conflict for OP_divide resolved as shift
  ! shift/reduce conflict for OP_mod resolved as shift
  ! shift/reduce conflict for OP_add resolved as shift
  ! shift/reduce conflict for OP_subtract resolved as shift
  ! shift/reduce conflict for OP_greater resolved as shift
  ! shift/reduce conflict for OP_less resolved as shift
  ! shift/reduce conflict for OP_greaterequal resolved as shift
  ! shift/reduce conflict for OP_lessequal resolved as shift
  ! shift/reduce conflict for OP_equal resolved as shift
  ! shift/reduce conflict for OP_notequal resolved as shift
  ! reduce/reduce conflict for SEMICOLON resolved using rule 54 (assignment_expression -> IDENTIFIER OP_assign IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 54 (assignment_expression -> IDENTIFIER OP_assign IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 54 (assignment_expression -> IDENTIFIER OP_assign IDENTIFIER .)
  ! shift/reduce conflict for OP_multiply resolved as shift
  ! shift/reduce conflict for OP_divide resolved as shift
  ! shift/reduce conflict for OP_mod resolved as shift
  ! shift/reduce conflict for OP_add resolved as shift
  ! shift/reduce conflict for OP_subtract resolved as shift
  ! shift/reduce conflict for OP_greater resolved as shift
  ! shift/reduce conflict for OP_less resolved as shift
  ! shift/reduce conflict for OP_greaterequal resolved as shift
  ! shift/reduce conflict for OP_lessequal resolved as shift
  ! shift/reduce conflict for OP_equal resolved as shift
  ! shift/reduce conflict for OP_notequal resolved as shift
  ! reduce/reduce conflict for SEMICOLON resolved using rule 54 (assignment_expression -> IDENTIFIER OP_assign IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 54 (assignment_expression -> IDENTIFIER OP_assign IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 54 (assignment_expression -> IDENTIFIER OP_assign IDENTIFIER .)
    SEMICOLON       reduce using rule 54 (assignment_expression -> IDENTIFIER OP_assign IDENTIFIER .)
    COMMA           reduce using rule 54 (assignment_expression -> IDENTIFIER OP_assign IDENTIFIER .)
    RPAREN          reduce using rule 54 (assignment_expression -> IDENTIFIER OP_assign IDENTIFIER .)
    OP_assign       shift and go to state 41
    OP_multiply     shift and go to state 42
    OP_divide       shift and go to state 43
    OP_mod          shift and go to state 44
    OP_add          shift and go to state 45
    OP_subtract     shift and go to state 46
    OP_greater      shift and go to state 47
    OP_less         shift and go to state 48
    OP_greaterequal shift and go to state 49
    OP_lessequal    shift and go to state 50
    OP_equal        shift and go to state 51
    OP_notequal     shift and go to state 52

  ! OP_multiply     [ reduce using rule 82 (primary_expression -> IDENTIFIER .) ]
  ! OP_divide       [ reduce using rule 82 (primary_expression -> IDENTIFIER .) ]
  ! OP_mod          [ reduce using rule 82 (primary_expression -> IDENTIFIER .) ]
  ! OP_add          [ reduce using rule 82 (primary_expression -> IDENTIFIER .) ]
  ! OP_subtract     [ reduce using rule 82 (primary_expression -> IDENTIFIER .) ]
  ! OP_greater      [ reduce using rule 82 (primary_expression -> IDENTIFIER .) ]
  ! OP_less         [ reduce using rule 82 (primary_expression -> IDENTIFIER .) ]
  ! OP_greaterequal [ reduce using rule 82 (primary_expression -> IDENTIFIER .) ]
  ! OP_lessequal    [ reduce using rule 82 (primary_expression -> IDENTIFIER .) ]
  ! OP_equal        [ reduce using rule 82 (primary_expression -> IDENTIFIER .) ]
  ! OP_notequal     [ reduce using rule 82 (primary_expression -> IDENTIFIER .) ]
  ! SEMICOLON       [ reduce using rule 82 (primary_expression -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 82 (primary_expression -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 82 (primary_expression -> IDENTIFIER .) ]
  ! OP_multiply     [ reduce using rule 87 (id_expression -> IDENTIFIER .) ]
  ! OP_divide       [ reduce using rule 87 (id_expression -> IDENTIFIER .) ]
  ! OP_mod          [ reduce using rule 87 (id_expression -> IDENTIFIER .) ]
  ! OP_add          [ reduce using rule 87 (id_expression -> IDENTIFIER .) ]
  ! OP_subtract     [ reduce using rule 87 (id_expression -> IDENTIFIER .) ]
  ! OP_greater      [ reduce using rule 87 (id_expression -> IDENTIFIER .) ]
  ! OP_less         [ reduce using rule 87 (id_expression -> IDENTIFIER .) ]
  ! OP_greaterequal [ reduce using rule 87 (id_expression -> IDENTIFIER .) ]
  ! OP_lessequal    [ reduce using rule 87 (id_expression -> IDENTIFIER .) ]
  ! OP_equal        [ reduce using rule 87 (id_expression -> IDENTIFIER .) ]
  ! OP_notequal     [ reduce using rule 87 (id_expression -> IDENTIFIER .) ]
  ! SEMICOLON       [ reduce using rule 87 (id_expression -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 87 (id_expression -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 87 (id_expression -> IDENTIFIER .) ]


state 90

    (30) assignment_expression -> IDENTIFIER OP_assign INTEGER .
    (42) assignment_expression -> INTEGER . OP_assign INTEGER
    (43) assignment_expression -> INTEGER . OP_multiply INTEGER
    (44) assignment_expression -> INTEGER . OP_divide INTEGER
    (45) assignment_expression -> INTEGER . OP_mod INTEGER
    (46) assignment_expression -> INTEGER . OP_add INTEGER
    (47) assignment_expression -> INTEGER . OP_subtract INTEGER
    (48) assignment_expression -> INTEGER . OP_greater INTEGER
    (49) assignment_expression -> INTEGER . OP_less INTEGER
    (50) assignment_expression -> INTEGER . OP_greaterequal INTEGER
    (51) assignment_expression -> INTEGER . OP_lessequal INTEGER
    (52) assignment_expression -> INTEGER . OP_equal INTEGER
    (53) assignment_expression -> INTEGER . OP_notequal INTEGER
    (81) primary_expression -> INTEGER .

  ! shift/reduce conflict for OP_multiply resolved as shift
  ! shift/reduce conflict for OP_divide resolved as shift
  ! shift/reduce conflict for OP_mod resolved as shift
  ! shift/reduce conflict for OP_add resolved as shift
  ! shift/reduce conflict for OP_subtract resolved as shift
  ! shift/reduce conflict for OP_greater resolved as shift
  ! shift/reduce conflict for OP_less resolved as shift
  ! shift/reduce conflict for OP_greaterequal resolved as shift
  ! shift/reduce conflict for OP_lessequal resolved as shift
  ! shift/reduce conflict for OP_equal resolved as shift
  ! shift/reduce conflict for OP_notequal resolved as shift
  ! reduce/reduce conflict for SEMICOLON resolved using rule 30 (assignment_expression -> IDENTIFIER OP_assign INTEGER .)
  ! reduce/reduce conflict for COMMA resolved using rule 30 (assignment_expression -> IDENTIFIER OP_assign INTEGER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 30 (assignment_expression -> IDENTIFIER OP_assign INTEGER .)
    SEMICOLON       reduce using rule 30 (assignment_expression -> IDENTIFIER OP_assign INTEGER .)
    COMMA           reduce using rule 30 (assignment_expression -> IDENTIFIER OP_assign INTEGER .)
    RPAREN          reduce using rule 30 (assignment_expression -> IDENTIFIER OP_assign INTEGER .)
    OP_assign       shift and go to state 53
    OP_multiply     shift and go to state 54
    OP_divide       shift and go to state 55
    OP_mod          shift and go to state 56
    OP_add          shift and go to state 57
    OP_subtract     shift and go to state 58
    OP_greater      shift and go to state 59
    OP_less         shift and go to state 60
    OP_greaterequal shift and go to state 61
    OP_lessequal    shift and go to state 62
    OP_equal        shift and go to state 63
    OP_notequal     shift and go to state 64

  ! OP_multiply     [ reduce using rule 81 (primary_expression -> INTEGER .) ]
  ! OP_divide       [ reduce using rule 81 (primary_expression -> INTEGER .) ]
  ! OP_mod          [ reduce using rule 81 (primary_expression -> INTEGER .) ]
  ! OP_add          [ reduce using rule 81 (primary_expression -> INTEGER .) ]
  ! OP_subtract     [ reduce using rule 81 (primary_expression -> INTEGER .) ]
  ! OP_greater      [ reduce using rule 81 (primary_expression -> INTEGER .) ]
  ! OP_less         [ reduce using rule 81 (primary_expression -> INTEGER .) ]
  ! OP_greaterequal [ reduce using rule 81 (primary_expression -> INTEGER .) ]
  ! OP_lessequal    [ reduce using rule 81 (primary_expression -> INTEGER .) ]
  ! OP_equal        [ reduce using rule 81 (primary_expression -> INTEGER .) ]
  ! OP_notequal     [ reduce using rule 81 (primary_expression -> INTEGER .) ]
  ! SEMICOLON       [ reduce using rule 81 (primary_expression -> INTEGER .) ]
  ! COMMA           [ reduce using rule 81 (primary_expression -> INTEGER .) ]
  ! RPAREN          [ reduce using rule 81 (primary_expression -> INTEGER .) ]


state 91

    (79) assignment_expression -> IDENTIFIER OP_assign assignment_expression .

    SEMICOLON       reduce using rule 79 (assignment_expression -> IDENTIFIER OP_assign assignment_expression .)
    COMMA           reduce using rule 79 (assignment_expression -> IDENTIFIER OP_assign assignment_expression .)
    RPAREN          reduce using rule 79 (assignment_expression -> IDENTIFIER OP_assign assignment_expression .)


state 92

    (55) assignment_expression -> IDENTIFIER OP_multiply IDENTIFIER .

    SEMICOLON       reduce using rule 55 (assignment_expression -> IDENTIFIER OP_multiply IDENTIFIER .)
    COMMA           reduce using rule 55 (assignment_expression -> IDENTIFIER OP_multiply IDENTIFIER .)
    RPAREN          reduce using rule 55 (assignment_expression -> IDENTIFIER OP_multiply IDENTIFIER .)


state 93

    (31) assignment_expression -> IDENTIFIER OP_multiply INTEGER .

    SEMICOLON       reduce using rule 31 (assignment_expression -> IDENTIFIER OP_multiply INTEGER .)
    COMMA           reduce using rule 31 (assignment_expression -> IDENTIFIER OP_multiply INTEGER .)
    RPAREN          reduce using rule 31 (assignment_expression -> IDENTIFIER OP_multiply INTEGER .)


state 94

    (56) assignment_expression -> IDENTIFIER OP_divide IDENTIFIER .

    SEMICOLON       reduce using rule 56 (assignment_expression -> IDENTIFIER OP_divide IDENTIFIER .)
    COMMA           reduce using rule 56 (assignment_expression -> IDENTIFIER OP_divide IDENTIFIER .)
    RPAREN          reduce using rule 56 (assignment_expression -> IDENTIFIER OP_divide IDENTIFIER .)


state 95

    (32) assignment_expression -> IDENTIFIER OP_divide INTEGER .

    SEMICOLON       reduce using rule 32 (assignment_expression -> IDENTIFIER OP_divide INTEGER .)
    COMMA           reduce using rule 32 (assignment_expression -> IDENTIFIER OP_divide INTEGER .)
    RPAREN          reduce using rule 32 (assignment_expression -> IDENTIFIER OP_divide INTEGER .)


state 96

    (57) assignment_expression -> IDENTIFIER OP_mod IDENTIFIER .

    SEMICOLON       reduce using rule 57 (assignment_expression -> IDENTIFIER OP_mod IDENTIFIER .)
    COMMA           reduce using rule 57 (assignment_expression -> IDENTIFIER OP_mod IDENTIFIER .)
    RPAREN          reduce using rule 57 (assignment_expression -> IDENTIFIER OP_mod IDENTIFIER .)


state 97

    (33) assignment_expression -> IDENTIFIER OP_mod INTEGER .

    SEMICOLON       reduce using rule 33 (assignment_expression -> IDENTIFIER OP_mod INTEGER .)
    COMMA           reduce using rule 33 (assignment_expression -> IDENTIFIER OP_mod INTEGER .)
    RPAREN          reduce using rule 33 (assignment_expression -> IDENTIFIER OP_mod INTEGER .)


state 98

    (58) assignment_expression -> IDENTIFIER OP_add IDENTIFIER .

    SEMICOLON       reduce using rule 58 (assignment_expression -> IDENTIFIER OP_add IDENTIFIER .)
    COMMA           reduce using rule 58 (assignment_expression -> IDENTIFIER OP_add IDENTIFIER .)
    RPAREN          reduce using rule 58 (assignment_expression -> IDENTIFIER OP_add IDENTIFIER .)


state 99

    (34) assignment_expression -> IDENTIFIER OP_add INTEGER .

    SEMICOLON       reduce using rule 34 (assignment_expression -> IDENTIFIER OP_add INTEGER .)
    COMMA           reduce using rule 34 (assignment_expression -> IDENTIFIER OP_add INTEGER .)
    RPAREN          reduce using rule 34 (assignment_expression -> IDENTIFIER OP_add INTEGER .)


state 100

    (59) assignment_expression -> IDENTIFIER OP_subtract IDENTIFIER .

    SEMICOLON       reduce using rule 59 (assignment_expression -> IDENTIFIER OP_subtract IDENTIFIER .)
    COMMA           reduce using rule 59 (assignment_expression -> IDENTIFIER OP_subtract IDENTIFIER .)
    RPAREN          reduce using rule 59 (assignment_expression -> IDENTIFIER OP_subtract IDENTIFIER .)


state 101

    (35) assignment_expression -> IDENTIFIER OP_subtract INTEGER .

    SEMICOLON       reduce using rule 35 (assignment_expression -> IDENTIFIER OP_subtract INTEGER .)
    COMMA           reduce using rule 35 (assignment_expression -> IDENTIFIER OP_subtract INTEGER .)
    RPAREN          reduce using rule 35 (assignment_expression -> IDENTIFIER OP_subtract INTEGER .)


state 102

    (60) assignment_expression -> IDENTIFIER OP_greater IDENTIFIER .

    SEMICOLON       reduce using rule 60 (assignment_expression -> IDENTIFIER OP_greater IDENTIFIER .)
    COMMA           reduce using rule 60 (assignment_expression -> IDENTIFIER OP_greater IDENTIFIER .)
    RPAREN          reduce using rule 60 (assignment_expression -> IDENTIFIER OP_greater IDENTIFIER .)


state 103

    (36) assignment_expression -> IDENTIFIER OP_greater INTEGER .

    SEMICOLON       reduce using rule 36 (assignment_expression -> IDENTIFIER OP_greater INTEGER .)
    COMMA           reduce using rule 36 (assignment_expression -> IDENTIFIER OP_greater INTEGER .)
    RPAREN          reduce using rule 36 (assignment_expression -> IDENTIFIER OP_greater INTEGER .)


state 104

    (61) assignment_expression -> IDENTIFIER OP_less IDENTIFIER .

    SEMICOLON       reduce using rule 61 (assignment_expression -> IDENTIFIER OP_less IDENTIFIER .)
    COMMA           reduce using rule 61 (assignment_expression -> IDENTIFIER OP_less IDENTIFIER .)
    RPAREN          reduce using rule 61 (assignment_expression -> IDENTIFIER OP_less IDENTIFIER .)


state 105

    (37) assignment_expression -> IDENTIFIER OP_less INTEGER .

    SEMICOLON       reduce using rule 37 (assignment_expression -> IDENTIFIER OP_less INTEGER .)
    COMMA           reduce using rule 37 (assignment_expression -> IDENTIFIER OP_less INTEGER .)
    RPAREN          reduce using rule 37 (assignment_expression -> IDENTIFIER OP_less INTEGER .)


state 106

    (62) assignment_expression -> IDENTIFIER OP_greaterequal IDENTIFIER .

    SEMICOLON       reduce using rule 62 (assignment_expression -> IDENTIFIER OP_greaterequal IDENTIFIER .)
    COMMA           reduce using rule 62 (assignment_expression -> IDENTIFIER OP_greaterequal IDENTIFIER .)
    RPAREN          reduce using rule 62 (assignment_expression -> IDENTIFIER OP_greaterequal IDENTIFIER .)


state 107

    (38) assignment_expression -> IDENTIFIER OP_greaterequal INTEGER .

    SEMICOLON       reduce using rule 38 (assignment_expression -> IDENTIFIER OP_greaterequal INTEGER .)
    COMMA           reduce using rule 38 (assignment_expression -> IDENTIFIER OP_greaterequal INTEGER .)
    RPAREN          reduce using rule 38 (assignment_expression -> IDENTIFIER OP_greaterequal INTEGER .)


state 108

    (63) assignment_expression -> IDENTIFIER OP_lessequal IDENTIFIER .

    SEMICOLON       reduce using rule 63 (assignment_expression -> IDENTIFIER OP_lessequal IDENTIFIER .)
    COMMA           reduce using rule 63 (assignment_expression -> IDENTIFIER OP_lessequal IDENTIFIER .)
    RPAREN          reduce using rule 63 (assignment_expression -> IDENTIFIER OP_lessequal IDENTIFIER .)


state 109

    (39) assignment_expression -> IDENTIFIER OP_lessequal INTEGER .

    SEMICOLON       reduce using rule 39 (assignment_expression -> IDENTIFIER OP_lessequal INTEGER .)
    COMMA           reduce using rule 39 (assignment_expression -> IDENTIFIER OP_lessequal INTEGER .)
    RPAREN          reduce using rule 39 (assignment_expression -> IDENTIFIER OP_lessequal INTEGER .)


state 110

    (64) assignment_expression -> IDENTIFIER OP_equal IDENTIFIER .

    SEMICOLON       reduce using rule 64 (assignment_expression -> IDENTIFIER OP_equal IDENTIFIER .)
    COMMA           reduce using rule 64 (assignment_expression -> IDENTIFIER OP_equal IDENTIFIER .)
    RPAREN          reduce using rule 64 (assignment_expression -> IDENTIFIER OP_equal IDENTIFIER .)


state 111

    (40) assignment_expression -> IDENTIFIER OP_equal INTEGER .

    SEMICOLON       reduce using rule 40 (assignment_expression -> IDENTIFIER OP_equal INTEGER .)
    COMMA           reduce using rule 40 (assignment_expression -> IDENTIFIER OP_equal INTEGER .)
    RPAREN          reduce using rule 40 (assignment_expression -> IDENTIFIER OP_equal INTEGER .)


state 112

    (65) assignment_expression -> IDENTIFIER OP_notequal IDENTIFIER .

    SEMICOLON       reduce using rule 65 (assignment_expression -> IDENTIFIER OP_notequal IDENTIFIER .)
    COMMA           reduce using rule 65 (assignment_expression -> IDENTIFIER OP_notequal IDENTIFIER .)
    RPAREN          reduce using rule 65 (assignment_expression -> IDENTIFIER OP_notequal IDENTIFIER .)


state 113

    (41) assignment_expression -> IDENTIFIER OP_notequal INTEGER .

    SEMICOLON       reduce using rule 41 (assignment_expression -> IDENTIFIER OP_notequal INTEGER .)
    COMMA           reduce using rule 41 (assignment_expression -> IDENTIFIER OP_notequal INTEGER .)
    RPAREN          reduce using rule 41 (assignment_expression -> IDENTIFIER OP_notequal INTEGER .)


state 114

    (42) assignment_expression -> INTEGER OP_assign INTEGER .

    SEMICOLON       reduce using rule 42 (assignment_expression -> INTEGER OP_assign INTEGER .)
    COMMA           reduce using rule 42 (assignment_expression -> INTEGER OP_assign INTEGER .)
    RPAREN          reduce using rule 42 (assignment_expression -> INTEGER OP_assign INTEGER .)


state 115

    (43) assignment_expression -> INTEGER OP_multiply INTEGER .

    SEMICOLON       reduce using rule 43 (assignment_expression -> INTEGER OP_multiply INTEGER .)
    COMMA           reduce using rule 43 (assignment_expression -> INTEGER OP_multiply INTEGER .)
    RPAREN          reduce using rule 43 (assignment_expression -> INTEGER OP_multiply INTEGER .)


state 116

    (44) assignment_expression -> INTEGER OP_divide INTEGER .

    SEMICOLON       reduce using rule 44 (assignment_expression -> INTEGER OP_divide INTEGER .)
    COMMA           reduce using rule 44 (assignment_expression -> INTEGER OP_divide INTEGER .)
    RPAREN          reduce using rule 44 (assignment_expression -> INTEGER OP_divide INTEGER .)


state 117

    (45) assignment_expression -> INTEGER OP_mod INTEGER .

    SEMICOLON       reduce using rule 45 (assignment_expression -> INTEGER OP_mod INTEGER .)
    COMMA           reduce using rule 45 (assignment_expression -> INTEGER OP_mod INTEGER .)
    RPAREN          reduce using rule 45 (assignment_expression -> INTEGER OP_mod INTEGER .)


state 118

    (46) assignment_expression -> INTEGER OP_add INTEGER .

    SEMICOLON       reduce using rule 46 (assignment_expression -> INTEGER OP_add INTEGER .)
    COMMA           reduce using rule 46 (assignment_expression -> INTEGER OP_add INTEGER .)
    RPAREN          reduce using rule 46 (assignment_expression -> INTEGER OP_add INTEGER .)


state 119

    (47) assignment_expression -> INTEGER OP_subtract INTEGER .

    SEMICOLON       reduce using rule 47 (assignment_expression -> INTEGER OP_subtract INTEGER .)
    COMMA           reduce using rule 47 (assignment_expression -> INTEGER OP_subtract INTEGER .)
    RPAREN          reduce using rule 47 (assignment_expression -> INTEGER OP_subtract INTEGER .)


state 120

    (48) assignment_expression -> INTEGER OP_greater INTEGER .

    SEMICOLON       reduce using rule 48 (assignment_expression -> INTEGER OP_greater INTEGER .)
    COMMA           reduce using rule 48 (assignment_expression -> INTEGER OP_greater INTEGER .)
    RPAREN          reduce using rule 48 (assignment_expression -> INTEGER OP_greater INTEGER .)


state 121

    (49) assignment_expression -> INTEGER OP_less INTEGER .

    SEMICOLON       reduce using rule 49 (assignment_expression -> INTEGER OP_less INTEGER .)
    COMMA           reduce using rule 49 (assignment_expression -> INTEGER OP_less INTEGER .)
    RPAREN          reduce using rule 49 (assignment_expression -> INTEGER OP_less INTEGER .)


state 122

    (50) assignment_expression -> INTEGER OP_greaterequal INTEGER .

    SEMICOLON       reduce using rule 50 (assignment_expression -> INTEGER OP_greaterequal INTEGER .)
    COMMA           reduce using rule 50 (assignment_expression -> INTEGER OP_greaterequal INTEGER .)
    RPAREN          reduce using rule 50 (assignment_expression -> INTEGER OP_greaterequal INTEGER .)


state 123

    (51) assignment_expression -> INTEGER OP_lessequal INTEGER .

    SEMICOLON       reduce using rule 51 (assignment_expression -> INTEGER OP_lessequal INTEGER .)
    COMMA           reduce using rule 51 (assignment_expression -> INTEGER OP_lessequal INTEGER .)
    RPAREN          reduce using rule 51 (assignment_expression -> INTEGER OP_lessequal INTEGER .)


state 124

    (52) assignment_expression -> INTEGER OP_equal INTEGER .

    SEMICOLON       reduce using rule 52 (assignment_expression -> INTEGER OP_equal INTEGER .)
    COMMA           reduce using rule 52 (assignment_expression -> INTEGER OP_equal INTEGER .)
    RPAREN          reduce using rule 52 (assignment_expression -> INTEGER OP_equal INTEGER .)


state 125

    (53) assignment_expression -> INTEGER OP_notequal INTEGER .

    SEMICOLON       reduce using rule 53 (assignment_expression -> INTEGER OP_notequal INTEGER .)
    COMMA           reduce using rule 53 (assignment_expression -> INTEGER OP_notequal INTEGER .)
    RPAREN          reduce using rule 53 (assignment_expression -> INTEGER OP_notequal INTEGER .)


state 126

    (68) assignment_expression -> primary_expression OP_multiply primary_expression .

    SEMICOLON       reduce using rule 68 (assignment_expression -> primary_expression OP_multiply primary_expression .)
    COMMA           reduce using rule 68 (assignment_expression -> primary_expression OP_multiply primary_expression .)
    RPAREN          reduce using rule 68 (assignment_expression -> primary_expression OP_multiply primary_expression .)


state 127

    (69) assignment_expression -> primary_expression OP_divide primary_expression .

    SEMICOLON       reduce using rule 69 (assignment_expression -> primary_expression OP_divide primary_expression .)
    COMMA           reduce using rule 69 (assignment_expression -> primary_expression OP_divide primary_expression .)
    RPAREN          reduce using rule 69 (assignment_expression -> primary_expression OP_divide primary_expression .)


state 128

    (70) assignment_expression -> primary_expression OP_mod primary_expression .

    SEMICOLON       reduce using rule 70 (assignment_expression -> primary_expression OP_mod primary_expression .)
    COMMA           reduce using rule 70 (assignment_expression -> primary_expression OP_mod primary_expression .)
    RPAREN          reduce using rule 70 (assignment_expression -> primary_expression OP_mod primary_expression .)


state 129

    (71) assignment_expression -> primary_expression OP_add primary_expression .

    SEMICOLON       reduce using rule 71 (assignment_expression -> primary_expression OP_add primary_expression .)
    COMMA           reduce using rule 71 (assignment_expression -> primary_expression OP_add primary_expression .)
    RPAREN          reduce using rule 71 (assignment_expression -> primary_expression OP_add primary_expression .)


state 130

    (72) assignment_expression -> primary_expression OP_subtract primary_expression .

    SEMICOLON       reduce using rule 72 (assignment_expression -> primary_expression OP_subtract primary_expression .)
    COMMA           reduce using rule 72 (assignment_expression -> primary_expression OP_subtract primary_expression .)
    RPAREN          reduce using rule 72 (assignment_expression -> primary_expression OP_subtract primary_expression .)


state 131

    (73) assignment_expression -> primary_expression OP_greater primary_expression .

    SEMICOLON       reduce using rule 73 (assignment_expression -> primary_expression OP_greater primary_expression .)
    COMMA           reduce using rule 73 (assignment_expression -> primary_expression OP_greater primary_expression .)
    RPAREN          reduce using rule 73 (assignment_expression -> primary_expression OP_greater primary_expression .)


state 132

    (74) assignment_expression -> primary_expression OP_less primary_expression .

    SEMICOLON       reduce using rule 74 (assignment_expression -> primary_expression OP_less primary_expression .)
    COMMA           reduce using rule 74 (assignment_expression -> primary_expression OP_less primary_expression .)
    RPAREN          reduce using rule 74 (assignment_expression -> primary_expression OP_less primary_expression .)


state 133

    (75) assignment_expression -> primary_expression OP_greaterequal primary_expression .

    SEMICOLON       reduce using rule 75 (assignment_expression -> primary_expression OP_greaterequal primary_expression .)
    COMMA           reduce using rule 75 (assignment_expression -> primary_expression OP_greaterequal primary_expression .)
    RPAREN          reduce using rule 75 (assignment_expression -> primary_expression OP_greaterequal primary_expression .)


state 134

    (76) assignment_expression -> primary_expression OP_lessequal primary_expression .

    SEMICOLON       reduce using rule 76 (assignment_expression -> primary_expression OP_lessequal primary_expression .)
    COMMA           reduce using rule 76 (assignment_expression -> primary_expression OP_lessequal primary_expression .)
    RPAREN          reduce using rule 76 (assignment_expression -> primary_expression OP_lessequal primary_expression .)


state 135

    (80) assignment_expression -> primary_expression OP_lessequal STRING .
    (85) primary_expression -> STRING .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 80 (assignment_expression -> primary_expression OP_lessequal STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 80 (assignment_expression -> primary_expression OP_lessequal STRING .)
  ! reduce/reduce conflict for RPAREN resolved using rule 80 (assignment_expression -> primary_expression OP_lessequal STRING .)
    SEMICOLON       reduce using rule 80 (assignment_expression -> primary_expression OP_lessequal STRING .)
    COMMA           reduce using rule 80 (assignment_expression -> primary_expression OP_lessequal STRING .)
    RPAREN          reduce using rule 80 (assignment_expression -> primary_expression OP_lessequal STRING .)

  ! SEMICOLON       [ reduce using rule 85 (primary_expression -> STRING .) ]
  ! COMMA           [ reduce using rule 85 (primary_expression -> STRING .) ]
  ! RPAREN          [ reduce using rule 85 (primary_expression -> STRING .) ]


state 136

    (77) assignment_expression -> primary_expression OP_equal primary_expression .

    SEMICOLON       reduce using rule 77 (assignment_expression -> primary_expression OP_equal primary_expression .)
    COMMA           reduce using rule 77 (assignment_expression -> primary_expression OP_equal primary_expression .)
    RPAREN          reduce using rule 77 (assignment_expression -> primary_expression OP_equal primary_expression .)


state 137

    (78) assignment_expression -> primary_expression OP_notequal primary_expression .

    SEMICOLON       reduce using rule 78 (assignment_expression -> primary_expression OP_notequal primary_expression .)
    COMMA           reduce using rule 78 (assignment_expression -> primary_expression OP_notequal primary_expression .)
    RPAREN          reduce using rule 78 (assignment_expression -> primary_expression OP_notequal primary_expression .)


state 138

    (7) compound_statement -> LBRACE statement_list RBRACE end .

    SEMICOLON       reduce using rule 7 (compound_statement -> LBRACE statement_list RBRACE end .)
    LBRACE          reduce using rule 7 (compound_statement -> LBRACE statement_list RBRACE end .)
    KEY_if          reduce using rule 7 (compound_statement -> LBRACE statement_list RBRACE end .)
    KEY_while       reduce using rule 7 (compound_statement -> LBRACE statement_list RBRACE end .)
    KEY_for         reduce using rule 7 (compound_statement -> LBRACE statement_list RBRACE end .)
    KEY_int         reduce using rule 7 (compound_statement -> LBRACE statement_list RBRACE end .)
    KEY_char        reduce using rule 7 (compound_statement -> LBRACE statement_list RBRACE end .)
    KEY_float       reduce using rule 7 (compound_statement -> LBRACE statement_list RBRACE end .)
    KEY_string      reduce using rule 7 (compound_statement -> LBRACE statement_list RBRACE end .)
    IDENTIFIER      reduce using rule 7 (compound_statement -> LBRACE statement_list RBRACE end .)
    INTEGER         reduce using rule 7 (compound_statement -> LBRACE statement_list RBRACE end .)
    OP_subtract     reduce using rule 7 (compound_statement -> LBRACE statement_list RBRACE end .)
    FLOAT           reduce using rule 7 (compound_statement -> LBRACE statement_list RBRACE end .)
    CHARACTER       reduce using rule 7 (compound_statement -> LBRACE statement_list RBRACE end .)
    STRING          reduce using rule 7 (compound_statement -> LBRACE statement_list RBRACE end .)
    LPAREN          reduce using rule 7 (compound_statement -> LBRACE statement_list RBRACE end .)
    $end            reduce using rule 7 (compound_statement -> LBRACE statement_list RBRACE end .)
    RBRACE          reduce using rule 7 (compound_statement -> LBRACE statement_list RBRACE end .)
    KEY_else        reduce using rule 7 (compound_statement -> LBRACE statement_list RBRACE end .)


state 139

    (24) end -> empty .

    SEMICOLON       reduce using rule 24 (end -> empty .)
    LBRACE          reduce using rule 24 (end -> empty .)
    KEY_if          reduce using rule 24 (end -> empty .)
    KEY_while       reduce using rule 24 (end -> empty .)
    KEY_for         reduce using rule 24 (end -> empty .)
    KEY_int         reduce using rule 24 (end -> empty .)
    KEY_char        reduce using rule 24 (end -> empty .)
    KEY_float       reduce using rule 24 (end -> empty .)
    KEY_string      reduce using rule 24 (end -> empty .)
    IDENTIFIER      reduce using rule 24 (end -> empty .)
    INTEGER         reduce using rule 24 (end -> empty .)
    OP_subtract     reduce using rule 24 (end -> empty .)
    FLOAT           reduce using rule 24 (end -> empty .)
    CHARACTER       reduce using rule 24 (end -> empty .)
    STRING          reduce using rule 24 (end -> empty .)
    LPAREN          reduce using rule 24 (end -> empty .)
    $end            reduce using rule 24 (end -> empty .)
    RBRACE          reduce using rule 24 (end -> empty .)
    KEY_else        reduce using rule 24 (end -> empty .)


state 140

    (15) declaration_list -> single_var_declation COMMA declaration_list .

    SEMICOLON       reduce using rule 15 (declaration_list -> single_var_declation COMMA declaration_list .)


state 141

    (18) selection_statement -> KEY_if LPAREN expression save . RPAREN statement
    (19) selection_statement -> KEY_if LPAREN expression save . RPAREN statement KEY_else save statement

    RPAREN          shift and go to state 145


state 142

    (23) save -> empty .

    RPAREN          reduce using rule 23 (save -> empty .)
    SEMICOLON       reduce using rule 23 (save -> empty .)
    LBRACE          reduce using rule 23 (save -> empty .)
    KEY_if          reduce using rule 23 (save -> empty .)
    KEY_while       reduce using rule 23 (save -> empty .)
    KEY_for         reduce using rule 23 (save -> empty .)
    KEY_int         reduce using rule 23 (save -> empty .)
    KEY_char        reduce using rule 23 (save -> empty .)
    KEY_float       reduce using rule 23 (save -> empty .)
    KEY_string      reduce using rule 23 (save -> empty .)
    IDENTIFIER      reduce using rule 23 (save -> empty .)
    INTEGER         reduce using rule 23 (save -> empty .)
    OP_subtract     reduce using rule 23 (save -> empty .)
    FLOAT           reduce using rule 23 (save -> empty .)
    CHARACTER       reduce using rule 23 (save -> empty .)
    STRING          reduce using rule 23 (save -> empty .)
    LPAREN          reduce using rule 23 (save -> empty .)


state 143

    (20) iteration_statement -> KEY_while label LPAREN expression . save RPAREN statement end
    (29) expression -> expression . COMMA assignment_expression
    (23) save -> . empty
    (89) empty -> .

    COMMA           shift and go to state 37
    RPAREN          reduce using rule 89 (empty -> .)

    save                           shift and go to state 146
    empty                          shift and go to state 142

state 144

    (21) iteration_statement -> KEY_for LPAREN optexpr label . SEMICOLON optexpr save SEMICOLON optexpr RPAREN statement

    SEMICOLON       shift and go to state 147


state 145

    (18) selection_statement -> KEY_if LPAREN expression save RPAREN . statement
    (19) selection_statement -> KEY_if LPAREN expression save RPAREN . statement KEY_else save statement
    (1) statement -> . compound_statement
    (2) statement -> . declaration_statement
    (3) statement -> . selection_statement
    (4) statement -> . iteration_statement
    (5) statement -> . expression_statement
    (6) statement -> . SEMICOLON
    (7) compound_statement -> . LBRACE statement_list RBRACE end
    (10) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (18) selection_statement -> . KEY_if LPAREN expression save RPAREN statement
    (19) selection_statement -> . KEY_if LPAREN expression save RPAREN statement KEY_else save statement
    (20) iteration_statement -> . KEY_while label LPAREN expression save RPAREN statement end
    (21) iteration_statement -> . KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statement
    (27) expression_statement -> . expression SEMICOLON
    (11) type_specifier -> . KEY_int
    (12) type_specifier -> . KEY_char
    (13) type_specifier -> . KEY_float
    (14) type_specifier -> . KEY_string
    (28) expression -> . assignment_expression
    (29) expression -> . expression COMMA assignment_expression
    (30) assignment_expression -> . IDENTIFIER OP_assign INTEGER
    (31) assignment_expression -> . IDENTIFIER OP_multiply INTEGER
    (32) assignment_expression -> . IDENTIFIER OP_divide INTEGER
    (33) assignment_expression -> . IDENTIFIER OP_mod INTEGER
    (34) assignment_expression -> . IDENTIFIER OP_add INTEGER
    (35) assignment_expression -> . IDENTIFIER OP_subtract INTEGER
    (36) assignment_expression -> . IDENTIFIER OP_greater INTEGER
    (37) assignment_expression -> . IDENTIFIER OP_less INTEGER
    (38) assignment_expression -> . IDENTIFIER OP_greaterequal INTEGER
    (39) assignment_expression -> . IDENTIFIER OP_lessequal INTEGER
    (40) assignment_expression -> . IDENTIFIER OP_equal INTEGER
    (41) assignment_expression -> . IDENTIFIER OP_notequal INTEGER
    (42) assignment_expression -> . INTEGER OP_assign INTEGER
    (43) assignment_expression -> . INTEGER OP_multiply INTEGER
    (44) assignment_expression -> . INTEGER OP_divide INTEGER
    (45) assignment_expression -> . INTEGER OP_mod INTEGER
    (46) assignment_expression -> . INTEGER OP_add INTEGER
    (47) assignment_expression -> . INTEGER OP_subtract INTEGER
    (48) assignment_expression -> . INTEGER OP_greater INTEGER
    (49) assignment_expression -> . INTEGER OP_less INTEGER
    (50) assignment_expression -> . INTEGER OP_greaterequal INTEGER
    (51) assignment_expression -> . INTEGER OP_lessequal INTEGER
    (52) assignment_expression -> . INTEGER OP_equal INTEGER
    (53) assignment_expression -> . INTEGER OP_notequal INTEGER
    (54) assignment_expression -> . IDENTIFIER OP_assign IDENTIFIER
    (55) assignment_expression -> . IDENTIFIER OP_multiply IDENTIFIER
    (56) assignment_expression -> . IDENTIFIER OP_divide IDENTIFIER
    (57) assignment_expression -> . IDENTIFIER OP_mod IDENTIFIER
    (58) assignment_expression -> . IDENTIFIER OP_add IDENTIFIER
    (59) assignment_expression -> . IDENTIFIER OP_subtract IDENTIFIER
    (60) assignment_expression -> . IDENTIFIER OP_greater IDENTIFIER
    (61) assignment_expression -> . IDENTIFIER OP_less IDENTIFIER
    (62) assignment_expression -> . IDENTIFIER OP_greaterequal IDENTIFIER
    (63) assignment_expression -> . IDENTIFIER OP_lessequal IDENTIFIER
    (64) assignment_expression -> . IDENTIFIER OP_equal IDENTIFIER
    (65) assignment_expression -> . IDENTIFIER OP_notequal IDENTIFIER
    (66) assignment_expression -> . primary_expression
    (67) assignment_expression -> . OP_subtract primary_expression
    (68) assignment_expression -> . primary_expression OP_multiply primary_expression
    (69) assignment_expression -> . primary_expression OP_divide primary_expression
    (70) assignment_expression -> . primary_expression OP_mod primary_expression
    (71) assignment_expression -> . primary_expression OP_add primary_expression
    (72) assignment_expression -> . primary_expression OP_subtract primary_expression
    (73) assignment_expression -> . primary_expression OP_greater primary_expression
    (74) assignment_expression -> . primary_expression OP_less primary_expression
    (75) assignment_expression -> . primary_expression OP_greaterequal primary_expression
    (76) assignment_expression -> . primary_expression OP_lessequal primary_expression
    (77) assignment_expression -> . primary_expression OP_equal primary_expression
    (78) assignment_expression -> . primary_expression OP_notequal primary_expression
    (79) assignment_expression -> . IDENTIFIER OP_assign assignment_expression
    (80) assignment_expression -> . primary_expression OP_lessequal STRING
    (81) primary_expression -> . INTEGER
    (82) primary_expression -> . IDENTIFIER
    (83) primary_expression -> . FLOAT
    (84) primary_expression -> . CHARACTER
    (85) primary_expression -> . STRING
    (86) primary_expression -> . id_expression
    (87) id_expression -> . IDENTIFIER
    (88) id_expression -> . LPAREN expression RPAREN

    SEMICOLON       shift and go to state 9
    LBRACE          shift and go to state 10
    KEY_if          shift and go to state 12
    KEY_while       shift and go to state 15
    KEY_for         shift and go to state 16
    KEY_int         shift and go to state 17
    KEY_char        shift and go to state 18
    KEY_float       shift and go to state 19
    KEY_string      shift and go to state 20
    IDENTIFIER      shift and go to state 22
    INTEGER         shift and go to state 23
    OP_subtract     shift and go to state 24
    FLOAT           shift and go to state 27
    CHARACTER       shift and go to state 28
    STRING          shift and go to state 26
    LPAREN          shift and go to state 13

    expression                     shift and go to state 14
    statement                      shift and go to state 148
    compound_statement             shift and go to state 4
    declaration_statement          shift and go to state 5
    selection_statement            shift and go to state 6
    iteration_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    type_specifier                 shift and go to state 11
    assignment_expression          shift and go to state 21
    primary_expression             shift and go to state 25
    id_expression                  shift and go to state 29

state 146

    (20) iteration_statement -> KEY_while label LPAREN expression save . RPAREN statement end

    RPAREN          shift and go to state 149


state 147

    (21) iteration_statement -> KEY_for LPAREN optexpr label SEMICOLON . optexpr save SEMICOLON optexpr RPAREN statement
    (25) optexpr -> . assignment_expression
    (26) optexpr -> . empty
    (30) assignment_expression -> . IDENTIFIER OP_assign INTEGER
    (31) assignment_expression -> . IDENTIFIER OP_multiply INTEGER
    (32) assignment_expression -> . IDENTIFIER OP_divide INTEGER
    (33) assignment_expression -> . IDENTIFIER OP_mod INTEGER
    (34) assignment_expression -> . IDENTIFIER OP_add INTEGER
    (35) assignment_expression -> . IDENTIFIER OP_subtract INTEGER
    (36) assignment_expression -> . IDENTIFIER OP_greater INTEGER
    (37) assignment_expression -> . IDENTIFIER OP_less INTEGER
    (38) assignment_expression -> . IDENTIFIER OP_greaterequal INTEGER
    (39) assignment_expression -> . IDENTIFIER OP_lessequal INTEGER
    (40) assignment_expression -> . IDENTIFIER OP_equal INTEGER
    (41) assignment_expression -> . IDENTIFIER OP_notequal INTEGER
    (42) assignment_expression -> . INTEGER OP_assign INTEGER
    (43) assignment_expression -> . INTEGER OP_multiply INTEGER
    (44) assignment_expression -> . INTEGER OP_divide INTEGER
    (45) assignment_expression -> . INTEGER OP_mod INTEGER
    (46) assignment_expression -> . INTEGER OP_add INTEGER
    (47) assignment_expression -> . INTEGER OP_subtract INTEGER
    (48) assignment_expression -> . INTEGER OP_greater INTEGER
    (49) assignment_expression -> . INTEGER OP_less INTEGER
    (50) assignment_expression -> . INTEGER OP_greaterequal INTEGER
    (51) assignment_expression -> . INTEGER OP_lessequal INTEGER
    (52) assignment_expression -> . INTEGER OP_equal INTEGER
    (53) assignment_expression -> . INTEGER OP_notequal INTEGER
    (54) assignment_expression -> . IDENTIFIER OP_assign IDENTIFIER
    (55) assignment_expression -> . IDENTIFIER OP_multiply IDENTIFIER
    (56) assignment_expression -> . IDENTIFIER OP_divide IDENTIFIER
    (57) assignment_expression -> . IDENTIFIER OP_mod IDENTIFIER
    (58) assignment_expression -> . IDENTIFIER OP_add IDENTIFIER
    (59) assignment_expression -> . IDENTIFIER OP_subtract IDENTIFIER
    (60) assignment_expression -> . IDENTIFIER OP_greater IDENTIFIER
    (61) assignment_expression -> . IDENTIFIER OP_less IDENTIFIER
    (62) assignment_expression -> . IDENTIFIER OP_greaterequal IDENTIFIER
    (63) assignment_expression -> . IDENTIFIER OP_lessequal IDENTIFIER
    (64) assignment_expression -> . IDENTIFIER OP_equal IDENTIFIER
    (65) assignment_expression -> . IDENTIFIER OP_notequal IDENTIFIER
    (66) assignment_expression -> . primary_expression
    (67) assignment_expression -> . OP_subtract primary_expression
    (68) assignment_expression -> . primary_expression OP_multiply primary_expression
    (69) assignment_expression -> . primary_expression OP_divide primary_expression
    (70) assignment_expression -> . primary_expression OP_mod primary_expression
    (71) assignment_expression -> . primary_expression OP_add primary_expression
    (72) assignment_expression -> . primary_expression OP_subtract primary_expression
    (73) assignment_expression -> . primary_expression OP_greater primary_expression
    (74) assignment_expression -> . primary_expression OP_less primary_expression
    (75) assignment_expression -> . primary_expression OP_greaterequal primary_expression
    (76) assignment_expression -> . primary_expression OP_lessequal primary_expression
    (77) assignment_expression -> . primary_expression OP_equal primary_expression
    (78) assignment_expression -> . primary_expression OP_notequal primary_expression
    (79) assignment_expression -> . IDENTIFIER OP_assign assignment_expression
    (80) assignment_expression -> . primary_expression OP_lessequal STRING
    (89) empty -> .
    (81) primary_expression -> . INTEGER
    (82) primary_expression -> . IDENTIFIER
    (83) primary_expression -> . FLOAT
    (84) primary_expression -> . CHARACTER
    (85) primary_expression -> . STRING
    (86) primary_expression -> . id_expression
    (87) id_expression -> . IDENTIFIER
    (88) id_expression -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 22
    INTEGER         shift and go to state 23
    OP_subtract     shift and go to state 24
    SEMICOLON       reduce using rule 89 (empty -> .)
    FLOAT           shift and go to state 27
    CHARACTER       shift and go to state 28
    STRING          shift and go to state 26
    LPAREN          shift and go to state 13

    optexpr                        shift and go to state 150
    assignment_expression          shift and go to state 87
    empty                          shift and go to state 88
    primary_expression             shift and go to state 25
    id_expression                  shift and go to state 29

state 148

    (18) selection_statement -> KEY_if LPAREN expression save RPAREN statement .
    (19) selection_statement -> KEY_if LPAREN expression save RPAREN statement . KEY_else save statement

  ! shift/reduce conflict for KEY_else resolved as shift
    SEMICOLON       reduce using rule 18 (selection_statement -> KEY_if LPAREN expression save RPAREN statement .)
    LBRACE          reduce using rule 18 (selection_statement -> KEY_if LPAREN expression save RPAREN statement .)
    KEY_if          reduce using rule 18 (selection_statement -> KEY_if LPAREN expression save RPAREN statement .)
    KEY_while       reduce using rule 18 (selection_statement -> KEY_if LPAREN expression save RPAREN statement .)
    KEY_for         reduce using rule 18 (selection_statement -> KEY_if LPAREN expression save RPAREN statement .)
    KEY_int         reduce using rule 18 (selection_statement -> KEY_if LPAREN expression save RPAREN statement .)
    KEY_char        reduce using rule 18 (selection_statement -> KEY_if LPAREN expression save RPAREN statement .)
    KEY_float       reduce using rule 18 (selection_statement -> KEY_if LPAREN expression save RPAREN statement .)
    KEY_string      reduce using rule 18 (selection_statement -> KEY_if LPAREN expression save RPAREN statement .)
    IDENTIFIER      reduce using rule 18 (selection_statement -> KEY_if LPAREN expression save RPAREN statement .)
    INTEGER         reduce using rule 18 (selection_statement -> KEY_if LPAREN expression save RPAREN statement .)
    OP_subtract     reduce using rule 18 (selection_statement -> KEY_if LPAREN expression save RPAREN statement .)
    FLOAT           reduce using rule 18 (selection_statement -> KEY_if LPAREN expression save RPAREN statement .)
    CHARACTER       reduce using rule 18 (selection_statement -> KEY_if LPAREN expression save RPAREN statement .)
    STRING          reduce using rule 18 (selection_statement -> KEY_if LPAREN expression save RPAREN statement .)
    LPAREN          reduce using rule 18 (selection_statement -> KEY_if LPAREN expression save RPAREN statement .)
    $end            reduce using rule 18 (selection_statement -> KEY_if LPAREN expression save RPAREN statement .)
    RBRACE          reduce using rule 18 (selection_statement -> KEY_if LPAREN expression save RPAREN statement .)
    KEY_else        shift and go to state 151

  ! KEY_else        [ reduce using rule 18 (selection_statement -> KEY_if LPAREN expression save RPAREN statement .) ]


state 149

    (20) iteration_statement -> KEY_while label LPAREN expression save RPAREN . statement end
    (1) statement -> . compound_statement
    (2) statement -> . declaration_statement
    (3) statement -> . selection_statement
    (4) statement -> . iteration_statement
    (5) statement -> . expression_statement
    (6) statement -> . SEMICOLON
    (7) compound_statement -> . LBRACE statement_list RBRACE end
    (10) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (18) selection_statement -> . KEY_if LPAREN expression save RPAREN statement
    (19) selection_statement -> . KEY_if LPAREN expression save RPAREN statement KEY_else save statement
    (20) iteration_statement -> . KEY_while label LPAREN expression save RPAREN statement end
    (21) iteration_statement -> . KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statement
    (27) expression_statement -> . expression SEMICOLON
    (11) type_specifier -> . KEY_int
    (12) type_specifier -> . KEY_char
    (13) type_specifier -> . KEY_float
    (14) type_specifier -> . KEY_string
    (28) expression -> . assignment_expression
    (29) expression -> . expression COMMA assignment_expression
    (30) assignment_expression -> . IDENTIFIER OP_assign INTEGER
    (31) assignment_expression -> . IDENTIFIER OP_multiply INTEGER
    (32) assignment_expression -> . IDENTIFIER OP_divide INTEGER
    (33) assignment_expression -> . IDENTIFIER OP_mod INTEGER
    (34) assignment_expression -> . IDENTIFIER OP_add INTEGER
    (35) assignment_expression -> . IDENTIFIER OP_subtract INTEGER
    (36) assignment_expression -> . IDENTIFIER OP_greater INTEGER
    (37) assignment_expression -> . IDENTIFIER OP_less INTEGER
    (38) assignment_expression -> . IDENTIFIER OP_greaterequal INTEGER
    (39) assignment_expression -> . IDENTIFIER OP_lessequal INTEGER
    (40) assignment_expression -> . IDENTIFIER OP_equal INTEGER
    (41) assignment_expression -> . IDENTIFIER OP_notequal INTEGER
    (42) assignment_expression -> . INTEGER OP_assign INTEGER
    (43) assignment_expression -> . INTEGER OP_multiply INTEGER
    (44) assignment_expression -> . INTEGER OP_divide INTEGER
    (45) assignment_expression -> . INTEGER OP_mod INTEGER
    (46) assignment_expression -> . INTEGER OP_add INTEGER
    (47) assignment_expression -> . INTEGER OP_subtract INTEGER
    (48) assignment_expression -> . INTEGER OP_greater INTEGER
    (49) assignment_expression -> . INTEGER OP_less INTEGER
    (50) assignment_expression -> . INTEGER OP_greaterequal INTEGER
    (51) assignment_expression -> . INTEGER OP_lessequal INTEGER
    (52) assignment_expression -> . INTEGER OP_equal INTEGER
    (53) assignment_expression -> . INTEGER OP_notequal INTEGER
    (54) assignment_expression -> . IDENTIFIER OP_assign IDENTIFIER
    (55) assignment_expression -> . IDENTIFIER OP_multiply IDENTIFIER
    (56) assignment_expression -> . IDENTIFIER OP_divide IDENTIFIER
    (57) assignment_expression -> . IDENTIFIER OP_mod IDENTIFIER
    (58) assignment_expression -> . IDENTIFIER OP_add IDENTIFIER
    (59) assignment_expression -> . IDENTIFIER OP_subtract IDENTIFIER
    (60) assignment_expression -> . IDENTIFIER OP_greater IDENTIFIER
    (61) assignment_expression -> . IDENTIFIER OP_less IDENTIFIER
    (62) assignment_expression -> . IDENTIFIER OP_greaterequal IDENTIFIER
    (63) assignment_expression -> . IDENTIFIER OP_lessequal IDENTIFIER
    (64) assignment_expression -> . IDENTIFIER OP_equal IDENTIFIER
    (65) assignment_expression -> . IDENTIFIER OP_notequal IDENTIFIER
    (66) assignment_expression -> . primary_expression
    (67) assignment_expression -> . OP_subtract primary_expression
    (68) assignment_expression -> . primary_expression OP_multiply primary_expression
    (69) assignment_expression -> . primary_expression OP_divide primary_expression
    (70) assignment_expression -> . primary_expression OP_mod primary_expression
    (71) assignment_expression -> . primary_expression OP_add primary_expression
    (72) assignment_expression -> . primary_expression OP_subtract primary_expression
    (73) assignment_expression -> . primary_expression OP_greater primary_expression
    (74) assignment_expression -> . primary_expression OP_less primary_expression
    (75) assignment_expression -> . primary_expression OP_greaterequal primary_expression
    (76) assignment_expression -> . primary_expression OP_lessequal primary_expression
    (77) assignment_expression -> . primary_expression OP_equal primary_expression
    (78) assignment_expression -> . primary_expression OP_notequal primary_expression
    (79) assignment_expression -> . IDENTIFIER OP_assign assignment_expression
    (80) assignment_expression -> . primary_expression OP_lessequal STRING
    (81) primary_expression -> . INTEGER
    (82) primary_expression -> . IDENTIFIER
    (83) primary_expression -> . FLOAT
    (84) primary_expression -> . CHARACTER
    (85) primary_expression -> . STRING
    (86) primary_expression -> . id_expression
    (87) id_expression -> . IDENTIFIER
    (88) id_expression -> . LPAREN expression RPAREN

    SEMICOLON       shift and go to state 9
    LBRACE          shift and go to state 10
    KEY_if          shift and go to state 12
    KEY_while       shift and go to state 15
    KEY_for         shift and go to state 16
    KEY_int         shift and go to state 17
    KEY_char        shift and go to state 18
    KEY_float       shift and go to state 19
    KEY_string      shift and go to state 20
    IDENTIFIER      shift and go to state 22
    INTEGER         shift and go to state 23
    OP_subtract     shift and go to state 24
    FLOAT           shift and go to state 27
    CHARACTER       shift and go to state 28
    STRING          shift and go to state 26
    LPAREN          shift and go to state 13

    expression                     shift and go to state 14
    statement                      shift and go to state 152
    compound_statement             shift and go to state 4
    declaration_statement          shift and go to state 5
    selection_statement            shift and go to state 6
    iteration_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    type_specifier                 shift and go to state 11
    assignment_expression          shift and go to state 21
    primary_expression             shift and go to state 25
    id_expression                  shift and go to state 29

state 150

    (21) iteration_statement -> KEY_for LPAREN optexpr label SEMICOLON optexpr . save SEMICOLON optexpr RPAREN statement
    (23) save -> . empty
    (89) empty -> .

    SEMICOLON       reduce using rule 89 (empty -> .)

    save                           shift and go to state 153
    empty                          shift and go to state 142

state 151

    (19) selection_statement -> KEY_if LPAREN expression save RPAREN statement KEY_else . save statement
    (23) save -> . empty
    (89) empty -> .

    SEMICOLON       reduce using rule 89 (empty -> .)
    LBRACE          reduce using rule 89 (empty -> .)
    KEY_if          reduce using rule 89 (empty -> .)
    KEY_while       reduce using rule 89 (empty -> .)
    KEY_for         reduce using rule 89 (empty -> .)
    KEY_int         reduce using rule 89 (empty -> .)
    KEY_char        reduce using rule 89 (empty -> .)
    KEY_float       reduce using rule 89 (empty -> .)
    KEY_string      reduce using rule 89 (empty -> .)
    IDENTIFIER      reduce using rule 89 (empty -> .)
    INTEGER         reduce using rule 89 (empty -> .)
    OP_subtract     reduce using rule 89 (empty -> .)
    FLOAT           reduce using rule 89 (empty -> .)
    CHARACTER       reduce using rule 89 (empty -> .)
    STRING          reduce using rule 89 (empty -> .)
    LPAREN          reduce using rule 89 (empty -> .)

    save                           shift and go to state 154
    empty                          shift and go to state 142

state 152

    (20) iteration_statement -> KEY_while label LPAREN expression save RPAREN statement . end
    (24) end -> . empty
    (89) empty -> .

    SEMICOLON       reduce using rule 89 (empty -> .)
    LBRACE          reduce using rule 89 (empty -> .)
    KEY_if          reduce using rule 89 (empty -> .)
    KEY_while       reduce using rule 89 (empty -> .)
    KEY_for         reduce using rule 89 (empty -> .)
    KEY_int         reduce using rule 89 (empty -> .)
    KEY_char        reduce using rule 89 (empty -> .)
    KEY_float       reduce using rule 89 (empty -> .)
    KEY_string      reduce using rule 89 (empty -> .)
    IDENTIFIER      reduce using rule 89 (empty -> .)
    INTEGER         reduce using rule 89 (empty -> .)
    OP_subtract     reduce using rule 89 (empty -> .)
    FLOAT           reduce using rule 89 (empty -> .)
    CHARACTER       reduce using rule 89 (empty -> .)
    STRING          reduce using rule 89 (empty -> .)
    LPAREN          reduce using rule 89 (empty -> .)
    $end            reduce using rule 89 (empty -> .)
    RBRACE          reduce using rule 89 (empty -> .)
    KEY_else        reduce using rule 89 (empty -> .)

    end                            shift and go to state 155
    empty                          shift and go to state 139

state 153

    (21) iteration_statement -> KEY_for LPAREN optexpr label SEMICOLON optexpr save . SEMICOLON optexpr RPAREN statement

    SEMICOLON       shift and go to state 156


state 154

    (19) selection_statement -> KEY_if LPAREN expression save RPAREN statement KEY_else save . statement
    (1) statement -> . compound_statement
    (2) statement -> . declaration_statement
    (3) statement -> . selection_statement
    (4) statement -> . iteration_statement
    (5) statement -> . expression_statement
    (6) statement -> . SEMICOLON
    (7) compound_statement -> . LBRACE statement_list RBRACE end
    (10) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (18) selection_statement -> . KEY_if LPAREN expression save RPAREN statement
    (19) selection_statement -> . KEY_if LPAREN expression save RPAREN statement KEY_else save statement
    (20) iteration_statement -> . KEY_while label LPAREN expression save RPAREN statement end
    (21) iteration_statement -> . KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statement
    (27) expression_statement -> . expression SEMICOLON
    (11) type_specifier -> . KEY_int
    (12) type_specifier -> . KEY_char
    (13) type_specifier -> . KEY_float
    (14) type_specifier -> . KEY_string
    (28) expression -> . assignment_expression
    (29) expression -> . expression COMMA assignment_expression
    (30) assignment_expression -> . IDENTIFIER OP_assign INTEGER
    (31) assignment_expression -> . IDENTIFIER OP_multiply INTEGER
    (32) assignment_expression -> . IDENTIFIER OP_divide INTEGER
    (33) assignment_expression -> . IDENTIFIER OP_mod INTEGER
    (34) assignment_expression -> . IDENTIFIER OP_add INTEGER
    (35) assignment_expression -> . IDENTIFIER OP_subtract INTEGER
    (36) assignment_expression -> . IDENTIFIER OP_greater INTEGER
    (37) assignment_expression -> . IDENTIFIER OP_less INTEGER
    (38) assignment_expression -> . IDENTIFIER OP_greaterequal INTEGER
    (39) assignment_expression -> . IDENTIFIER OP_lessequal INTEGER
    (40) assignment_expression -> . IDENTIFIER OP_equal INTEGER
    (41) assignment_expression -> . IDENTIFIER OP_notequal INTEGER
    (42) assignment_expression -> . INTEGER OP_assign INTEGER
    (43) assignment_expression -> . INTEGER OP_multiply INTEGER
    (44) assignment_expression -> . INTEGER OP_divide INTEGER
    (45) assignment_expression -> . INTEGER OP_mod INTEGER
    (46) assignment_expression -> . INTEGER OP_add INTEGER
    (47) assignment_expression -> . INTEGER OP_subtract INTEGER
    (48) assignment_expression -> . INTEGER OP_greater INTEGER
    (49) assignment_expression -> . INTEGER OP_less INTEGER
    (50) assignment_expression -> . INTEGER OP_greaterequal INTEGER
    (51) assignment_expression -> . INTEGER OP_lessequal INTEGER
    (52) assignment_expression -> . INTEGER OP_equal INTEGER
    (53) assignment_expression -> . INTEGER OP_notequal INTEGER
    (54) assignment_expression -> . IDENTIFIER OP_assign IDENTIFIER
    (55) assignment_expression -> . IDENTIFIER OP_multiply IDENTIFIER
    (56) assignment_expression -> . IDENTIFIER OP_divide IDENTIFIER
    (57) assignment_expression -> . IDENTIFIER OP_mod IDENTIFIER
    (58) assignment_expression -> . IDENTIFIER OP_add IDENTIFIER
    (59) assignment_expression -> . IDENTIFIER OP_subtract IDENTIFIER
    (60) assignment_expression -> . IDENTIFIER OP_greater IDENTIFIER
    (61) assignment_expression -> . IDENTIFIER OP_less IDENTIFIER
    (62) assignment_expression -> . IDENTIFIER OP_greaterequal IDENTIFIER
    (63) assignment_expression -> . IDENTIFIER OP_lessequal IDENTIFIER
    (64) assignment_expression -> . IDENTIFIER OP_equal IDENTIFIER
    (65) assignment_expression -> . IDENTIFIER OP_notequal IDENTIFIER
    (66) assignment_expression -> . primary_expression
    (67) assignment_expression -> . OP_subtract primary_expression
    (68) assignment_expression -> . primary_expression OP_multiply primary_expression
    (69) assignment_expression -> . primary_expression OP_divide primary_expression
    (70) assignment_expression -> . primary_expression OP_mod primary_expression
    (71) assignment_expression -> . primary_expression OP_add primary_expression
    (72) assignment_expression -> . primary_expression OP_subtract primary_expression
    (73) assignment_expression -> . primary_expression OP_greater primary_expression
    (74) assignment_expression -> . primary_expression OP_less primary_expression
    (75) assignment_expression -> . primary_expression OP_greaterequal primary_expression
    (76) assignment_expression -> . primary_expression OP_lessequal primary_expression
    (77) assignment_expression -> . primary_expression OP_equal primary_expression
    (78) assignment_expression -> . primary_expression OP_notequal primary_expression
    (79) assignment_expression -> . IDENTIFIER OP_assign assignment_expression
    (80) assignment_expression -> . primary_expression OP_lessequal STRING
    (81) primary_expression -> . INTEGER
    (82) primary_expression -> . IDENTIFIER
    (83) primary_expression -> . FLOAT
    (84) primary_expression -> . CHARACTER
    (85) primary_expression -> . STRING
    (86) primary_expression -> . id_expression
    (87) id_expression -> . IDENTIFIER
    (88) id_expression -> . LPAREN expression RPAREN

    SEMICOLON       shift and go to state 9
    LBRACE          shift and go to state 10
    KEY_if          shift and go to state 12
    KEY_while       shift and go to state 15
    KEY_for         shift and go to state 16
    KEY_int         shift and go to state 17
    KEY_char        shift and go to state 18
    KEY_float       shift and go to state 19
    KEY_string      shift and go to state 20
    IDENTIFIER      shift and go to state 22
    INTEGER         shift and go to state 23
    OP_subtract     shift and go to state 24
    FLOAT           shift and go to state 27
    CHARACTER       shift and go to state 28
    STRING          shift and go to state 26
    LPAREN          shift and go to state 13

    expression                     shift and go to state 14
    statement                      shift and go to state 157
    compound_statement             shift and go to state 4
    declaration_statement          shift and go to state 5
    selection_statement            shift and go to state 6
    iteration_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    type_specifier                 shift and go to state 11
    assignment_expression          shift and go to state 21
    primary_expression             shift and go to state 25
    id_expression                  shift and go to state 29

state 155

    (20) iteration_statement -> KEY_while label LPAREN expression save RPAREN statement end .

    SEMICOLON       reduce using rule 20 (iteration_statement -> KEY_while label LPAREN expression save RPAREN statement end .)
    LBRACE          reduce using rule 20 (iteration_statement -> KEY_while label LPAREN expression save RPAREN statement end .)
    KEY_if          reduce using rule 20 (iteration_statement -> KEY_while label LPAREN expression save RPAREN statement end .)
    KEY_while       reduce using rule 20 (iteration_statement -> KEY_while label LPAREN expression save RPAREN statement end .)
    KEY_for         reduce using rule 20 (iteration_statement -> KEY_while label LPAREN expression save RPAREN statement end .)
    KEY_int         reduce using rule 20 (iteration_statement -> KEY_while label LPAREN expression save RPAREN statement end .)
    KEY_char        reduce using rule 20 (iteration_statement -> KEY_while label LPAREN expression save RPAREN statement end .)
    KEY_float       reduce using rule 20 (iteration_statement -> KEY_while label LPAREN expression save RPAREN statement end .)
    KEY_string      reduce using rule 20 (iteration_statement -> KEY_while label LPAREN expression save RPAREN statement end .)
    IDENTIFIER      reduce using rule 20 (iteration_statement -> KEY_while label LPAREN expression save RPAREN statement end .)
    INTEGER         reduce using rule 20 (iteration_statement -> KEY_while label LPAREN expression save RPAREN statement end .)
    OP_subtract     reduce using rule 20 (iteration_statement -> KEY_while label LPAREN expression save RPAREN statement end .)
    FLOAT           reduce using rule 20 (iteration_statement -> KEY_while label LPAREN expression save RPAREN statement end .)
    CHARACTER       reduce using rule 20 (iteration_statement -> KEY_while label LPAREN expression save RPAREN statement end .)
    STRING          reduce using rule 20 (iteration_statement -> KEY_while label LPAREN expression save RPAREN statement end .)
    LPAREN          reduce using rule 20 (iteration_statement -> KEY_while label LPAREN expression save RPAREN statement end .)
    $end            reduce using rule 20 (iteration_statement -> KEY_while label LPAREN expression save RPAREN statement end .)
    RBRACE          reduce using rule 20 (iteration_statement -> KEY_while label LPAREN expression save RPAREN statement end .)
    KEY_else        reduce using rule 20 (iteration_statement -> KEY_while label LPAREN expression save RPAREN statement end .)


state 156

    (21) iteration_statement -> KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON . optexpr RPAREN statement
    (25) optexpr -> . assignment_expression
    (26) optexpr -> . empty
    (30) assignment_expression -> . IDENTIFIER OP_assign INTEGER
    (31) assignment_expression -> . IDENTIFIER OP_multiply INTEGER
    (32) assignment_expression -> . IDENTIFIER OP_divide INTEGER
    (33) assignment_expression -> . IDENTIFIER OP_mod INTEGER
    (34) assignment_expression -> . IDENTIFIER OP_add INTEGER
    (35) assignment_expression -> . IDENTIFIER OP_subtract INTEGER
    (36) assignment_expression -> . IDENTIFIER OP_greater INTEGER
    (37) assignment_expression -> . IDENTIFIER OP_less INTEGER
    (38) assignment_expression -> . IDENTIFIER OP_greaterequal INTEGER
    (39) assignment_expression -> . IDENTIFIER OP_lessequal INTEGER
    (40) assignment_expression -> . IDENTIFIER OP_equal INTEGER
    (41) assignment_expression -> . IDENTIFIER OP_notequal INTEGER
    (42) assignment_expression -> . INTEGER OP_assign INTEGER
    (43) assignment_expression -> . INTEGER OP_multiply INTEGER
    (44) assignment_expression -> . INTEGER OP_divide INTEGER
    (45) assignment_expression -> . INTEGER OP_mod INTEGER
    (46) assignment_expression -> . INTEGER OP_add INTEGER
    (47) assignment_expression -> . INTEGER OP_subtract INTEGER
    (48) assignment_expression -> . INTEGER OP_greater INTEGER
    (49) assignment_expression -> . INTEGER OP_less INTEGER
    (50) assignment_expression -> . INTEGER OP_greaterequal INTEGER
    (51) assignment_expression -> . INTEGER OP_lessequal INTEGER
    (52) assignment_expression -> . INTEGER OP_equal INTEGER
    (53) assignment_expression -> . INTEGER OP_notequal INTEGER
    (54) assignment_expression -> . IDENTIFIER OP_assign IDENTIFIER
    (55) assignment_expression -> . IDENTIFIER OP_multiply IDENTIFIER
    (56) assignment_expression -> . IDENTIFIER OP_divide IDENTIFIER
    (57) assignment_expression -> . IDENTIFIER OP_mod IDENTIFIER
    (58) assignment_expression -> . IDENTIFIER OP_add IDENTIFIER
    (59) assignment_expression -> . IDENTIFIER OP_subtract IDENTIFIER
    (60) assignment_expression -> . IDENTIFIER OP_greater IDENTIFIER
    (61) assignment_expression -> . IDENTIFIER OP_less IDENTIFIER
    (62) assignment_expression -> . IDENTIFIER OP_greaterequal IDENTIFIER
    (63) assignment_expression -> . IDENTIFIER OP_lessequal IDENTIFIER
    (64) assignment_expression -> . IDENTIFIER OP_equal IDENTIFIER
    (65) assignment_expression -> . IDENTIFIER OP_notequal IDENTIFIER
    (66) assignment_expression -> . primary_expression
    (67) assignment_expression -> . OP_subtract primary_expression
    (68) assignment_expression -> . primary_expression OP_multiply primary_expression
    (69) assignment_expression -> . primary_expression OP_divide primary_expression
    (70) assignment_expression -> . primary_expression OP_mod primary_expression
    (71) assignment_expression -> . primary_expression OP_add primary_expression
    (72) assignment_expression -> . primary_expression OP_subtract primary_expression
    (73) assignment_expression -> . primary_expression OP_greater primary_expression
    (74) assignment_expression -> . primary_expression OP_less primary_expression
    (75) assignment_expression -> . primary_expression OP_greaterequal primary_expression
    (76) assignment_expression -> . primary_expression OP_lessequal primary_expression
    (77) assignment_expression -> . primary_expression OP_equal primary_expression
    (78) assignment_expression -> . primary_expression OP_notequal primary_expression
    (79) assignment_expression -> . IDENTIFIER OP_assign assignment_expression
    (80) assignment_expression -> . primary_expression OP_lessequal STRING
    (89) empty -> .
    (81) primary_expression -> . INTEGER
    (82) primary_expression -> . IDENTIFIER
    (83) primary_expression -> . FLOAT
    (84) primary_expression -> . CHARACTER
    (85) primary_expression -> . STRING
    (86) primary_expression -> . id_expression
    (87) id_expression -> . IDENTIFIER
    (88) id_expression -> . LPAREN expression RPAREN

    IDENTIFIER      shift and go to state 22
    INTEGER         shift and go to state 23
    OP_subtract     shift and go to state 24
    RPAREN          reduce using rule 89 (empty -> .)
    FLOAT           shift and go to state 27
    CHARACTER       shift and go to state 28
    STRING          shift and go to state 26
    LPAREN          shift and go to state 13

    optexpr                        shift and go to state 158
    assignment_expression          shift and go to state 87
    empty                          shift and go to state 88
    primary_expression             shift and go to state 25
    id_expression                  shift and go to state 29

state 157

    (19) selection_statement -> KEY_if LPAREN expression save RPAREN statement KEY_else save statement .

    SEMICOLON       reduce using rule 19 (selection_statement -> KEY_if LPAREN expression save RPAREN statement KEY_else save statement .)
    LBRACE          reduce using rule 19 (selection_statement -> KEY_if LPAREN expression save RPAREN statement KEY_else save statement .)
    KEY_if          reduce using rule 19 (selection_statement -> KEY_if LPAREN expression save RPAREN statement KEY_else save statement .)
    KEY_while       reduce using rule 19 (selection_statement -> KEY_if LPAREN expression save RPAREN statement KEY_else save statement .)
    KEY_for         reduce using rule 19 (selection_statement -> KEY_if LPAREN expression save RPAREN statement KEY_else save statement .)
    KEY_int         reduce using rule 19 (selection_statement -> KEY_if LPAREN expression save RPAREN statement KEY_else save statement .)
    KEY_char        reduce using rule 19 (selection_statement -> KEY_if LPAREN expression save RPAREN statement KEY_else save statement .)
    KEY_float       reduce using rule 19 (selection_statement -> KEY_if LPAREN expression save RPAREN statement KEY_else save statement .)
    KEY_string      reduce using rule 19 (selection_statement -> KEY_if LPAREN expression save RPAREN statement KEY_else save statement .)
    IDENTIFIER      reduce using rule 19 (selection_statement -> KEY_if LPAREN expression save RPAREN statement KEY_else save statement .)
    INTEGER         reduce using rule 19 (selection_statement -> KEY_if LPAREN expression save RPAREN statement KEY_else save statement .)
    OP_subtract     reduce using rule 19 (selection_statement -> KEY_if LPAREN expression save RPAREN statement KEY_else save statement .)
    FLOAT           reduce using rule 19 (selection_statement -> KEY_if LPAREN expression save RPAREN statement KEY_else save statement .)
    CHARACTER       reduce using rule 19 (selection_statement -> KEY_if LPAREN expression save RPAREN statement KEY_else save statement .)
    STRING          reduce using rule 19 (selection_statement -> KEY_if LPAREN expression save RPAREN statement KEY_else save statement .)
    LPAREN          reduce using rule 19 (selection_statement -> KEY_if LPAREN expression save RPAREN statement KEY_else save statement .)
    $end            reduce using rule 19 (selection_statement -> KEY_if LPAREN expression save RPAREN statement KEY_else save statement .)
    RBRACE          reduce using rule 19 (selection_statement -> KEY_if LPAREN expression save RPAREN statement KEY_else save statement .)
    KEY_else        reduce using rule 19 (selection_statement -> KEY_if LPAREN expression save RPAREN statement KEY_else save statement .)


state 158

    (21) iteration_statement -> KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr . RPAREN statement

    RPAREN          shift and go to state 159


state 159

    (21) iteration_statement -> KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN . statement
    (1) statement -> . compound_statement
    (2) statement -> . declaration_statement
    (3) statement -> . selection_statement
    (4) statement -> . iteration_statement
    (5) statement -> . expression_statement
    (6) statement -> . SEMICOLON
    (7) compound_statement -> . LBRACE statement_list RBRACE end
    (10) declaration_statement -> . type_specifier declaration_list SEMICOLON
    (18) selection_statement -> . KEY_if LPAREN expression save RPAREN statement
    (19) selection_statement -> . KEY_if LPAREN expression save RPAREN statement KEY_else save statement
    (20) iteration_statement -> . KEY_while label LPAREN expression save RPAREN statement end
    (21) iteration_statement -> . KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statement
    (27) expression_statement -> . expression SEMICOLON
    (11) type_specifier -> . KEY_int
    (12) type_specifier -> . KEY_char
    (13) type_specifier -> . KEY_float
    (14) type_specifier -> . KEY_string
    (28) expression -> . assignment_expression
    (29) expression -> . expression COMMA assignment_expression
    (30) assignment_expression -> . IDENTIFIER OP_assign INTEGER
    (31) assignment_expression -> . IDENTIFIER OP_multiply INTEGER
    (32) assignment_expression -> . IDENTIFIER OP_divide INTEGER
    (33) assignment_expression -> . IDENTIFIER OP_mod INTEGER
    (34) assignment_expression -> . IDENTIFIER OP_add INTEGER
    (35) assignment_expression -> . IDENTIFIER OP_subtract INTEGER
    (36) assignment_expression -> . IDENTIFIER OP_greater INTEGER
    (37) assignment_expression -> . IDENTIFIER OP_less INTEGER
    (38) assignment_expression -> . IDENTIFIER OP_greaterequal INTEGER
    (39) assignment_expression -> . IDENTIFIER OP_lessequal INTEGER
    (40) assignment_expression -> . IDENTIFIER OP_equal INTEGER
    (41) assignment_expression -> . IDENTIFIER OP_notequal INTEGER
    (42) assignment_expression -> . INTEGER OP_assign INTEGER
    (43) assignment_expression -> . INTEGER OP_multiply INTEGER
    (44) assignment_expression -> . INTEGER OP_divide INTEGER
    (45) assignment_expression -> . INTEGER OP_mod INTEGER
    (46) assignment_expression -> . INTEGER OP_add INTEGER
    (47) assignment_expression -> . INTEGER OP_subtract INTEGER
    (48) assignment_expression -> . INTEGER OP_greater INTEGER
    (49) assignment_expression -> . INTEGER OP_less INTEGER
    (50) assignment_expression -> . INTEGER OP_greaterequal INTEGER
    (51) assignment_expression -> . INTEGER OP_lessequal INTEGER
    (52) assignment_expression -> . INTEGER OP_equal INTEGER
    (53) assignment_expression -> . INTEGER OP_notequal INTEGER
    (54) assignment_expression -> . IDENTIFIER OP_assign IDENTIFIER
    (55) assignment_expression -> . IDENTIFIER OP_multiply IDENTIFIER
    (56) assignment_expression -> . IDENTIFIER OP_divide IDENTIFIER
    (57) assignment_expression -> . IDENTIFIER OP_mod IDENTIFIER
    (58) assignment_expression -> . IDENTIFIER OP_add IDENTIFIER
    (59) assignment_expression -> . IDENTIFIER OP_subtract IDENTIFIER
    (60) assignment_expression -> . IDENTIFIER OP_greater IDENTIFIER
    (61) assignment_expression -> . IDENTIFIER OP_less IDENTIFIER
    (62) assignment_expression -> . IDENTIFIER OP_greaterequal IDENTIFIER
    (63) assignment_expression -> . IDENTIFIER OP_lessequal IDENTIFIER
    (64) assignment_expression -> . IDENTIFIER OP_equal IDENTIFIER
    (65) assignment_expression -> . IDENTIFIER OP_notequal IDENTIFIER
    (66) assignment_expression -> . primary_expression
    (67) assignment_expression -> . OP_subtract primary_expression
    (68) assignment_expression -> . primary_expression OP_multiply primary_expression
    (69) assignment_expression -> . primary_expression OP_divide primary_expression
    (70) assignment_expression -> . primary_expression OP_mod primary_expression
    (71) assignment_expression -> . primary_expression OP_add primary_expression
    (72) assignment_expression -> . primary_expression OP_subtract primary_expression
    (73) assignment_expression -> . primary_expression OP_greater primary_expression
    (74) assignment_expression -> . primary_expression OP_less primary_expression
    (75) assignment_expression -> . primary_expression OP_greaterequal primary_expression
    (76) assignment_expression -> . primary_expression OP_lessequal primary_expression
    (77) assignment_expression -> . primary_expression OP_equal primary_expression
    (78) assignment_expression -> . primary_expression OP_notequal primary_expression
    (79) assignment_expression -> . IDENTIFIER OP_assign assignment_expression
    (80) assignment_expression -> . primary_expression OP_lessequal STRING
    (81) primary_expression -> . INTEGER
    (82) primary_expression -> . IDENTIFIER
    (83) primary_expression -> . FLOAT
    (84) primary_expression -> . CHARACTER
    (85) primary_expression -> . STRING
    (86) primary_expression -> . id_expression
    (87) id_expression -> . IDENTIFIER
    (88) id_expression -> . LPAREN expression RPAREN

    SEMICOLON       shift and go to state 9
    LBRACE          shift and go to state 10
    KEY_if          shift and go to state 12
    KEY_while       shift and go to state 15
    KEY_for         shift and go to state 16
    KEY_int         shift and go to state 17
    KEY_char        shift and go to state 18
    KEY_float       shift and go to state 19
    KEY_string      shift and go to state 20
    IDENTIFIER      shift and go to state 22
    INTEGER         shift and go to state 23
    OP_subtract     shift and go to state 24
    FLOAT           shift and go to state 27
    CHARACTER       shift and go to state 28
    STRING          shift and go to state 26
    LPAREN          shift and go to state 13

    statement                      shift and go to state 160
    compound_statement             shift and go to state 4
    declaration_statement          shift and go to state 5
    selection_statement            shift and go to state 6
    iteration_statement            shift and go to state 7
    expression_statement           shift and go to state 8
    type_specifier                 shift and go to state 11
    expression                     shift and go to state 14
    assignment_expression          shift and go to state 21
    primary_expression             shift and go to state 25
    id_expression                  shift and go to state 29

state 160

    (21) iteration_statement -> KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statement .

    SEMICOLON       reduce using rule 21 (iteration_statement -> KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statement .)
    LBRACE          reduce using rule 21 (iteration_statement -> KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statement .)
    KEY_if          reduce using rule 21 (iteration_statement -> KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statement .)
    KEY_while       reduce using rule 21 (iteration_statement -> KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statement .)
    KEY_for         reduce using rule 21 (iteration_statement -> KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statement .)
    KEY_int         reduce using rule 21 (iteration_statement -> KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statement .)
    KEY_char        reduce using rule 21 (iteration_statement -> KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statement .)
    KEY_float       reduce using rule 21 (iteration_statement -> KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statement .)
    KEY_string      reduce using rule 21 (iteration_statement -> KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statement .)
    IDENTIFIER      reduce using rule 21 (iteration_statement -> KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statement .)
    INTEGER         reduce using rule 21 (iteration_statement -> KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statement .)
    OP_subtract     reduce using rule 21 (iteration_statement -> KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statement .)
    FLOAT           reduce using rule 21 (iteration_statement -> KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statement .)
    CHARACTER       reduce using rule 21 (iteration_statement -> KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statement .)
    STRING          reduce using rule 21 (iteration_statement -> KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statement .)
    LPAREN          reduce using rule 21 (iteration_statement -> KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statement .)
    $end            reduce using rule 21 (iteration_statement -> KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statement .)
    RBRACE          reduce using rule 21 (iteration_statement -> KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statement .)
    KEY_else        reduce using rule 21 (iteration_statement -> KEY_for LPAREN optexpr label SEMICOLON optexpr save SEMICOLON optexpr RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OP_multiply in state 22 resolved as shift
WARNING: shift/reduce conflict for OP_divide in state 22 resolved as shift
WARNING: shift/reduce conflict for OP_mod in state 22 resolved as shift
WARNING: shift/reduce conflict for OP_add in state 22 resolved as shift
WARNING: shift/reduce conflict for OP_subtract in state 22 resolved as shift
WARNING: shift/reduce conflict for OP_greater in state 22 resolved as shift
WARNING: shift/reduce conflict for OP_less in state 22 resolved as shift
WARNING: shift/reduce conflict for OP_greaterequal in state 22 resolved as shift
WARNING: shift/reduce conflict for OP_lessequal in state 22 resolved as shift
WARNING: shift/reduce conflict for OP_equal in state 22 resolved as shift
WARNING: shift/reduce conflict for OP_notequal in state 22 resolved as shift
WARNING: shift/reduce conflict for OP_multiply in state 22 resolved as shift
WARNING: shift/reduce conflict for OP_divide in state 22 resolved as shift
WARNING: shift/reduce conflict for OP_mod in state 22 resolved as shift
WARNING: shift/reduce conflict for OP_add in state 22 resolved as shift
WARNING: shift/reduce conflict for OP_subtract in state 22 resolved as shift
WARNING: shift/reduce conflict for OP_greater in state 22 resolved as shift
WARNING: shift/reduce conflict for OP_less in state 22 resolved as shift
WARNING: shift/reduce conflict for OP_greaterequal in state 22 resolved as shift
WARNING: shift/reduce conflict for OP_lessequal in state 22 resolved as shift
WARNING: shift/reduce conflict for OP_equal in state 22 resolved as shift
WARNING: shift/reduce conflict for OP_notequal in state 22 resolved as shift
WARNING: shift/reduce conflict for OP_multiply in state 23 resolved as shift
WARNING: shift/reduce conflict for OP_divide in state 23 resolved as shift
WARNING: shift/reduce conflict for OP_mod in state 23 resolved as shift
WARNING: shift/reduce conflict for OP_add in state 23 resolved as shift
WARNING: shift/reduce conflict for OP_subtract in state 23 resolved as shift
WARNING: shift/reduce conflict for OP_greater in state 23 resolved as shift
WARNING: shift/reduce conflict for OP_less in state 23 resolved as shift
WARNING: shift/reduce conflict for OP_greaterequal in state 23 resolved as shift
WARNING: shift/reduce conflict for OP_lessequal in state 23 resolved as shift
WARNING: shift/reduce conflict for OP_equal in state 23 resolved as shift
WARNING: shift/reduce conflict for OP_notequal in state 23 resolved as shift
WARNING: shift/reduce conflict for OP_multiply in state 89 resolved as shift
WARNING: shift/reduce conflict for OP_divide in state 89 resolved as shift
WARNING: shift/reduce conflict for OP_mod in state 89 resolved as shift
WARNING: shift/reduce conflict for OP_add in state 89 resolved as shift
WARNING: shift/reduce conflict for OP_subtract in state 89 resolved as shift
WARNING: shift/reduce conflict for OP_greater in state 89 resolved as shift
WARNING: shift/reduce conflict for OP_less in state 89 resolved as shift
WARNING: shift/reduce conflict for OP_greaterequal in state 89 resolved as shift
WARNING: shift/reduce conflict for OP_lessequal in state 89 resolved as shift
WARNING: shift/reduce conflict for OP_equal in state 89 resolved as shift
WARNING: shift/reduce conflict for OP_notequal in state 89 resolved as shift
WARNING: shift/reduce conflict for OP_multiply in state 89 resolved as shift
WARNING: shift/reduce conflict for OP_divide in state 89 resolved as shift
WARNING: shift/reduce conflict for OP_mod in state 89 resolved as shift
WARNING: shift/reduce conflict for OP_add in state 89 resolved as shift
WARNING: shift/reduce conflict for OP_subtract in state 89 resolved as shift
WARNING: shift/reduce conflict for OP_greater in state 89 resolved as shift
WARNING: shift/reduce conflict for OP_less in state 89 resolved as shift
WARNING: shift/reduce conflict for OP_greaterequal in state 89 resolved as shift
WARNING: shift/reduce conflict for OP_lessequal in state 89 resolved as shift
WARNING: shift/reduce conflict for OP_equal in state 89 resolved as shift
WARNING: shift/reduce conflict for OP_notequal in state 89 resolved as shift
WARNING: shift/reduce conflict for OP_multiply in state 90 resolved as shift
WARNING: shift/reduce conflict for OP_divide in state 90 resolved as shift
WARNING: shift/reduce conflict for OP_mod in state 90 resolved as shift
WARNING: shift/reduce conflict for OP_add in state 90 resolved as shift
WARNING: shift/reduce conflict for OP_subtract in state 90 resolved as shift
WARNING: shift/reduce conflict for OP_greater in state 90 resolved as shift
WARNING: shift/reduce conflict for OP_less in state 90 resolved as shift
WARNING: shift/reduce conflict for OP_greaterequal in state 90 resolved as shift
WARNING: shift/reduce conflict for OP_lessequal in state 90 resolved as shift
WARNING: shift/reduce conflict for OP_equal in state 90 resolved as shift
WARNING: shift/reduce conflict for OP_notequal in state 90 resolved as shift
WARNING: shift/reduce conflict for KEY_else in state 148 resolved as shift
WARNING: reduce/reduce conflict in state 22 resolved using rule (primary_expression -> IDENTIFIER)
WARNING: rejected rule (id_expression -> IDENTIFIER) in state 22
WARNING: reduce/reduce conflict in state 67 resolved using rule (primary_expression -> IDENTIFIER)
WARNING: rejected rule (id_expression -> IDENTIFIER) in state 67
WARNING: reduce/reduce conflict in state 89 resolved using rule (assignment_expression -> IDENTIFIER OP_assign IDENTIFIER)
WARNING: rejected rule (primary_expression -> IDENTIFIER) in state 89
WARNING: reduce/reduce conflict in state 89 resolved using rule (assignment_expression -> IDENTIFIER OP_assign IDENTIFIER)
WARNING: rejected rule (id_expression -> IDENTIFIER) in state 89
WARNING: reduce/reduce conflict in state 90 resolved using rule (assignment_expression -> IDENTIFIER OP_assign INTEGER)
WARNING: rejected rule (primary_expression -> INTEGER) in state 90
WARNING: reduce/reduce conflict in state 135 resolved using rule (assignment_expression -> primary_expression OP_lessequal STRING)
WARNING: rejected rule (primary_expression -> STRING) in state 135
WARNING: Rule (id_expression -> IDENTIFIER) is never reduced
