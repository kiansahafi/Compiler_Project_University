# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOOLEAN CHAR CLASS COMMA DIVIDE DO ELSE EQ FALSE FLOAT FOR GE GT IDENTIFIER IF INT LBRACE LBRACKET LE LPAREN LT MAIN MINUS NEW NOT NOT_EQ NUMBER PLUS PLUSASSIGN PRIVATE PUBLIC RBRACE RBRACKET RETURN RPAREN SEMICOLON STATIC THIS TIMES TRUE VOID WHILEstart : ClassDeclaration\n            | empty\n            | exp\n            ClassDeclaration : CLASS IDENTIFIER LBRACE RBRACE\n            | CLASS IDENTIFIER LBRACE MethodDeclaration RBRACE\n            | CLASS IDENTIFIER LBRACE FieldDeclaration RBRACEFieldDeclaration : Declarators IDENTIFIER SEMICOLONMethodDeclaration : Declarators IDENTIFIER LPAREN RPAREN LBRACE statement RBRACE\n        | Declarators IDENTIFIER LPAREN RPAREN LBRACE statement RETURN exp SEMICOLON RBRACE\n        | Declarators IDENTIFIER LPAREN ParameterList RPAREN LBRACE statement RETURN exp SEMICOLON RBRACE\n        | Declarators IDENTIFIER LPAREN ParameterList RPAREN LBRACE statement RBRACE ParameterList : Type IDENTIFIER\n    | Type IDENTIFIER COMMA Type IDENTIFIERDeclarators : Type\n    | STATIC Type\n    | PUBLIC Type\n    | PRIVATE Type\n    | PUBLIC STATIC Type\n    | PRIVATE STATIC TypeType : PrimeType\n    | ClassType\n    | arraytype PrimeType : INT\n    | BOOLEAN\n    | VOID\n    | FLOAT\n    ClassType : IDENTIFIER  arraytype : INT LBRACKET RBRACKET\n    | ClassType LBRACKET RBRACKET  argumentlist : exp\n    | exp COMMA exp Refrence : THIS\n    | IDENTIFIER statement : empty\n                | if_st\n                | while_st\n                | LBRACE statement RBRACE\n                | Refrence LPAREN argumentlist RPAREN\n                | Refrence LPAREN RPAREN SEMICOLON\n                | Refrence LBRACKET exp RBRACKET ASSIGN exp SEMICOLON\n                | Refrence ASSIGN exp SEMICOLON\n                | PrimeType IDENTIFIER ASSIGN IDENTIFIER SEMICOLON\n                | PrimeType IDENTIFIER ASSIGN exp SEMICOLON\n                | statement statement\n                | expwhile_st : WHILE LPAREN exp RPAREN statementif_st : IF LPAREN exp RPAREN statement ELSE statement\n    | IF LPAREN exp RPAREN statement exp :\n    | exp Binop exp\n    | IDENTIFIER\n    | Type exp\n    | Refrence LBRACKET exp RBRACKET\n    | Refrence LPAREN RPAREN\n    | Refrence LPAREN argumentlist RPAREN\n    | Unop exp\n    | LPAREN exp RPAREN\n    | TRUE\n    | IDENTIFIER Binop NUMBER\n    | FALSE\n    | NEW IDENTIFIER LPAREN RPAREN\n    | NEW INT LBRACKET exp RBRACKET\n    | NEW IDENTIFIER LBRACKET exp RBRACKET\n    | NUMBER Binop NUMBER\n    | NUMBER Binop float\n    | float Binop NUMBER\n    | float Binop float\n\n     Unop : NOT\n    | MINUS float : NUMBER COMMA NUMBER Binop : PLUS\n    | MINUS\n    | TIMES\n    | DIVIDE\n    | EQ\n    | NOT_EQ\n    | LT\n    | GT\n    | LE\n    | GE\n    | AND\n    | NOT\n    empty : '

_lr_action_items = {'CLASS': ([0, ], [5, ]), '$end': (
[0, 1, 2, 3, 4, 6, 7, 10, 11, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
 38, 41, 45, 53, 55, 57, 60, 61, 62, 63, 67, 68, 69, 70, 72, 80, 81, 83, 86, 87, 95, 96, ],
[-49, 0, -1, -2, -3, -27, -49, -49, -58, -60, -23, -20, -21, -22, -68, -69, -24, -25, -26, -49, -71, -72, -73, -74, -75,
 -76, -77, -78, -79, -80, -81, -82, -52, -56, -50, -59, -54, -57, -64, -65, -70, -28, -67, -66, -29, -4, -53, -55, -61,
 -5, -6, -63, -62, ]), 'PLUS': (
[0, 4, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
 38, 41, 42, 43, 44, 45, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 80, 81, 82, 83, 84, 85, 94, 95, 96,
 104, 107, 108, 109, 110, 111, 112, 113, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 133, 135, 136, 137,
 138, 139, 140, 141, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 162, 164, 165, ],
[-49, 27, 27, -49, -49, -49, -58, 27, -60, -23, 27, -20, -21, -22, -68, -69, -24, -25, -26, -49, -71, -72, -73, -74,
 -75, -76, -77, -78, -79, -80, -81, -82, 27, -49, -49, 27, 27, 27, -59, 27, -54, 27, -57, -64, -65, -70, -49, -49, -28,
 -67, -66, -29, -53, -55, -49, -61, 27, 27, 27, -63, -62, -49, 27, -49, -49, 27, -34, -35, -36, -20, -49, -49, -44, -49,
 -49, -49, -49, -49, -49, -49, -37, 27, -54, 27, 27, -49, 27, 27, -49, -38, -39, -53, -41, 27, 27, -49, -49, 27, -49,
 -42, -43, -48, -46, 27, -49, -40, -47, ]), 'MINUS': (
[0, 4, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
 38, 41, 42, 43, 44, 45, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 80, 81, 82, 83, 84, 85, 94, 95, 96,
 104, 107, 108, 109, 110, 111, 112, 113, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 133, 135, 136, 137,
 138, 139, 140, 141, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 162, 164, 165, ],
[22, 28, 28, 22, 22, 22, -58, 28, -60, -23, 28, -20, -21, -22, -68, -69, -24, -25, -26, 22, -71, -72, -73, -74, -75,
 -76, -77, -78, -79, -80, -81, -82, 28, 22, 22, 28, 28, 28, -59, 28, -54, 28, -57, -64, -65, -70, 22, 22, -28, -67, -66,
 -29, -53, -55, 22, -61, 28, 28, 28, -63, -62, 22, 28, 22, 22, 28, -34, -35, -36, -20, 22, 22, 22, 22, 22, 22, 22, 22,
 22, 22, -37, 28, -54, 28, 28, 22, 28, 28, 22, -38, -39, -53, -41, 28, 28, 22, 22, 28, 22, -42, -43, 22, 22, 28, 22,
 -40, 22, ]), 'TIMES': (
[0, 4, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
 38, 41, 42, 43, 44, 45, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 80, 81, 82, 83, 84, 85, 94, 95, 96,
 104, 107, 108, 109, 110, 111, 112, 113, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 133, 135, 136, 137,
 138, 139, 140, 141, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 162, 164, 165, ],
[-49, 29, 29, -49, -49, -49, -58, 29, -60, -23, 29, -20, -21, -22, -68, -69, -24, -25, -26, -49, -71, -72, -73, -74,
 -75, -76, -77, -78, -79, -80, -81, -82, 29, -49, -49, 29, 29, 29, -59, 29, -54, 29, -57, -64, -65, -70, -49, -49, -28,
 -67, -66, -29, -53, -55, -49, -61, 29, 29, 29, -63, -62, -49, 29, -49, -49, 29, -34, -35, -36, -20, -49, -49, -44, -49,
 -49, -49, -49, -49, -49, -49, -37, 29, -54, 29, 29, -49, 29, 29, -49, -38, -39, -53, -41, 29, 29, -49, -49, 29, -49,
 -42, -43, -48, -46, 29, -49, -40, -47, ]), 'DIVIDE': (
[0, 4, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
 38, 41, 42, 43, 44, 45, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 80, 81, 82, 83, 84, 85, 94, 95, 96,
 104, 107, 108, 109, 110, 111, 112, 113, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 133, 135, 136, 137,
 138, 139, 140, 141, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 162, 164, 165, ],
[-49, 30, 30, -49, -49, -49, -58, 30, -60, -23, 30, -20, -21, -22, -68, -69, -24, -25, -26, -49, -71, -72, -73, -74,
 -75, -76, -77, -78, -79, -80, -81, -82, 30, -49, -49, 30, 30, 30, -59, 30, -54, 30, -57, -64, -65, -70, -49, -49, -28,
 -67, -66, -29, -53, -55, -49, -61, 30, 30, 30, -63, -62, -49, 30, -49, -49, 30, -34, -35, -36, -20, -49, -49, -44, -49,
 -49, -49, -49, -49, -49, -49, -37, 30, -54, 30, 30, -49, 30, 30, -49, -38, -39, -53, -41, 30, 30, -49, -49, 30, -49,
 -42, -43, -48, -46, 30, -49, -40, -47, ]), 'EQ': (
[0, 4, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
 38, 41, 42, 43, 44, 45, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 80, 81, 82, 83, 84, 85, 94, 95, 96,
 104, 107, 108, 109, 110, 111, 112, 113, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 133, 135, 136, 137,
 138, 139, 140, 141, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 162, 164, 165, ],
[-49, 31, 31, -49, -49, -49, -58, 31, -60, -23, 31, -20, -21, -22, -68, -69, -24, -25, -26, -49, -71, -72, -73, -74,
 -75, -76, -77, -78, -79, -80, -81, -82, 31, -49, -49, 31, 31, 31, -59, 31, -54, 31, -57, -64, -65, -70, -49, -49, -28,
 -67, -66, -29, -53, -55, -49, -61, 31, 31, 31, -63, -62, -49, 31, -49, -49, 31, -34, -35, -36, -20, -49, -49, -44, -49,
 -49, -49, -49, -49, -49, -49, -37, 31, -54, 31, 31, -49, 31, 31, -49, -38, -39, -53, -41, 31, 31, -49, -49, 31, -49,
 -42, -43, -48, -46, 31, -49, -40, -47, ]), 'NOT_EQ': (
[0, 4, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
 38, 41, 42, 43, 44, 45, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 80, 81, 82, 83, 84, 85, 94, 95, 96,
 104, 107, 108, 109, 110, 111, 112, 113, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 133, 135, 136, 137,
 138, 139, 140, 141, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 162, 164, 165, ],
[-49, 32, 32, -49, -49, -49, -58, 32, -60, -23, 32, -20, -21, -22, -68, -69, -24, -25, -26, -49, -71, -72, -73, -74,
 -75, -76, -77, -78, -79, -80, -81, -82, 32, -49, -49, 32, 32, 32, -59, 32, -54, 32, -57, -64, -65, -70, -49, -49, -28,
 -67, -66, -29, -53, -55, -49, -61, 32, 32, 32, -63, -62, -49, 32, -49, -49, 32, -34, -35, -36, -20, -49, -49, -44, -49,
 -49, -49, -49, -49, -49, -49, -37, 32, -54, 32, 32, -49, 32, 32, -49, -38, -39, -53, -41, 32, 32, -49, -49, 32, -49,
 -42, -43, -48, -46, 32, -49, -40, -47, ]), 'LT': (
[0, 4, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
 38, 41, 42, 43, 44, 45, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 80, 81, 82, 83, 84, 85, 94, 95, 96,
 104, 107, 108, 109, 110, 111, 112, 113, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 133, 135, 136, 137,
 138, 139, 140, 141, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 162, 164, 165, ],
[-49, 33, 33, -49, -49, -49, -58, 33, -60, -23, 33, -20, -21, -22, -68, -69, -24, -25, -26, -49, -71, -72, -73, -74,
 -75, -76, -77, -78, -79, -80, -81, -82, 33, -49, -49, 33, 33, 33, -59, 33, -54, 33, -57, -64, -65, -70, -49, -49, -28,
 -67, -66, -29, -53, -55, -49, -61, 33, 33, 33, -63, -62, -49, 33, -49, -49, 33, -34, -35, -36, -20, -49, -49, -44, -49,
 -49, -49, -49, -49, -49, -49, -37, 33, -54, 33, 33, -49, 33, 33, -49, -38, -39, -53, -41, 33, 33, -49, -49, 33, -49,
 -42, -43, -48, -46, 33, -49, -40, -47, ]), 'GT': (
[0, 4, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
 38, 41, 42, 43, 44, 45, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 80, 81, 82, 83, 84, 85, 94, 95, 96,
 104, 107, 108, 109, 110, 111, 112, 113, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 133, 135, 136, 137,
 138, 139, 140, 141, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 162, 164, 165, ],
[-49, 34, 34, -49, -49, -49, -58, 34, -60, -23, 34, -20, -21, -22, -68, -69, -24, -25, -26, -49, -71, -72, -73, -74,
 -75, -76, -77, -78, -79, -80, -81, -82, 34, -49, -49, 34, 34, 34, -59, 34, -54, 34, -57, -64, -65, -70, -49, -49, -28,
 -67, -66, -29, -53, -55, -49, -61, 34, 34, 34, -63, -62, -49, 34, -49, -49, 34, -34, -35, -36, -20, -49, -49, -44, -49,
 -49, -49, -49, -49, -49, -49, -37, 34, -54, 34, 34, -49, 34, 34, -49, -38, -39, -53, -41, 34, 34, -49, -49, 34, -49,
 -42, -43, -48, -46, 34, -49, -40, -47, ]), 'LE': (
[0, 4, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
 38, 41, 42, 43, 44, 45, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 80, 81, 82, 83, 84, 85, 94, 95, 96,
 104, 107, 108, 109, 110, 111, 112, 113, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 133, 135, 136, 137,
 138, 139, 140, 141, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 162, 164, 165, ],
[-49, 35, 35, -49, -49, -49, -58, 35, -60, -23, 35, -20, -21, -22, -68, -69, -24, -25, -26, -49, -71, -72, -73, -74,
 -75, -76, -77, -78, -79, -80, -81, -82, 35, -49, -49, 35, 35, 35, -59, 35, -54, 35, -57, -64, -65, -70, -49, -49, -28,
 -67, -66, -29, -53, -55, -49, -61, 35, 35, 35, -63, -62, -49, 35, -49, -49, 35, -34, -35, -36, -20, -49, -49, -44, -49,
 -49, -49, -49, -49, -49, -49, -37, 35, -54, 35, 35, -49, 35, 35, -49, -38, -39, -53, -41, 35, 35, -49, -49, 35, -49,
 -42, -43, -48, -46, 35, -49, -40, -47, ]), 'GE': (
[0, 4, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
 38, 41, 42, 43, 44, 45, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 80, 81, 82, 83, 84, 85, 94, 95, 96,
 104, 107, 108, 109, 110, 111, 112, 113, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 133, 135, 136, 137,
 138, 139, 140, 141, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 162, 164, 165, ],
[-49, 36, 36, -49, -49, -49, -58, 36, -60, -23, 36, -20, -21, -22, -68, -69, -24, -25, -26, -49, -71, -72, -73, -74,
 -75, -76, -77, -78, -79, -80, -81, -82, 36, -49, -49, 36, 36, 36, -59, 36, -54, 36, -57, -64, -65, -70, -49, -49, -28,
 -67, -66, -29, -53, -55, -49, -61, 36, 36, 36, -63, -62, -49, 36, -49, -49, 36, -34, -35, -36, -20, -49, -49, -44, -49,
 -49, -49, -49, -49, -49, -49, -37, 36, -54, 36, 36, -49, 36, 36, -49, -38, -39, -53, -41, 36, 36, -49, -49, 36, -49,
 -42, -43, -48, -46, 36, -49, -40, -47, ]), 'AND': (
[0, 4, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
 38, 41, 42, 43, 44, 45, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 80, 81, 82, 83, 84, 85, 94, 95, 96,
 104, 107, 108, 109, 110, 111, 112, 113, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 133, 135, 136, 137,
 138, 139, 140, 141, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 162, 164, 165, ],
[-49, 37, 37, -49, -49, -49, -58, 37, -60, -23, 37, -20, -21, -22, -68, -69, -24, -25, -26, -49, -71, -72, -73, -74,
 -75, -76, -77, -78, -79, -80, -81, -82, 37, -49, -49, 37, 37, 37, -59, 37, -54, 37, -57, -64, -65, -70, -49, -49, -28,
 -67, -66, -29, -53, -55, -49, -61, 37, 37, 37, -63, -62, -49, 37, -49, -49, 37, -34, -35, -36, -20, -49, -49, -44, -49,
 -49, -49, -49, -49, -49, -49, -37, 37, -54, 37, 37, -49, 37, 37, -49, -38, -39, -53, -41, 37, 37, -49, -49, 37, -49,
 -42, -43, -48, -46, 37, -49, -40, -47, ]), 'NOT': (
[0, 4, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
 38, 41, 42, 43, 44, 45, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 80, 81, 82, 83, 84, 85, 94, 95, 96,
 104, 107, 108, 109, 110, 111, 112, 113, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 133, 135, 136, 137,
 138, 139, 140, 141, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 162, 164, 165, ],
[21, 38, 38, 21, 21, 21, -58, 38, -60, -23, 38, -20, -21, -22, -68, -69, -24, -25, -26, 21, -71, -72, -73, -74, -75,
 -76, -77, -78, -79, -80, -81, -82, 38, 21, 21, 38, 38, 38, -59, 38, -54, 38, -57, -64, -65, -70, 21, 21, -28, -67, -66,
 -29, -53, -55, 21, -61, 38, 38, 38, -63, -62, 21, 38, 21, 21, 38, -34, -35, -36, -20, 21, 21, 21, 21, 21, 21, 21, 21,
 21, 21, -37, 38, -54, 38, 38, 21, 38, 38, 21, -38, -39, -53, -41, 38, 38, 21, 21, 38, 21, -42, -43, 21, 21, 38, 21,
 -40, 21, ]), 'IDENTIFIER': (
[0, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
 41, 42, 43, 45, 53, 54, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89, 90,
 91, 92, 93, 95, 96, 97, 99, 100, 103, 104, 107, 108, 109, 110, 111, 112, 113, 115, 118, 119, 120, 121, 123, 124, 125,
 126, 128, 129, 130, 131, 132, 135, 138, 141, 145, 146, 147, 148, 149, 151, 152, 155, 156, 157, 158, 159, 162, 164,
 165, ],
[6, 39, -27, 6, 6, 6, -58, -60, 48, -23, -20, -21, -22, -68, -69, -24, -25, -26, 6, -71, -72, -73, -74, -75, -76, -77,
 -78, -79, -80, -81, -82, -52, 6, 6, -56, -50, 71, -59, -54, -57, -64, -65, -70, 6, 6, -28, -67, -66, -29, -27, 88, -14,
 71, 71, 71, -53, -55, 6, -61, -15, -16, 71, -17, 71, -63, -62, 71, -18, -19, 106, 107, -27, 107, 107, -45, -34, -35,
 -36, 127, 107, 71, 107, 107, 6, 6, 6, 6, 6, 6, 107, 143, -37, -54, 149, 6, -38, -39, -53, -41, -27, 107, 107, 6, -42,
 -43, 107, 107, 107, -40, 107, ]), 'LPAREN': (
[0, 6, 7, 8, 9, 10, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
 41, 42, 43, 45, 48, 53, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 80, 81, 82, 83, 88, 95, 96, 104, 107, 108, 109,
 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 135, 138, 141, 145, 146,
 147, 148, 149, 151, 152, 155, 156, 157, 158, 159, 162, 164, 165, ],
[9, -27, 9, 43, 9, 9, -58, -60, -23, -20, -21, -22, -32, -68, -69, -24, -25, -26, 9, -71, -72, -73, -74, -75, -76, -77,
 -78, -79, -80, -81, -82, -52, 9, 9, -56, 64, -50, -59, -54, -57, -64, -65, -70, 9, 9, -28, -67, -66, -29, -53, -55, 9,
 -61, 97, -63, -62, 9, -27, 9, 9, -45, -34, -35, -36, 124, -20, 128, 129, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, -37, -54, 9, 9,
 -38, -39, -53, -41, -27, 9, 9, 9, -42, -43, 9, 9, 9, -40, 9, ]), 'TRUE': (
[0, 6, 7, 9, 10, 11, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42,
 43, 45, 53, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 80, 81, 82, 83, 95, 96, 104, 107, 108, 109, 110, 111, 112,
 113, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 135, 138, 141, 145, 146, 147, 148, 149, 151, 152, 155,
 156, 157, 158, 159, 162, 164, 165, ],
[11, -27, 11, 11, 11, -58, -60, -23, -20, -21, -22, -68, -69, -24, -25, -26, 11, -71, -72, -73, -74, -75, -76, -77, -78,
 -79, -80, -81, -82, -52, 11, 11, -56, -50, -59, -54, -57, -64, -65, -70, 11, 11, -28, -67, -66, -29, -53, -55, 11, -61,
 -63, -62, 11, -27, 11, 11, -45, -34, -35, -36, -20, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, -37, -54, 11, 11, -38, -39,
 -53, -41, -27, 11, 11, 11, -42, -43, 11, 11, 11, -40, 11, ]), 'FALSE': (
[0, 6, 7, 9, 10, 11, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42,
 43, 45, 53, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 80, 81, 82, 83, 95, 96, 104, 107, 108, 109, 110, 111, 112,
 113, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 135, 138, 141, 145, 146, 147, 148, 149, 151, 152, 155,
 156, 157, 158, 159, 162, 164, 165, ],
[13, -27, 13, 13, 13, -58, -60, -23, -20, -21, -22, -68, -69, -24, -25, -26, 13, -71, -72, -73, -74, -75, -76, -77, -78,
 -79, -80, -81, -82, -52, 13, 13, -56, -50, -59, -54, -57, -64, -65, -70, 13, 13, -28, -67, -66, -29, -53, -55, 13, -61,
 -63, -62, 13, -27, 13, 13, -45, -34, -35, -36, -20, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, -37, -54, 13, 13, -38, -39,
 -53, -41, -27, 13, 13, 13, -42, -43, 13, 13, 13, -40, 13, ]), 'NEW': (
[0, 6, 7, 9, 10, 11, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42,
 43, 45, 53, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 80, 81, 82, 83, 95, 96, 104, 107, 108, 109, 110, 111, 112,
 113, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 135, 138, 141, 145, 146, 147, 148, 149, 151, 152, 155,
 156, 157, 158, 159, 162, 164, 165, ],
[14, -27, 14, 14, 14, -58, -60, -23, -20, -21, -22, -68, -69, -24, -25, -26, 14, -71, -72, -73, -74, -75, -76, -77, -78,
 -79, -80, -81, -82, -52, 14, 14, -56, -50, -59, -54, -57, -64, -65, -70, 14, 14, -28, -67, -66, -29, -53, -55, 14, -61,
 -63, -62, 14, -27, 14, 14, -45, -34, -35, -36, -20, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, -37, -54, 14, 14, -38, -39,
 -53, -41, -27, 14, 14, 14, -42, -43, 14, 14, 14, -40, 14, ]), 'NUMBER': (
[0, 6, 7, 9, 10, 11, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41,
 42, 43, 45, 46, 47, 51, 53, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 80, 81, 82, 83, 95, 96, 104, 107, 108, 109,
 110, 111, 112, 113, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 135, 138, 141, 145, 146, 147, 148, 149,
 151, 152, 155, 156, 157, 158, 159, 162, 164, 165, ],
[12, -27, 12, 12, 12, -58, -60, -23, -20, -21, -22, -68, -69, -24, -25, -26, 12, -71, -72, -73, -74, -75, -76, -77, -78,
 -79, -80, -81, -82, 55, -52, 12, 12, -56, 61, 63, 69, -50, -59, -54, -57, -64, -65, -70, 12, 12, -28, -67, -66, -29,
 -53, -55, 12, -61, -63, -62, 12, -27, 12, 12, -45, -34, -35, -36, -20, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, -37,
 -54, 12, 12, -38, -39, -53, -41, -27, 12, 12, 12, -42, -43, 12, 12, 12, -40, 12, ]), 'THIS': (
[0, 6, 7, 9, 10, 11, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42,
 43, 45, 53, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 80, 81, 82, 83, 95, 96, 104, 107, 108, 109, 110, 111, 112,
 113, 115, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 135, 138, 141, 145, 146, 147, 148, 149, 151, 152, 155,
 156, 157, 158, 159, 162, 164, 165, ],
[20, -27, 20, 20, 20, -58, -60, -23, -20, -21, -22, -68, -69, -24, -25, -26, 20, -71, -72, -73, -74, -75, -76, -77, -78,
 -79, -80, -81, -82, -52, 20, 20, -56, -50, -59, -54, -57, -64, -65, -70, 20, 20, -28, -67, -66, -29, -53, -55, 20, -61,
 -63, -62, 20, -27, 20, 20, -45, -34, -35, -36, -20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, -37, -54, 20, 20, -38, -39,
 -53, -41, -27, 20, 20, 20, -42, -43, 20, 20, 20, -40, 20, ]), 'INT': (
[0, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41,
 42, 43, 45, 53, 54, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 77, 78, 79, 80, 81, 82, 83, 91, 93, 95, 96, 97,
 104, 107, 108, 109, 110, 111, 112, 113, 115, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 135, 138, 141,
 145, 146, 147, 148, 149, 151, 152, 155, 156, 157, 158, 159, 162, 164, 165, ],
[15, -27, 15, 15, 15, -58, -60, 49, -23, -20, -21, -22, -68, -69, -24, -25, -26, 15, -71, -72, -73, -74, -75, -76, -77,
 -78, -79, -80, -81, -82, -52, 15, 15, -56, -50, 15, -59, -54, -57, -64, -65, -70, 15, 15, -28, -67, -66, -29, 15, 15,
 15, -53, -55, 15, -61, 15, 15, -63, -62, 15, 15, -27, 15, 15, -45, -34, -35, -36, -20, 15, 15, 15, 15, 15, 15, 15, 15,
 15, 15, 15, -37, -54, 15, 15, -38, -39, -53, -41, -27, 15, 15, 15, -42, -43, 15, 15, 15, -40, 15, ]), 'BOOLEAN': (
[0, 6, 7, 9, 10, 11, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42,
 43, 45, 53, 54, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 77, 78, 79, 80, 81, 82, 83, 91, 93, 95, 96, 97, 104,
 107, 108, 109, 110, 111, 112, 113, 115, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 135, 138, 141, 145,
 146, 147, 148, 149, 151, 152, 155, 156, 157, 158, 159, 162, 164, 165, ],
[23, -27, 23, 23, 23, -58, -60, -23, -20, -21, -22, -68, -69, -24, -25, -26, 23, -71, -72, -73, -74, -75, -76, -77, -78,
 -79, -80, -81, -82, -52, 23, 23, -56, -50, 23, -59, -54, -57, -64, -65, -70, 23, 23, -28, -67, -66, -29, 23, 23, 23,
 -53, -55, 23, -61, 23, 23, -63, -62, 23, 23, -27, 23, 23, -45, -34, -35, -36, -20, 23, 23, 23, 23, 23, 23, 23, 23, 23,
 23, 23, -37, -54, 23, 23, -38, -39, -53, -41, -27, 23, 23, 23, -42, -43, 23, 23, 23, -40, 23, ]), 'VOID': (
[0, 6, 7, 9, 10, 11, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42,
 43, 45, 53, 54, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 77, 78, 79, 80, 81, 82, 83, 91, 93, 95, 96, 97, 104,
 107, 108, 109, 110, 111, 112, 113, 115, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 135, 138, 141, 145,
 146, 147, 148, 149, 151, 152, 155, 156, 157, 158, 159, 162, 164, 165, ],
[24, -27, 24, 24, 24, -58, -60, -23, -20, -21, -22, -68, -69, -24, -25, -26, 24, -71, -72, -73, -74, -75, -76, -77, -78,
 -79, -80, -81, -82, -52, 24, 24, -56, -50, 24, -59, -54, -57, -64, -65, -70, 24, 24, -28, -67, -66, -29, 24, 24, 24,
 -53, -55, 24, -61, 24, 24, -63, -62, 24, 24, -27, 24, 24, -45, -34, -35, -36, -20, 24, 24, 24, 24, 24, 24, 24, 24, 24,
 24, 24, -37, -54, 24, 24, -38, -39, -53, -41, -27, 24, 24, 24, -42, -43, 24, 24, 24, -40, 24, ]), 'FLOAT': (
[0, 6, 7, 9, 10, 11, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42,
 43, 45, 53, 54, 55, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 77, 78, 79, 80, 81, 82, 83, 91, 93, 95, 96, 97, 104,
 107, 108, 109, 110, 111, 112, 113, 115, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 135, 138, 141, 145,
 146, 147, 148, 149, 151, 152, 155, 156, 157, 158, 159, 162, 164, 165, ],
[25, -27, 25, 25, 25, -58, -60, -23, -20, -21, -22, -68, -69, -24, -25, -26, 25, -71, -72, -73, -74, -75, -76, -77, -78,
 -79, -80, -81, -82, -52, 25, 25, -56, -50, 25, -59, -54, -57, -64, -65, -70, 25, 25, -28, -67, -66, -29, 25, 25, 25,
 -53, -55, 25, -61, 25, 25, -63, -62, 25, 25, -27, 25, 25, -45, -34, -35, -36, -20, 25, 25, 25, 25, 25, 25, 25, 25, 25,
 25, 25, -37, -54, 25, 25, -38, -39, -53, -41, -27, 25, 25, 25, -42, -43, 25, 25, 25, -40, 25, ]), 'RPAREN': (
[6, 7, 9, 10, 11, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 43,
 44, 45, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 80, 81, 82, 83, 94, 95, 96, 97, 102, 106, 124, 128,
 129, 134, 139, 140, 143, ],
[-27, -49, -49, -49, -58, -60, -23, -20, -21, -22, -68, -69, -24, -25, -26, -49, -71, -72, -73, -74, -75, -76, -77, -78,
 -79, -80, -81, -82, -52, 57, 60, -56, -50, -59, -54, 81, -30, -57, -64, -65, -70, 83, -28, -67, -66, -29, -53, -55,
 -49, -61, -31, -63, -62, 101, 105, -12, 135, -49, -49, 145, 151, 152, -13, ]), 'RBRACKET': (
[6, 7, 10, 11, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 45,
 50, 52, 53, 55, 56, 57, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 80, 81, 83, 84, 85, 95, 96, 125, 136, ],
[-27, -49, -49, -58, -60, -23, -20, -21, -22, -68, -69, -24, -25, -26, -49, -71, -72, -73, -74, -75, -76, -77, -78, -79,
 -80, -81, -82, -52, -49, -56, 67, 70, -50, -59, 80, -54, -57, -64, -65, -70, -49, -49, -28, -67, -66, -29, -53, -55,
 -61, 95, 96, -63, -62, -49, 147, ]), 'COMMA': (
[6, 7, 10, 11, 12, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 43,
 45, 53, 55, 57, 59, 60, 61, 62, 63, 67, 68, 69, 70, 80, 81, 83, 95, 96, 106, 124, ],
[-27, -49, -49, -58, 47, -60, -23, -20, -21, -22, -68, -69, -24, -25, -26, -49, -71, -72, -73, -74, -75, -76, -77, -78,
 -79, -80, -81, -82, -52, -49, -56, -50, -59, -54, 82, -57, 47, -65, -70, -28, -67, 47, -29, -53, -55, -61, -63, -62,
 119, -49, ]), 'RBRACE': (
[6, 7, 10, 11, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 45, 53,
 54, 55, 57, 60, 61, 62, 63, 67, 68, 69, 70, 73, 74, 80, 81, 83, 95, 96, 98, 104, 107, 108, 109, 110, 111, 112, 113,
 115, 118, 120, 121, 122, 130, 132, 135, 142, 144, 145, 146, 147, 148, 151, 152, 154, 156, 157, 158, 159, 160, 162, 163,
 164, 165, ],
[-27, -49, -49, -58, -60, -23, -20, -21, -22, -68, -69, -24, -25, -26, -49, -71, -72, -73, -74, -75, -76, -77, -78, -79,
 -80, -81, -82, -52, -56, -50, 72, -59, -54, -57, -64, -65, -70, -28, -67, -66, -29, 86, 87, -53, -55, -61, -63, -62,
 -7, -49, -27, -49, 122, -45, -34, -35, -36, -20, -49, 132, -44, -8, 142, -37, -54, -11, 154, -38, -39, -53, -41, -49,
 -49, -9, -42, -43, -48, -46, 163, -49, -10, -40, -47, ]), 'RETURN': (
[6, 7, 10, 11, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 45, 53,
 55, 57, 60, 61, 62, 63, 67, 68, 69, 70, 80, 81, 83, 95, 96, 104, 107, 109, 110, 111, 112, 113, 115, 118, 121, 130, 132,
 135, 145, 146, 147, 148, 151, 152, 156, 157, 158, 159, 162, 164, 165, ],
[-27, -49, -49, -58, -60, -23, -20, -21, -22, -68, -69, -24, -25, -26, -49, -71, -72, -73, -74, -75, -76, -77, -78, -79,
 -80, -81, -82, -52, -56, -50, -59, -54, -57, -64, -65, -70, -28, -67, -66, -29, -53, -55, -61, -63, -62, -49, -27, 123,
 -45, -34, -35, -36, -20, -49, -44, 141, -37, -54, -38, -39, -53, -41, -49, -49, -42, -43, -48, -46, -49, -40, -47, ]),
                    'LBRACE': (
                    [6, 7, 10, 11, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
                     37, 38, 39, 41, 45, 53, 55, 57, 60, 61, 62, 63, 67, 68, 69, 70, 80, 81, 83, 95, 96, 101, 104, 105,
                     107, 108, 109, 110, 111, 112, 113, 115, 118, 120, 121, 130, 132, 135, 145, 146, 147, 148, 151, 152,
                     156, 157, 158, 159, 162, 164, 165, ],
                    [-27, -49, -49, -58, -60, -23, -20, -21, -22, -68, -69, -24, -25, -26, -49, -71, -72, -73, -74, -75,
                     -76, -77, -78, -79, -80, -81, -82, 54, -52, -56, -50, -59, -54, -57, -64, -65, -70, -28, -67, -66,
                     -29, -53, -55, -61, -63, -62, 104, 108, 118, -27, 108, 108, -45, -34, -35, -36, -20, 108, 108, 108,
                     108, -37, -54, -38, -39, -53, -41, 108, 108, -42, -43, 108, 108, 108, -40, 108, ]), 'IF': (
    [6, 7, 10, 11, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 45,
     53, 55, 57, 60, 61, 62, 63, 67, 68, 69, 70, 80, 81, 83, 95, 96, 104, 107, 108, 109, 110, 111, 112, 113, 115, 118,
     120, 121, 130, 132, 135, 145, 146, 147, 148, 151, 152, 156, 157, 158, 159, 162, 164, 165, ],
    [-27, -49, -49, -58, -60, -23, -20, -21, -22, -68, -69, -24, -25, -26, -49, -71, -72, -73, -74, -75, -76, -77, -78,
     -79, -80, -81, -82, -52, -56, -50, -59, -54, -57, -64, -65, -70, -28, -67, -66, -29, -53, -55, -61, -63, -62, 116,
     -27, 116, 116, -45, -34, -35, -36, -20, 116, 116, 116, 116, -37, -54, -38, -39, -53, -41, 116, 116, -42, -43, 116,
     116, 116, -40, 116, ]), 'WHILE': (
    [6, 7, 10, 11, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 45,
     53, 55, 57, 60, 61, 62, 63, 67, 68, 69, 70, 80, 81, 83, 95, 96, 104, 107, 108, 109, 110, 111, 112, 113, 115, 118,
     120, 121, 130, 132, 135, 145, 146, 147, 148, 151, 152, 156, 157, 158, 159, 162, 164, 165, ],
    [-27, -49, -49, -58, -60, -23, -20, -21, -22, -68, -69, -24, -25, -26, -49, -71, -72, -73, -74, -75, -76, -77, -78,
     -79, -80, -81, -82, -52, -56, -50, -59, -54, -57, -64, -65, -70, -28, -67, -66, -29, -53, -55, -61, -63, -62, 117,
     -27, 117, 117, -45, -34, -35, -36, -20, 117, 117, 117, 117, -37, -54, -38, -39, -53, -41, 117, 117, -42, -43, 117,
     117, 117, -40, 117, ]), 'ELSE': (
    [6, 7, 10, 11, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 45,
     53, 55, 57, 60, 61, 62, 63, 67, 68, 69, 70, 80, 81, 83, 95, 96, 107, 110, 111, 112, 113, 115, 121, 132, 135, 145,
     146, 147, 148, 151, 152, 156, 157, 158, 159, 162, 164, 165, ],
    [-27, -49, -49, -58, -60, -23, -20, -21, -22, -68, -69, -24, -25, -26, -49, -71, -72, -73, -74, -75, -76, -77, -78,
     -79, -80, -81, -82, -52, -56, -50, -59, -54, -57, -64, -65, -70, -28, -67, -66, -29, -53, -55, -61, -63, -62, -27,
     -45, -34, -35, -36, -20, -44, -37, -54, -38, -39, -53, -41, -49, -49, -42, -43, 162, -46, -49, -40, -47, ]),
                    'SEMICOLON': (
                    [6, 7, 10, 11, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
                     37, 38, 41, 45, 53, 55, 57, 60, 61, 62, 63, 67, 68, 69, 70, 80, 81, 83, 88, 95, 96, 123, 126, 133,
                     135, 137, 138, 141, 149, 150, 153, 155, 161, ],
                    [-27, -49, -49, -58, -60, -23, -20, -21, -22, -68, -69, -24, -25, -26, -49, -71, -72, -73, -74, -75,
                     -76, -77, -78, -79, -80, -81, -82, -52, -56, -50, -59, -54, -57, -64, -65, -70, -28, -67, -66, -29,
                     -53, -55, -61, 98, -63, -62, -49, -49, 144, 146, 148, -49, -49, 156, 157, 160, -49, 164, ]),
                    'LBRACKET': ([6, 8, 15, 18, 20, 48, 49, 71, 107, 114, 149, ],
                                 [-27, 42, 50, 52, -32, 65, 66, -27, -27, 125, -27, ]),
                    'ASSIGN': ([20, 107, 114, 127, 147, ], [-32, -33, 126, 138, 155, ]),
                    'STATIC': ([54, 78, 79, ], [77, 91, 93, ]), 'PUBLIC': ([54, ], [78, ]),
                    'PRIVATE': ([54, ], [79, ]), }

_lr_action = {}
for _k, _v in _lr_action_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_action:  _lr_action[_x] = {}
        _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start': ([0, ], [1, ]), 'ClassDeclaration': ([0, ], [2, ]), 'empty': (
[0, 104, 108, 109, 118, 120, 121, 130, 151, 152, 158, 159, 162, 165, ],
[3, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, ]), 'exp': (
[0, 7, 9, 10, 26, 42, 43, 65, 66, 82, 104, 108, 109, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 138, 141, 151,
 152, 155, 158, 159, 162, 165, ],
[4, 41, 44, 45, 53, 56, 59, 84, 85, 94, 110, 110, 110, 110, 110, 110, 133, 59, 136, 137, 139, 140, 110, 150, 153, 110,
 110, 161, 110, 110, 110, 110, ]), 'Type': (
[0, 7, 9, 10, 26, 42, 43, 54, 65, 66, 77, 78, 79, 82, 91, 93, 97, 104, 108, 109, 118, 119, 120, 121, 123, 124, 125, 126,
 128, 129, 130, 138, 141, 151, 152, 155, 158, 159, 162, 165, ],
[7, 7, 7, 7, 7, 7, 7, 76, 7, 7, 89, 90, 92, 7, 99, 100, 103, 7, 7, 7, 7, 131, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
 7, 7, 7, 7, ]), 'Refrence': (
[0, 7, 9, 10, 26, 42, 43, 65, 66, 82, 104, 108, 109, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 138, 141, 151,
 152, 155, 158, 159, 162, 165, ],
[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 114, 114, 114, 114, 114, 114, 8, 8, 8, 8, 8, 8, 114, 8, 8, 114, 114, 8, 114, 114, 114,
 114, ]), 'Unop': (
[0, 7, 9, 10, 26, 42, 43, 65, 66, 82, 104, 108, 109, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 138, 141, 151,
 152, 155, 158, 159, 162, 165, ],
[10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
 10, 10, ]), 'float': (
[0, 7, 9, 10, 26, 42, 43, 46, 51, 65, 66, 82, 104, 108, 109, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 138, 141,
 151, 152, 155, 158, 159, 162, 165, ],
[16, 16, 16, 16, 16, 16, 16, 62, 68, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
 16, 16, 16, 16, ]), 'PrimeType': (
[0, 7, 9, 10, 26, 42, 43, 54, 65, 66, 77, 78, 79, 82, 91, 93, 97, 104, 108, 109, 118, 119, 120, 121, 123, 124, 125, 126,
 128, 129, 130, 138, 141, 151, 152, 155, 158, 159, 162, 165, ],
[17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 115, 115, 115, 115, 17, 115, 115, 17, 17, 17, 17,
 17, 17, 115, 17, 17, 115, 115, 17, 115, 115, 115, 115, ]), 'ClassType': (
[0, 7, 9, 10, 26, 42, 43, 54, 65, 66, 77, 78, 79, 82, 91, 93, 97, 104, 108, 109, 118, 119, 120, 121, 123, 124, 125, 126,
 128, 129, 130, 138, 141, 151, 152, 155, 158, 159, 162, 165, ],
[18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, ]), 'arraytype': (
[0, 7, 9, 10, 26, 42, 43, 54, 65, 66, 77, 78, 79, 82, 91, 93, 97, 104, 108, 109, 118, 119, 120, 121, 123, 124, 125, 126,
 128, 129, 130, 138, 141, 151, 152, 155, 158, 159, 162, 165, ],
[19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, ]), 'Binop': (
[4, 6, 12, 16, 41, 44, 45, 53, 56, 59, 84, 85, 94, 107, 110, 133, 136, 137, 139, 140, 149, 150, 153, 161, ],
[26, 40, 46, 51, 26, 26, 26, 26, 26, 26, 26, 26, 26, 40, 26, 26, 26, 26, 26, 26, 40, 26, 26, 26, ]),
                  'argumentlist': ([43, 124, ], [58, 134, ]), 'MethodDeclaration': ([54, ], [73, ]),
                  'FieldDeclaration': ([54, ], [74, ]), 'Declarators': ([54, ], [75, ]),
                  'ParameterList': ([97, ], [102, ]), 'statement': (
    [104, 108, 109, 118, 120, 121, 130, 151, 152, 158, 159, 162, 165, ],
    [109, 120, 121, 130, 121, 121, 121, 158, 159, 121, 121, 165, 121, ]), 'if_st': (
    [104, 108, 109, 118, 120, 121, 130, 151, 152, 158, 159, 162, 165, ],
    [112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, ]), 'while_st': (
    [104, 108, 109, 118, 120, 121, 130, 151, 152, 158, 159, 162, 165, ],
    [113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, ]), }

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_goto: _lr_goto[_x] = {}
        _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
    ("S' -> start", "S'", 1, None, None, None),
    ('start -> ClassDeclaration', 'start', 1, 'p_s', 'parser.py', 9),
    ('start -> empty', 'start', 1, 'p_s', 'parser.py', 10),
    ('start -> exp', 'start', 1, 'p_s', 'parser.py', 11),
    (
    'ClassDeclaration -> CLASS IDENTIFIER LBRACE RBRACE', 'ClassDeclaration', 4, 'p_ClassDeclaration', 'parser.py', 16),
    (
    'ClassDeclaration -> CLASS IDENTIFIER LBRACE MethodDeclaration RBRACE', 'ClassDeclaration', 5, 'p_ClassDeclaration',
    'parser.py', 17),
    ('ClassDeclaration -> CLASS IDENTIFIER LBRACE FieldDeclaration RBRACE', 'ClassDeclaration', 5, 'p_ClassDeclaration',
     'parser.py', 18),
    ('FieldDeclaration -> Declarators IDENTIFIER SEMICOLON', 'FieldDeclaration', 3, 'p_FieldDeclaration', 'parser.py',
     23),
    ('MethodDeclaration -> Declarators IDENTIFIER LPAREN RPAREN LBRACE statement RBRACE', 'MethodDeclaration', 7,
     'p_MethodDeclaration', 'parser.py', 28),
    ('MethodDeclaration -> Declarators IDENTIFIER LPAREN RPAREN LBRACE statement RETURN exp SEMICOLON RBRACE',
     'MethodDeclaration', 10, 'p_MethodDeclaration', 'parser.py', 29),
    (
    'MethodDeclaration -> Declarators IDENTIFIER LPAREN ParameterList RPAREN LBRACE statement RETURN exp SEMICOLON RBRACE',
    'MethodDeclaration', 11, 'p_MethodDeclaration', 'parser.py', 30),
    ('MethodDeclaration -> Declarators IDENTIFIER LPAREN ParameterList RPAREN LBRACE statement RBRACE',
     'MethodDeclaration', 8, 'p_MethodDeclaration', 'parser.py', 31),
    ('ParameterList -> Type IDENTIFIER', 'ParameterList', 2, 'p_ParameterList', 'parser.py', 35),
    ('ParameterList -> Type IDENTIFIER COMMA Type IDENTIFIER', 'ParameterList', 5, 'p_ParameterList', 'parser.py', 36),
    ('Declarators -> Type', 'Declarators', 1, 'p_Declarators', 'parser.py', 40),
    ('Declarators -> STATIC Type', 'Declarators', 2, 'p_Declarators', 'parser.py', 41),
    ('Declarators -> PUBLIC Type', 'Declarators', 2, 'p_Declarators', 'parser.py', 42),
    ('Declarators -> PRIVATE Type', 'Declarators', 2, 'p_Declarators', 'parser.py', 43),
    ('Declarators -> PUBLIC STATIC Type', 'Declarators', 3, 'p_Declarators', 'parser.py', 44),
    ('Declarators -> PRIVATE STATIC Type', 'Declarators', 3, 'p_Declarators', 'parser.py', 45),
    ('Type -> PrimeType', 'Type', 1, 'p_type', 'parser.py', 50),
    ('Type -> ClassType', 'Type', 1, 'p_type', 'parser.py', 51),
    ('Type -> arraytype', 'Type', 1, 'p_type', 'parser.py', 52),
    ('PrimeType -> INT', 'PrimeType', 1, 'p_primtype', 'parser.py', 57),
    ('PrimeType -> BOOLEAN', 'PrimeType', 1, 'p_primtype', 'parser.py', 58),
    ('PrimeType -> VOID', 'PrimeType', 1, 'p_primtype', 'parser.py', 59),
    ('PrimeType -> FLOAT', 'PrimeType', 1, 'p_primtype', 'parser.py', 60),
    ('ClassType -> IDENTIFIER', 'ClassType', 1, 'p_classtype', 'parser.py', 67),
    ('arraytype -> INT LBRACKET RBRACKET', 'arraytype', 3, 'p_arraytype', 'parser.py', 72),
    ('arraytype -> ClassType LBRACKET RBRACKET', 'arraytype', 3, 'p_arraytype', 'parser.py', 73),
    ('argumentlist -> exp', 'argumentlist', 1, 'p_argumentlist', 'parser.py', 83),
    ('argumentlist -> exp COMMA exp', 'argumentlist', 3, 'p_argumentlist', 'parser.py', 84),
    ('Refrence -> THIS', 'Refrence', 1, 'p_refrence', 'parser.py', 90),
    ('Refrence -> IDENTIFIER', 'Refrence', 1, 'p_refrence', 'parser.py', 91),
    ('statement -> empty', 'statement', 1, 'p_statement', 'parser.py', 99),
    ('statement -> if_st', 'statement', 1, 'p_statement', 'parser.py', 100),
    ('statement -> while_st', 'statement', 1, 'p_statement', 'parser.py', 101),
    ('statement -> LBRACE statement RBRACE', 'statement', 3, 'p_statement', 'parser.py', 102),
    ('statement -> Refrence LPAREN argumentlist RPAREN', 'statement', 4, 'p_statement', 'parser.py', 103),
    ('statement -> Refrence LPAREN RPAREN SEMICOLON', 'statement', 4, 'p_statement', 'parser.py', 104),
    ('statement -> Refrence LBRACKET exp RBRACKET ASSIGN exp SEMICOLON', 'statement', 7, 'p_statement', 'parser.py',
     105),
    ('statement -> Refrence ASSIGN exp SEMICOLON', 'statement', 4, 'p_statement', 'parser.py', 106),
    ('statement -> PrimeType IDENTIFIER ASSIGN IDENTIFIER SEMICOLON', 'statement', 5, 'p_statement', 'parser.py', 107),
    ('statement -> PrimeType IDENTIFIER ASSIGN exp SEMICOLON', 'statement', 5, 'p_statement', 'parser.py', 108),
    ('statement -> statement statement', 'statement', 2, 'p_statement', 'parser.py', 109),
    ('statement -> exp', 'statement', 1, 'p_statement', 'parser.py', 110),
    ('while_st -> WHILE LPAREN exp RPAREN statement', 'while_st', 5, 'p_while_st', 'parser.py', 138),
    ('if_st -> IF LPAREN exp RPAREN statement ELSE statement', 'if_st', 7, 'p_if_st', 'parser.py', 144),
    ('if_st -> IF LPAREN exp RPAREN statement', 'if_st', 5, 'p_if_st', 'parser.py', 145),
    ('exp -> <empty>', 'exp', 0, 'p_exp', 'parser.py', 150),
    ('exp -> exp Binop exp', 'exp', 3, 'p_exp', 'parser.py', 151),
    ('exp -> IDENTIFIER', 'exp', 1, 'p_exp', 'parser.py', 152),
    ('exp -> Type exp', 'exp', 2, 'p_exp', 'parser.py', 153),
    ('exp -> Refrence LBRACKET exp RBRACKET', 'exp', 4, 'p_exp', 'parser.py', 154),
    ('exp -> Refrence LPAREN RPAREN', 'exp', 3, 'p_exp', 'parser.py', 155),
    ('exp -> Refrence LPAREN argumentlist RPAREN', 'exp', 4, 'p_exp', 'parser.py', 156),
    ('exp -> Unop exp', 'exp', 2, 'p_exp', 'parser.py', 157),
    ('exp -> LPAREN exp RPAREN', 'exp', 3, 'p_exp', 'parser.py', 158),
    ('exp -> TRUE', 'exp', 1, 'p_exp', 'parser.py', 159),
    ('exp -> IDENTIFIER Binop NUMBER', 'exp', 3, 'p_exp', 'parser.py', 160),
    ('exp -> FALSE', 'exp', 1, 'p_exp', 'parser.py', 161),
    ('exp -> NEW IDENTIFIER LPAREN RPAREN', 'exp', 4, 'p_exp', 'parser.py', 162),
    ('exp -> NEW INT LBRACKET exp RBRACKET', 'exp', 5, 'p_exp', 'parser.py', 163),
    ('exp -> NEW IDENTIFIER LBRACKET exp RBRACKET', 'exp', 5, 'p_exp', 'parser.py', 164),
    ('exp -> NUMBER Binop NUMBER', 'exp', 3, 'p_exp', 'parser.py', 165),
    ('exp -> NUMBER Binop float', 'exp', 3, 'p_exp', 'parser.py', 166),
    ('exp -> float Binop NUMBER', 'exp', 3, 'p_exp', 'parser.py', 167),
    ('exp -> float Binop float', 'exp', 3, 'p_exp', 'parser.py', 168),
    ('Unop -> NOT', 'Unop', 1, 'p_Unop', 'parser.py', 178),
    ('Unop -> MINUS', 'Unop', 1, 'p_Unop', 'parser.py', 179),
    ('float -> NUMBER COMMA NUMBER', 'float', 3, 'p_float', 'parser.py', 185),
    ('Binop -> PLUS', 'Binop', 1, 'p_Binop', 'parser.py', 190),
    ('Binop -> MINUS', 'Binop', 1, 'p_Binop', 'parser.py', 191),
    ('Binop -> TIMES', 'Binop', 1, 'p_Binop', 'parser.py', 192),
    ('Binop -> DIVIDE', 'Binop', 1, 'p_Binop', 'parser.py', 193),
    ('Binop -> EQ', 'Binop', 1, 'p_Binop', 'parser.py', 194),
    ('Binop -> NOT_EQ', 'Binop', 1, 'p_Binop', 'parser.py', 195),
    ('Binop -> LT', 'Binop', 1, 'p_Binop', 'parser.py', 196),
    ('Binop -> GT', 'Binop', 1, 'p_Binop', 'parser.py', 197),
    ('Binop -> LE', 'Binop', 1, 'p_Binop', 'parser.py', 198),
    ('Binop -> GE', 'Binop', 1, 'p_Binop', 'parser.py', 199),
    ('Binop -> AND', 'Binop', 1, 'p_Binop', 'parser.py', 200),
    ('Binop -> NOT', 'Binop', 1, 'p_Binop', 'parser.py', 201),
    ('empty -> <empty>', 'empty', 0, 'p_empty', 'parser.py', 209),
]
